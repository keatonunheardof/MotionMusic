
packet_test_3v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001ae2  00001b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800108  00800108  00001b7e  2**0
                  ALLOC
  3 .stab         000024cc  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001416  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005462  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9c 00 	jmp	0x138	; 0x138 <__ctors_end>
       4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
       8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
       c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      10:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      14:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      18:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      1c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      20:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      24:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      28:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      2c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      30:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      34:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      38:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      3c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      40:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      44:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      48:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      4c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      50:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      54:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      58:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      5c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      60:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_24>
      64:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      68:	4b 02       	muls	r20, r27
      6a:	24 02       	muls	r18, r20
      6c:	24 02       	muls	r18, r20
      6e:	24 02       	muls	r18, r20
      70:	24 02       	muls	r18, r20
      72:	24 02       	muls	r18, r20
      74:	24 02       	muls	r18, r20
      76:	24 02       	muls	r18, r20
      78:	4b 02       	muls	r20, r27
      7a:	24 02       	muls	r18, r20
      7c:	24 02       	muls	r18, r20
      7e:	24 02       	muls	r18, r20
      80:	24 02       	muls	r18, r20
      82:	24 02       	muls	r18, r20
      84:	24 02       	muls	r18, r20
      86:	24 02       	muls	r18, r20
      88:	55 02       	muls	r21, r21
      8a:	24 02       	muls	r18, r20
      8c:	24 02       	muls	r18, r20
      8e:	24 02       	muls	r18, r20
      90:	24 02       	muls	r18, r20
      92:	24 02       	muls	r18, r20
      94:	24 02       	muls	r18, r20
      96:	24 02       	muls	r18, r20
      98:	24 02       	muls	r18, r20
      9a:	24 02       	muls	r18, r20
      9c:	24 02       	muls	r18, r20
      9e:	24 02       	muls	r18, r20
      a0:	24 02       	muls	r18, r20
      a2:	24 02       	muls	r18, r20
      a4:	24 02       	muls	r18, r20
      a6:	24 02       	muls	r18, r20
      a8:	55 02       	muls	r21, r21
      aa:	24 02       	muls	r18, r20
      ac:	24 02       	muls	r18, r20
      ae:	24 02       	muls	r18, r20
      b0:	24 02       	muls	r18, r20
      b2:	24 02       	muls	r18, r20
      b4:	24 02       	muls	r18, r20
      b6:	24 02       	muls	r18, r20
      b8:	24 02       	muls	r18, r20
      ba:	24 02       	muls	r18, r20
      bc:	24 02       	muls	r18, r20
      be:	24 02       	muls	r18, r20
      c0:	24 02       	muls	r18, r20
      c2:	24 02       	muls	r18, r20
      c4:	24 02       	muls	r18, r20
      c6:	24 02       	muls	r18, r20
      c8:	6c 02       	muls	r22, r28
      ca:	24 02       	muls	r18, r20
      cc:	24 02       	muls	r18, r20
      ce:	24 02       	muls	r18, r20
      d0:	24 02       	muls	r18, r20
      d2:	24 02       	muls	r18, r20
      d4:	24 02       	muls	r18, r20
      d6:	24 02       	muls	r18, r20
      d8:	70 02       	muls	r23, r16
      da:	24 02       	muls	r18, r20
      dc:	24 02       	muls	r18, r20
      de:	24 02       	muls	r18, r20
      e0:	24 02       	muls	r18, r20
      e2:	24 02       	muls	r18, r20
      e4:	24 02       	muls	r18, r20
      e6:	24 02       	muls	r18, r20
      e8:	24 02       	muls	r18, r20
      ea:	24 02       	muls	r18, r20
      ec:	24 02       	muls	r18, r20
      ee:	24 02       	muls	r18, r20
      f0:	24 02       	muls	r18, r20
      f2:	24 02       	muls	r18, r20
      f4:	24 02       	muls	r18, r20
      f6:	24 02       	muls	r18, r20
      f8:	7e 02       	muls	r23, r30
      fa:	24 02       	muls	r18, r20
      fc:	24 02       	muls	r18, r20
      fe:	24 02       	muls	r18, r20
     100:	24 02       	muls	r18, r20
     102:	24 02       	muls	r18, r20
     104:	24 02       	muls	r18, r20
     106:	24 02       	muls	r18, r20
     108:	3c 02       	muls	r19, r28
     10a:	08 4a       	sbci	r16, 0xA8	; 168
     10c:	d7 3b       	cpi	r29, 0xB7	; 183
     10e:	3b ce       	rjmp	.-906    	; 0xfffffd86 <__eeprom_end+0xff7efd86>
     110:	01 6e       	ori	r16, 0xE1	; 225
     112:	84 bc       	out	0x24, r8	; 36
     114:	bf fd       	.word	0xfdbf	; ????
     116:	c1 2f       	mov	r28, r17
     118:	3d 6c       	ori	r19, 0xCD	; 205
     11a:	74 31       	cpi	r23, 0x14	; 20
     11c:	9a bd       	out	0x2a, r25	; 42
     11e:	56 83       	std	Z+6, r21	; 0x06
     120:	3d da       	rcall	.-2950   	; 0xfffff59c <__eeprom_end+0xff7ef59c>
     122:	3d 00       	.word	0x003d	; ????
     124:	c7 7f       	andi	r28, 0xF7	; 247
     126:	11 be       	out	0x31, r1	; 49
     128:	d9 e4       	ldi	r29, 0x49	; 73
     12a:	bb 4c       	sbci	r27, 0xCB	; 203
     12c:	3e 91       	ld	r19, -X
     12e:	6b aa       	std	Y+51, r6	; 0x33
     130:	aa be       	out	0x3a, r10	; 58
     132:	00 00       	nop
     134:	00 80       	ld	r0, Z
     136:	3f 00       	.word	0x003f	; ????

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	d8 e0       	ldi	r29, 0x08	; 8
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e2 ee       	ldi	r30, 0xE2	; 226
     14c:	fa e1       	ldi	r31, 0x1A	; 26
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	a8 30       	cpi	r26, 0x08	; 8
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	21 e0       	ldi	r18, 0x01	; 1
     15c:	a8 e0       	ldi	r26, 0x08	; 8
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a0 31       	cpi	r26, 0x10	; 16
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	0e 94 c8 02 	call	0x590	; 0x590 <main>
     16e:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <_exit>

00000172 <__bad_interrupt>:
     172:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000176 <UART_Init>:

// Initialize UART 
void UART_Init( uint16_t ubrr){

    // Set baud rate 
    UBRR0H = (char)(ubrr>>8);
     176:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (char)ubrr;
     17a:	80 93 c4 00 	sts	0x00C4, r24

    // Enable receiver and transmitter 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     17e:	88 e1       	ldi	r24, 0x18	; 24
     180:	80 93 c1 00 	sts	0x00C1, r24

    // Set frame format: 8 data bits, 2 stop bits 
    UCSR0C = (0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     184:	86 e0       	ldi	r24, 0x06	; 6
     186:	80 93 c2 00 	sts	0x00C2, r24
     18a:	08 95       	ret

0000018c <UART_Transmit>:

// UART Transmit
void UART_Transmit( char data ){

    // Wait for empty transmit buffer 
    while (!( UCSR0A & (1<<UDRE0))){}
     18c:	90 91 c0 00 	lds	r25, 0x00C0
     190:	95 ff       	sbrs	r25, 5
     192:	fc cf       	rjmp	.-8      	; 0x18c <UART_Transmit>

    // Put data into buffer, sends the data
    UDR0 = data;
     194:	80 93 c6 00 	sts	0x00C6, r24
     198:	08 95       	ret

0000019a <UART_Receive>:

// UART Receive
char UART_Receive( void ){

    // Wait for data to be received 
    while ( !(UCSR0A & (1<<RXC0)) ){}
     19a:	80 91 c0 00 	lds	r24, 0x00C0
     19e:	87 ff       	sbrs	r24, 7
     1a0:	fc cf       	rjmp	.-8      	; 0x19a <UART_Receive>

    // Get and return received data from buffer 
    return UDR0;
     1a2:	80 91 c6 00 	lds	r24, 0x00C6
}
     1a6:	08 95       	ret

000001a8 <UART_Transmit_String>:
void UART_Transmit_String( char str[] ){

    int i = 0;
    
    // Transmit until a null character is reached
    while(str[i] != 0x00){
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 81       	ld	r18, Z
     1ac:	22 23       	and	r18, r18
     1ae:	51 f0       	breq	.+20     	; 0x1c4 <UART_Transmit_String+0x1c>
     1b0:	31 96       	adiw	r30, 0x01	; 1

// UART Transmit
void UART_Transmit( char data ){

    // Wait for empty transmit buffer 
    while (!( UCSR0A & (1<<UDRE0))){}
     1b2:	80 91 c0 00 	lds	r24, 0x00C0
     1b6:	85 ff       	sbrs	r24, 5
     1b8:	fc cf       	rjmp	.-8      	; 0x1b2 <UART_Transmit_String+0xa>

    // Put data into buffer, sends the data
    UDR0 = data;
     1ba:	20 93 c6 00 	sts	0x00C6, r18
void UART_Transmit_String( char str[] ){

    int i = 0;
    
    // Transmit until a null character is reached
    while(str[i] != 0x00){
     1be:	21 91       	ld	r18, Z+
     1c0:	21 11       	cpse	r18, r1
     1c2:	f7 cf       	rjmp	.-18     	; 0x1b2 <UART_Transmit_String+0xa>
     1c4:	08 95       	ret

000001c6 <UART_Receive_Byte>:

// UART Receive
char UART_Receive( void ){

    // Wait for data to be received 
    while ( !(UCSR0A & (1<<RXC0)) ){}
     1c6:	80 91 c0 00 	lds	r24, 0x00C0
     1ca:	87 ff       	sbrs	r24, 7
     1cc:	fc cf       	rjmp	.-8      	; 0x1c6 <UART_Receive_Byte>

    // Get and return received data from buffer 
    return UDR0;
     1ce:	80 91 c6 00 	lds	r24, 0x00C6

// UART Transmit
void UART_Transmit( char data ){

    // Wait for empty transmit buffer 
    while (!( UCSR0A & (1<<UDRE0))){}
     1d2:	90 91 c0 00 	lds	r25, 0x00C0
     1d6:	95 ff       	sbrs	r25, 5
     1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <UART_Receive_Byte+0xc>

    // Put data into buffer, sends the data
    UDR0 = data;
     1da:	80 93 c6 00 	sts	0x00C6, r24

// UART Receive
char UART_Receive( void ){

    // Wait for data to be received 
    while ( !(UCSR0A & (1<<RXC0)) ){}
     1de:	90 91 c0 00 	lds	r25, 0x00C0
     1e2:	97 ff       	sbrs	r25, 7
     1e4:	fc cf       	rjmp	.-8      	; 0x1de <UART_Receive_Byte+0x18>

    // Get and return received data from buffer 
    return UDR0;
     1e6:	20 91 c6 00 	lds	r18, 0x00C6

// UART Transmit
void UART_Transmit( char data ){

    // Wait for empty transmit buffer 
    while (!( UCSR0A & (1<<UDRE0))){}
     1ea:	90 91 c0 00 	lds	r25, 0x00C0
     1ee:	95 ff       	sbrs	r25, 5
     1f0:	fc cf       	rjmp	.-8      	; 0x1ea <UART_Receive_Byte+0x24>

    // Put data into buffer, sends the data
    UDR0 = data;
     1f2:	20 93 c6 00 	sts	0x00C6, r18

// UART Transmit
void UART_Transmit( char data ){

    // Wait for empty transmit buffer 
    while (!( UCSR0A & (1<<UDRE0))){}
     1f6:	90 91 c0 00 	lds	r25, 0x00C0
     1fa:	95 ff       	sbrs	r25, 5
     1fc:	fc cf       	rjmp	.-8      	; 0x1f6 <UART_Receive_Byte+0x30>

    // Put data into buffer, sends the data
    UDR0 = data;
     1fe:	9a e0       	ldi	r25, 0x0A	; 10
     200:	90 93 c6 00 	sts	0x00C6, r25

// Convert ASCII character to hex number
uint8_t atoh( char ascii_char ){
    
    // If ASCII character is between A and F
    if(ascii_char >= 'A' && ascii_char <= 'F')
     204:	9f eb       	ldi	r25, 0xBF	; 191
     206:	98 0f       	add	r25, r24
     208:	96 30       	cpi	r25, 0x06	; 6
     20a:	a8 f0       	brcs	.+42     	; 0x236 <UART_Receive_Byte+0x70>
        return ascii_char - 'A' + 10;
    
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
     20c:	9f e9       	ldi	r25, 0x9F	; 159
     20e:	98 0f       	add	r25, r24
     210:	96 30       	cpi	r25, 0x06	; 6
     212:	b8 f4       	brcc	.+46     	; 0x242 <UART_Receive_Byte+0x7c>
        return ascii_char - 'a' + 10;
     214:	87 55       	subi	r24, 0x57	; 87
     216:	82 95       	swap	r24
     218:	80 7f       	andi	r24, 0xF0	; 240

// Convert ASCII character to hex number
uint8_t atoh( char ascii_char ){
    
    // If ASCII character is between A and F
    if(ascii_char >= 'A' && ascii_char <= 'F')
     21a:	9f eb       	ldi	r25, 0xBF	; 191
     21c:	92 0f       	add	r25, r18
     21e:	96 30       	cpi	r25, 0x06	; 6
     220:	70 f0       	brcs	.+28     	; 0x23e <UART_Receive_Byte+0x78>
        return ascii_char - 'A' + 10;
    
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
     222:	9f e9       	ldi	r25, 0x9F	; 159
     224:	92 0f       	add	r25, r18
     226:	96 30       	cpi	r25, 0x06	; 6
     228:	90 f0       	brcs	.+36     	; 0x24e <UART_Receive_Byte+0x88>
        return ascii_char - 'a' + 10;
    
    // If ASCII character is between 0 and 9
    else if(ascii_char >= '0' && ascii_char <= '9')
     22a:	20 53       	subi	r18, 0x30	; 48
     22c:	2a 30       	cpi	r18, 0x0A	; 10
     22e:	08 f0       	brcs	.+2      	; 0x232 <UART_Receive_Byte+0x6c>
        return ascii_char - '0';

    else return 0;
     230:	20 e0       	ldi	r18, 0x00	; 0

    // Convert ascii characters to an integer from 0 to 255
    byte = (atoh(byte_str[1])<<4) + atoh(byte_str[0]);
        
    return byte;  
}
     232:	82 0f       	add	r24, r18
     234:	08 95       	ret
// Convert ASCII character to hex number
uint8_t atoh( char ascii_char ){
    
    // If ASCII character is between A and F
    if(ascii_char >= 'A' && ascii_char <= 'F')
        return ascii_char - 'A' + 10;
     236:	87 53       	subi	r24, 0x37	; 55
     238:	82 95       	swap	r24
     23a:	80 7f       	andi	r24, 0xF0	; 240
     23c:	ee cf       	rjmp	.-36     	; 0x21a <UART_Receive_Byte+0x54>
     23e:	27 53       	subi	r18, 0x37	; 55
     240:	f8 cf       	rjmp	.-16     	; 0x232 <UART_Receive_Byte+0x6c>
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
        return ascii_char - 'a' + 10;
    
    // If ASCII character is between 0 and 9
    else if(ascii_char >= '0' && ascii_char <= '9')
     242:	80 53       	subi	r24, 0x30	; 48
     244:	8a 30       	cpi	r24, 0x0A	; 10
     246:	28 f4       	brcc	.+10     	; 0x252 <UART_Receive_Byte+0x8c>
     248:	82 95       	swap	r24
     24a:	80 7f       	andi	r24, 0xF0	; 240
     24c:	e6 cf       	rjmp	.-52     	; 0x21a <UART_Receive_Byte+0x54>
    if(ascii_char >= 'A' && ascii_char <= 'F')
        return ascii_char - 'A' + 10;
    
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
        return ascii_char - 'a' + 10;
     24e:	27 55       	subi	r18, 0x57	; 87
     250:	f0 cf       	rjmp	.-32     	; 0x232 <UART_Receive_Byte+0x6c>
    
    // If ASCII character is between 0 and 9
    else if(ascii_char >= '0' && ascii_char <= '9')
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	e2 cf       	rjmp	.-60     	; 0x21a <UART_Receive_Byte+0x54>

00000256 <atoh>:

// Convert ASCII character to hex number
uint8_t atoh( char ascii_char ){
    
    // If ASCII character is between A and F
    if(ascii_char >= 'A' && ascii_char <= 'F')
     256:	9f eb       	ldi	r25, 0xBF	; 191
     258:	98 0f       	add	r25, r24
     25a:	96 30       	cpi	r25, 0x06	; 6
     25c:	50 f0       	brcs	.+20     	; 0x272 <atoh+0x1c>
        return ascii_char - 'A' + 10;
    
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
     25e:	9f e9       	ldi	r25, 0x9F	; 159
     260:	98 0f       	add	r25, r24
     262:	96 30       	cpi	r25, 0x06	; 6
     264:	20 f0       	brcs	.+8      	; 0x26e <atoh+0x18>
        return ascii_char - 'a' + 10;
    
    // If ASCII character is between 0 and 9
    else if(ascii_char >= '0' && ascii_char <= '9')
     266:	80 53       	subi	r24, 0x30	; 48
     268:	8a 30       	cpi	r24, 0x0A	; 10
     26a:	28 f4       	brcc	.+10     	; 0x276 <atoh+0x20>
        return ascii_char - '0';

    else return 0;
}
     26c:	08 95       	ret
    if(ascii_char >= 'A' && ascii_char <= 'F')
        return ascii_char - 'A' + 10;
    
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
        return ascii_char - 'a' + 10;
     26e:	87 55       	subi	r24, 0x57	; 87
     270:	08 95       	ret
// Convert ASCII character to hex number
uint8_t atoh( char ascii_char ){
    
    // If ASCII character is between A and F
    if(ascii_char >= 'A' && ascii_char <= 'F')
        return ascii_char - 'A' + 10;
     272:	87 53       	subi	r24, 0x37	; 55
     274:	08 95       	ret
    
    // If ASCII character is between 0 and 9
    else if(ascii_char >= '0' && ascii_char <= '9')
        return ascii_char - '0';

    else return 0;
     276:	80 e0       	ldi	r24, 0x00	; 0
}
     278:	08 95       	ret

0000027a <SPI_Init>:

// Initialize ATMega328p for SPI Transmition
void SPI_Init(void){

    // Set MOSI, SCK and SS to output, and MISO to input
    DDRB = 0x2C;
     27a:	8c e2       	ldi	r24, 0x2C	; 44
     27c:	84 b9       	out	0x04, r24	; 4

    // Set CS High
    PORTB |= (1<<PB2);
     27e:	2a 9a       	sbi	0x05, 2	; 5

    // SPI enabled, master, low polarity, MSB 1st
    SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA); 
     280:	8c e5       	ldi	r24, 0x5C	; 92
     282:	8c bd       	out	0x2c, r24	; 44
   
    // Set SCK to run at I/O Clock/2
    SPSR = (1<<SPI2X); 
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	8d bd       	out	0x2d, r24	; 45
     288:	08 95       	ret

0000028a <SPI_Transmit>:

// Send SPI Data
void SPI_Transmit(uint8_t address, uint8_t data_out){
   
    // Drive CS Low    
    PORTB &= ~(1<<PB2);
     28a:	2a 98       	cbi	0x05, 2	; 5

    // Load address of where to write data
    SPDR = address;
     28c:	8e bd       	out	0x2e, r24	; 46
    
    // Wait until 8 clock cycles are done
    while(!(SPSR & (1<<SPIF))){}
     28e:	0d b4       	in	r0, 0x2d	; 45
     290:	07 fe       	sbrs	r0, 7
     292:	fd cf       	rjmp	.-6      	; 0x28e <SPI_Transmit+0x4>
    
    // Load data into SPDR for transmition
    SPDR = data_out;
     294:	6e bd       	out	0x2e, r22	; 46
    
    // Wait until 8 clock cycles are done
    while(!(SPSR & (1<<SPIF))){}
     296:	0d b4       	in	r0, 0x2d	; 45
     298:	07 fe       	sbrs	r0, 7
     29a:	fd cf       	rjmp	.-6      	; 0x296 <SPI_Transmit+0xc>
    
    // Drive CS High    
    PORTB |= (1<<PB2);
     29c:	2a 9a       	sbi	0x05, 2	; 5
     29e:	08 95       	ret

000002a0 <SPI_Receive>:

// Read SPI Data
uint8_t SPI_Receive(uint8_t address){
    
    // Drive CS Low    
    PORTB &= ~(1<<PB2);
     2a0:	2a 98       	cbi	0x05, 2	; 5
    
    // Load address of where to read data
    SPDR = (0x80 | address);
     2a2:	80 68       	ori	r24, 0x80	; 128
     2a4:	8e bd       	out	0x2e, r24	; 46
    
    // Wait until 8 clock cycles are done
    while(!(SPSR & (1<<SPIF))){}
     2a6:	0d b4       	in	r0, 0x2d	; 45
     2a8:	07 fe       	sbrs	r0, 7
     2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <SPI_Receive+0x6>
    
    // Load dummy to receive return transmition
    SPDR = 0x00;
     2ac:	1e bc       	out	0x2e, r1	; 46
    
    // Wait until 8 clock cycles are done
    while(!(SPSR & (1<<SPIF))){}
     2ae:	0d b4       	in	r0, 0x2d	; 45
     2b0:	07 fe       	sbrs	r0, 7
     2b2:	fd cf       	rjmp	.-6      	; 0x2ae <SPI_Receive+0xe>
    
    // Drive CS High    
    PORTB |= (1<<PB2);
     2b4:	2a 9a       	sbi	0x05, 2	; 5
    
    // Return incoming data from SPDR
    return(SPDR);  
     2b6:	8e b5       	in	r24, 0x2e	; 46
}
     2b8:	08 95       	ret

000002ba <init_LSM6DS3>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ba:	8f e5       	ldi	r24, 0x5F	; 95
     2bc:	9a ee       	ldi	r25, 0xEA	; 234
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <init_LSM6DS3+0x4>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <init_LSM6DS3+0xa>
     2c4:	00 00       	nop
     2c6:	08 95       	ret

000002c8 <write_LSM6DS3>:
//*****************************************************************************
// 
// This function is used to write to a register on the LSM6DS3. The byte that 
// is in value gets written to the register location specified by address. 

void write_LSM6DS3(uint8_t address, uint8_t value){
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <write_LSM6DS3+0x6>
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62

    uint8_t wr_buf[2];

    // Save address to address buffer
    wr_buf[0] = address;
     2d2:	89 83       	std	Y+1, r24	; 0x01
    wr_buf[1] = value;
     2d4:	6a 83       	std	Y+2, r22	; 0x02

    // Write value to register address
    twi_start_wr(LSM6DS3_WRITE, wr_buf, 2);
     2d6:	42 e0       	ldi	r20, 0x02	; 2
     2d8:	be 01       	movw	r22, r28
     2da:	6f 5f       	subi	r22, 0xFF	; 255
     2dc:	7f 4f       	sbci	r23, 0xFF	; 255
     2de:	84 ed       	ldi	r24, 0xD4	; 212
     2e0:	0e 94 9d 02 	call	0x53a	; 0x53a <twi_start_wr>
    
    // Wait until data is sent
    while(twi_busy());
     2e4:	0e 94 99 02 	call	0x532	; 0x532 <twi_busy>
     2e8:	81 11       	cpse	r24, r1
     2ea:	fc cf       	rjmp	.-8      	; 0x2e4 <write_LSM6DS3+0x1c>

}
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <read_LSM6DS3>:
//*****************************************************************************
// 
// This function is used to read from the register specified by address on the 
// LSM6DS3. The result is then saved into rd_buf. 

void read_LSM6DS3(uint8_t address, uint8_t *rd_buf){
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	1f 92       	push	r1
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	8b 01       	movw	r16, r22

    uint8_t addr_buf[1];

    // Save address to address buffer
    addr_buf[0] = address;
     306:	89 83       	std	Y+1, r24	; 0x01

    // Write register address of where to read data from
    twi_start_wr(LSM6DS3_WRITE, addr_buf, 1);
     308:	41 e0       	ldi	r20, 0x01	; 1
     30a:	be 01       	movw	r22, r28
     30c:	6f 5f       	subi	r22, 0xFF	; 255
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	84 ed       	ldi	r24, 0xD4	; 212
     312:	0e 94 9d 02 	call	0x53a	; 0x53a <twi_start_wr>

    // Recieve data from register address and store in rd_buf
    twi_start_rd(LSM6DS3_READ, rd_buf, 1);
     316:	41 e0       	ldi	r20, 0x01	; 1
     318:	b8 01       	movw	r22, r16
     31a:	85 ed       	ldi	r24, 0xD5	; 213
     31c:	0e 94 ae 02 	call	0x55c	; 0x55c <twi_start_rd>

    // Wait until data is recieved
    while(twi_busy());
     320:	0e 94 99 02 	call	0x532	; 0x532 <twi_busy>
     324:	81 11       	cpse	r24, r1
     326:	fc cf       	rjmp	.-8      	; 0x320 <read_LSM6DS3+0x2a>
}
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	08 95       	ret

00000334 <accel_data_avail>:
uint8_t accel_data_avail(){

    static uint8_t status_buf[1];

    // Read status register
    read_LSM6DS3(STATUS_REG, status_buf);
     334:	69 e0       	ldi	r22, 0x09	; 9
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	8e e1       	ldi	r24, 0x1E	; 30
     33a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>

    // If Accelerometer data is ready
    if(status_buf[0] & XLDA)
     33e:	80 91 09 01 	lds	r24, 0x0109
        return 1;
    else
        return 0;
}
     342:	81 70       	andi	r24, 0x01	; 1
     344:	08 95       	ret

00000346 <gyro_data_avail>:
uint8_t gyro_data_avail(){

    static uint8_t status_buf[1]; 

    // Read status register
    read_LSM6DS3(STATUS_REG, status_buf);
     346:	68 e0       	ldi	r22, 0x08	; 8
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	8e e1       	ldi	r24, 0x1E	; 30
     34c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>

    // If Gyroscope data is ready
    if(status_buf[0] & GDA)
     350:	80 91 08 01 	lds	r24, 0x0108
        return 1;
    else
        return 0;

}
     354:	86 95       	lsr	r24
     356:	81 70       	andi	r24, 0x01	; 1
     358:	08 95       	ret

0000035a <set_bits>:
//*****************************************************************************
// 
// This function sets specific register bits in the LSM6DS3 while leaving the 
// other bits unchanged.

void set_bits(uint8_t address, uint8_t bits_to_set){
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	1f 92       	push	r1
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	18 2f       	mov	r17, r24
     36a:	06 2f       	mov	r16, r22

    uint8_t new_byte;
    uint8_t curr_bits[1];

    // Get current bits in register
    read_LSM6DS3(address, curr_bits);
     36c:	be 01       	movw	r22, r28
     36e:	6f 5f       	subi	r22, 0xFF	; 255
     370:	7f 4f       	sbci	r23, 0xFF	; 255
     372:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>

    // Save new byte
    new_byte = curr_bits[0] | bits_to_set;
     376:	69 81       	ldd	r22, Y+1	; 0x01
     378:	60 2b       	or	r22, r16

    // Write new byte to register
    write_LSM6DS3(address, new_byte);
     37a:	81 2f       	mov	r24, r17
     37c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <write_LSM6DS3>
    
}
     380:	0f 90       	pop	r0
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret

0000038c <init_accel>:
// This function initializes the accelerometer. Listed Below are the parameters
// that the accelerometer is initialized to.
void init_accel(){
    
    // Enable X,Y and Z accelerometer axes
    set_bits(CTRL9_XL, Xen_XL | Yen_XL | Zen_XL); 
     38c:	68 e3       	ldi	r22, 0x38	; 56
     38e:	88 e1       	ldi	r24, 0x18	; 24
     390:	0e 94 ad 01 	call	0x35a	; 0x35a <set_bits>

    // Set accelerometer ODR to 1.66KHz and acceleration range to +/- 8G's
    set_bits(CTRL1_XL, ODR_XL2 | FS_XL0 | FS_XL1);
     394:	6c e4       	ldi	r22, 0x4C	; 76
     396:	80 e1       	ldi	r24, 0x10	; 16
     398:	0e 94 ad 01 	call	0x35a	; 0x35a <set_bits>

    // Enable data ready interrupt on INT1
    set_bits(INT1_CTRL, INT1_DRDY_XL);
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	8d e0       	ldi	r24, 0x0D	; 13
     3a0:	0c 94 ad 01 	jmp	0x35a	; 0x35a <set_bits>

000003a4 <init_gyro>:
// that the accelerometer is initialized to.

void init_gyro(){

    // Enable X,Y and Z gyroscope axes
    set_bits(CTRL10_C, Xen_G | Yen_G | Zen_G); 
     3a4:	68 e3       	ldi	r22, 0x38	; 56
     3a6:	89 e1       	ldi	r24, 0x19	; 25
     3a8:	0e 94 ad 01 	call	0x35a	; 0x35a <set_bits>

    // Set gyroscope ODR to 1.66KHz angular rate to to 1000 degrees/second
    set_bits(CTRL2_G, ODR_G2 | FS_G1);
     3ac:	68 e4       	ldi	r22, 0x48	; 72
     3ae:	81 e1       	ldi	r24, 0x11	; 17
     3b0:	0e 94 ad 01 	call	0x35a	; 0x35a <set_bits>

    // Enable gyroscope data ready interrupt on INT1
    set_bits(INT2_CTRL, INT2_DRDY_G);   
     3b4:	62 e0       	ldi	r22, 0x02	; 2
     3b6:	8e e0       	ldi	r24, 0x0E	; 14
     3b8:	0c 94 ad 01 	jmp	0x35a	; 0x35a <set_bits>

000003bc <clear_bits>:
//*****************************************************************************
// 
// This function clears specific register bits in the LSM6DS3 while leaving the 
// other bits unchanged.

void clear_bits(uint8_t address, uint8_t bits_to_clear){
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	1f 92       	push	r1
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	18 2f       	mov	r17, r24
     3cc:	06 2f       	mov	r16, r22

    uint8_t new_byte;
    uint8_t curr_bits[1];

    // Get current bits in register
    read_LSM6DS3(address, curr_bits);
     3ce:	be 01       	movw	r22, r28
     3d0:	6f 5f       	subi	r22, 0xFF	; 255
     3d2:	7f 4f       	sbci	r23, 0xFF	; 255
     3d4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>

    // Save new byte
    new_byte = curr_bits[0] &~ bits_to_clear;
     3d8:	60 2f       	mov	r22, r16
     3da:	60 95       	com	r22
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	68 23       	and	r22, r24

    // Write new byte to register
    write_LSM6DS3(address, new_byte);
     3e0:	81 2f       	mov	r24, r17
     3e2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <write_LSM6DS3>
    
}
     3e6:	0f 90       	pop	r0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <check_bit>:
//*****************************************************************************
// 
// This function checks a specific register bit in the LSM6DS3 and returns a 1
// if the bit is set and a 0 if the bit is clear.

uint8_t check_bit(uint8_t address, uint8_t bit_to_check){
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	1f 92       	push	r1
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	16 2f       	mov	r17, r22

    uint8_t bit_result;
    uint8_t curr_bits[1];

    // Get current bits in register
    read_LSM6DS3(address, curr_bits);
     400:	be 01       	movw	r22, r28
     402:	6f 5f       	subi	r22, 0xFF	; 255
     404:	7f 4f       	sbci	r23, 0xFF	; 255
     406:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>

    // Check bit
    bit_result = curr_bits[0] &= bit_to_check;
     40a:	99 81       	ldd	r25, Y+1	; 0x01
     40c:	91 23       	and	r25, r17

    if(bit_result == 0)
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	09 f4       	brne	.+2      	; 0x414 <check_bit+0x22>
     412:	80 e0       	ldi	r24, 0x00	; 0
        return 0;

    return 1;

}
     414:	0f 90       	pop	r0
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	08 95       	ret

0000041e <__vector_24>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	11 24       	eor	r1, r1
     428:	2f 93       	push	r18
     42a:	3f 93       	push	r19
     42c:	8f 93       	push	r24
     42e:	9f 93       	push	r25
     430:	af 93       	push	r26
     432:	bf 93       	push	r27
     434:	ef 93       	push	r30
     436:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     438:	80 91 b9 00 	lds	r24, 0x00B9
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	fc 01       	movw	r30, r24
     440:	38 97       	sbiw	r30, 0x08	; 8
     442:	e1 35       	cpi	r30, 0x51	; 81
     444:	f1 05       	cpc	r31, r1
     446:	a0 f0       	brcs	.+40     	; 0x470 <__vector_24+0x52>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
     448:	80 91 b9 00 	lds	r24, 0x00B9
     44c:	80 93 0b 01 	sts	0x010B, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
     450:	84 e0       	ldi	r24, 0x04	; 4
     452:	80 93 bc 00 	sts	0x00BC, r24
  }//switch
}//TWI_isr
     456:	ff 91       	pop	r31
     458:	ef 91       	pop	r30
     45a:	bf 91       	pop	r27
     45c:	af 91       	pop	r26
     45e:	9f 91       	pop	r25
     460:	8f 91       	pop	r24
     462:	3f 91       	pop	r19
     464:	2f 91       	pop	r18
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0
     46c:	1f 90       	pop	r1
     46e:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     470:	ec 5c       	subi	r30, 0xCC	; 204
     472:	ff 4f       	sbci	r31, 0xFF	; 255
     474:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
     478:	80 91 0a 01 	lds	r24, 0x010A
     47c:	e0 91 0c 01 	lds	r30, 0x010C
     480:	f0 91 0d 01 	lds	r31, 0x010D
     484:	e8 0f       	add	r30, r24
     486:	f1 1d       	adc	r31, r1
     488:	80 91 bb 00 	lds	r24, 0x00BB
     48c:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
     48e:	84 e9       	ldi	r24, 0x94	; 148
     490:	80 93 bc 00 	sts	0x00BC, r24
      break;      
     494:	e0 cf       	rjmp	.-64     	; 0x456 <__vector_24+0x38>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
     496:	80 91 0e 01 	lds	r24, 0x010E
     49a:	80 93 bb 00 	sts	0x00BB, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
     49e:	10 92 0a 01 	sts	0x010A, r1
      TWCR = TWCR_SEND;     //send SLA+RW
     4a2:	85 e8       	ldi	r24, 0x85	; 133
     4a4:	80 93 bc 00 	sts	0x00BC, r24
      break;
     4a8:	d6 cf       	rjmp	.-84     	; 0x456 <__vector_24+0x38>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
     4aa:	80 91 0a 01 	lds	r24, 0x010A
     4ae:	90 91 0f 01 	lds	r25, 0x010F
     4b2:	89 17       	cp	r24, r25
     4b4:	60 f7       	brcc	.-40     	; 0x48e <__vector_24+0x70>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
     4b6:	e0 91 0c 01 	lds	r30, 0x010C
     4ba:	f0 91 0d 01 	lds	r31, 0x010D
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	98 0f       	add	r25, r24
     4c2:	90 93 0a 01 	sts	0x010A, r25
     4c6:	e8 0f       	add	r30, r24
     4c8:	f1 1d       	adc	r31, r1
     4ca:	80 81       	ld	r24, Z
     4cc:	80 93 bb 00 	sts	0x00BB, r24
        TWCR = TWCR_SEND;               //send next byte 
     4d0:	85 e8       	ldi	r24, 0x85	; 133
     4d2:	80 93 bc 00 	sts	0x00BC, r24
     4d6:	bf cf       	rjmp	.-130    	; 0x456 <__vector_24+0x38>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
     4d8:	85 ea       	ldi	r24, 0xA5	; 165
     4da:	80 93 bc 00 	sts	0x00BC, r24
      break;
     4de:	bb cf       	rjmp	.-138    	; 0x456 <__vector_24+0x38>
     4e0:	20 91 0a 01 	lds	r18, 0x010A
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     4e4:	80 91 0f 01 	lds	r24, 0x010F
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	28 17       	cp	r18, r24
     4f0:	39 07       	cpc	r19, r25
     4f2:	dc f4       	brge	.+54     	; 0x52a <__vector_24+0x10c>
     4f4:	85 ec       	ldi	r24, 0xC5	; 197
     4f6:	80 93 bc 00 	sts	0x00BC, r24
     4fa:	ad cf       	rjmp	.-166    	; 0x456 <__vector_24+0x38>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
     4fc:	e0 91 0c 01 	lds	r30, 0x010C
     500:	f0 91 0d 01 	lds	r31, 0x010D
     504:	80 91 0a 01 	lds	r24, 0x010A
     508:	21 e0       	ldi	r18, 0x01	; 1
     50a:	28 0f       	add	r18, r24
     50c:	20 93 0a 01 	sts	0x010A, r18
     510:	e8 0f       	add	r30, r24
     512:	f1 1d       	adc	r31, r1
     514:	80 91 bb 00 	lds	r24, 0x00BB
     518:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     51a:	80 91 0f 01 	lds	r24, 0x010F
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	28 17       	cp	r18, r24
     526:	39 07       	cpc	r19, r25
     528:	2c f3       	brlt	.-54     	; 0x4f4 <__vector_24+0xd6>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
     52a:	85 e8       	ldi	r24, 0x85	; 133
     52c:	80 93 bc 00 	sts	0x00BC, r24
     530:	92 cf       	rjmp	.-220    	; 0x456 <__vector_24+0x38>

00000532 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     532:	80 91 bc 00 	lds	r24, 0x00BC
}
     536:	81 70       	andi	r24, 0x01	; 1
     538:	08 95       	ret

0000053a <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     53a:	90 91 bc 00 	lds	r25, 0x00BC
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
     53e:	90 fd       	sbrc	r25, 0
     540:	fc cf       	rjmp	.-8      	; 0x53a <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
     542:	8e 7f       	andi	r24, 0xFE	; 254
     544:	80 93 0e 01 	sts	0x010E, r24
  twi_buf = twi_data;                   //load pointer to write buffer
     548:	70 93 0d 01 	sts	0x010D, r23
     54c:	60 93 0c 01 	sts	0x010C, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
     550:	40 93 0f 01 	sts	0x010F, r20
  TWCR = TWCR_START;                    //initiate START
     554:	85 ea       	ldi	r24, 0xA5	; 165
     556:	80 93 bc 00 	sts	0x00BC, r24
     55a:	08 95       	ret

0000055c <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     55c:	90 91 bc 00 	lds	r25, 0x00BC
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
     560:	90 fd       	sbrc	r25, 0
     562:	fc cf       	rjmp	.-8      	; 0x55c <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
     564:	81 60       	ori	r24, 0x01	; 1
     566:	80 93 0e 01 	sts	0x010E, r24
  twi_buf = twi_data;                  //load pointer to write buffer
     56a:	70 93 0d 01 	sts	0x010D, r23
     56e:	60 93 0c 01 	sts	0x010C, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
     572:	40 93 0f 01 	sts	0x010F, r20
  TWCR = TWCR_START;                   //initiate START
     576:	85 ea       	ldi	r24, 0xA5	; 165
     578:	80 93 bc 00 	sts	0x00BC, r24
     57c:	08 95       	ret

0000057e <init_twi>:
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	80 93 bb 00 	sts	0x00BB, r24
     584:	10 92 b9 00 	sts	0x00B9, r1
     588:	8c e0       	ldi	r24, 0x0C	; 12
     58a:	80 93 b8 00 	sts	0x00B8, r24
     58e:	08 95       	ret

00000590 <main>:
 */
//*****************************************************************************
// Main Program
//*****************************************************************************

int main(){
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	ce 54       	subi	r28, 0x4E	; 78
     59a:	d7 40       	sbci	r29, 0x07	; 7
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
    /*
       time[0] = TCNT1;
       time[1] = TCNT1;
     */		
    // Initialize UART
    UART_Init(MY_UBRR);
     5a6:	89 e1       	ldi	r24, 0x19	; 25
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 bb 00 	call	0x176	; 0x176 <UART_Init>

    // Initialize TWI
    init_twi();
     5ae:	0e 94 bf 02 	call	0x57e	; 0x57e <init_twi>

    // Initialize LSM6DS3
    init_LSM6DS3();
     5b2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <init_LSM6DS3>

    // Initialize Accelerometer 
    init_accel();
     5b6:	0e 94 c6 01 	call	0x38c	; 0x38c <init_accel>

    // Initialize Gyroscope 
    init_gyro();
     5ba:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <init_gyro>

    // Enable overflow interrupt
    TIMSK1 |= (1<<TOIE1);
     */
    // Enable interrupts
    sei();
     5be:	78 94       	sei
    //volatile uint16_t time[2];
    //volatile uint16_t diff_time;

    char str[30];

    uint16_t cnt = 0;	
     5c0:	41 2c       	mov	r4, r1
     5c2:	51 2c       	mov	r5, r1
     5c4:	9e 01       	movw	r18, r28
     5c6:	29 5d       	subi	r18, 0xD9	; 217
     5c8:	38 4f       	sbci	r19, 0xF8	; 248
     5ca:	cd 5b       	subi	r28, 0xBD	; 189
     5cc:	d8 4f       	sbci	r29, 0xF8	; 248
     5ce:	39 83       	std	Y+1, r19	; 0x01
     5d0:	28 83       	st	Y, r18
     5d2:	c3 54       	subi	r28, 0x43	; 67
     5d4:	d7 40       	sbci	r29, 0x07	; 7
     5d6:	ce 01       	movw	r24, r28
     5d8:	87 5f       	subi	r24, 0xF7	; 247
     5da:	98 4f       	sbci	r25, 0xF8	; 248
     5dc:	cd 5c       	subi	r28, 0xCD	; 205
     5de:	d8 4f       	sbci	r29, 0xF8	; 248
     5e0:	99 83       	std	Y+1, r25	; 0x01
     5e2:	88 83       	st	Y, r24
     5e4:	c3 53       	subi	r28, 0x33	; 51
     5e6:	d7 40       	sbci	r29, 0x07	; 7
     5e8:	de 01       	movw	r26, r28
     5ea:	ab 55       	subi	r26, 0x5B	; 91
     5ec:	b9 4f       	sbci	r27, 0xF9	; 249
     5ee:	c9 5b       	subi	r28, 0xB9	; 185
     5f0:	d8 4f       	sbci	r29, 0xF8	; 248
     5f2:	b9 83       	std	Y+1, r27	; 0x01
     5f4:	a8 83       	st	Y, r26
     5f6:	c7 54       	subi	r28, 0x47	; 71
     5f8:	d7 40       	sbci	r29, 0x07	; 7
     5fa:	fe 01       	movw	r30, r28
     5fc:	ef 5b       	subi	r30, 0xBF	; 191
     5fe:	f9 4f       	sbci	r31, 0xF9	; 249
     600:	cf 5b       	subi	r28, 0xBF	; 191
     602:	d8 4f       	sbci	r29, 0xF8	; 248
     604:	f9 83       	std	Y+1, r31	; 0x01
     606:	e8 83       	st	Y, r30
     608:	c1 54       	subi	r28, 0x41	; 65
     60a:	d7 40       	sbci	r29, 0x07	; 7
     60c:	2a 54       	subi	r18, 0x4A	; 74
     60e:	31 40       	sbci	r19, 0x01	; 1
     610:	cb 5b       	subi	r28, 0xBB	; 187
     612:	d8 4f       	sbci	r29, 0xF8	; 248
     614:	39 83       	std	Y+1, r19	; 0x01
     616:	28 83       	st	Y, r18
     618:	c5 54       	subi	r28, 0x45	; 69
     61a:	d7 40       	sbci	r29, 0x07	; 7
     61c:	80 59       	subi	r24, 0x90	; 144
     61e:	91 40       	sbci	r25, 0x01	; 1
     620:	7c 01       	movw	r14, r24
     622:	a0 59       	subi	r26, 0x90	; 144
     624:	b1 40       	sbci	r27, 0x01	; 1
     626:	6d 01       	movw	r12, r26
     628:	e0 59       	subi	r30, 0x90	; 144
     62a:	f1 40       	sbci	r31, 0x01	; 1
     62c:	c7 5b       	subi	r28, 0xB7	; 183
     62e:	d8 4f       	sbci	r29, 0xF8	; 248
     630:	f9 83       	std	Y+1, r31	; 0x01
     632:	e8 83       	st	Y, r30
     634:	c9 54       	subi	r28, 0x49	; 73
     636:	d7 40       	sbci	r29, 0x07	; 7
        while(!gyro_data_avail()){}

        // Read X axis of accelerometer
        read_LSM6DS3(OUTX_L_XL, rd_buf);            // Read low byte
        _delay_ms(2);
        sprintf(str,"%02X\r\n", rd_buf[0]);
     638:	cd 5b       	subi	r28, 0xBD	; 189
     63a:	d8 4f       	sbci	r29, 0xF8	; 248
     63c:	68 80       	ld	r6, Y
     63e:	79 80       	ldd	r7, Y+1	; 0x01
     640:	c3 54       	subi	r28, 0x43	; 67
     642:	d7 40       	sbci	r29, 0x07	; 7
        UART_Transmit_String(str);
        X_XL[cnt%WINDOW_SIZE] = rd_buf[0];          // Save low byte
        
        read_LSM6DS3(OUTX_H_XL, rd_buf);            // Read high byte
        _delay_ms(2);
        sprintf(str,"%02X\r\n", rd_buf[0]);
     644:	cd 5c       	subi	r28, 0xCD	; 205
     646:	d8 4f       	sbci	r29, 0xF8	; 248
     648:	f8 81       	ld	r31, Y
     64a:	c3 53       	subi	r28, 0x33	; 51
     64c:	d7 40       	sbci	r29, 0x07	; 7
     64e:	c1 5c       	subi	r28, 0xC1	; 193
     650:	d8 4f       	sbci	r29, 0xF8	; 248
     652:	f8 83       	st	Y, r31
     654:	cf 53       	subi	r28, 0x3F	; 63
     656:	d7 40       	sbci	r29, 0x07	; 7
     658:	cc 5c       	subi	r28, 0xCC	; 204
     65a:	d8 4f       	sbci	r29, 0xF8	; 248
     65c:	28 81       	ld	r18, Y
     65e:	c4 53       	subi	r28, 0x34	; 52
     660:	d7 40       	sbci	r29, 0x07	; 7
     662:	c0 5c       	subi	r28, 0xC0	; 192
     664:	d8 4f       	sbci	r29, 0xF8	; 248
     666:	28 83       	st	Y, r18
     668:	c0 54       	subi	r28, 0x40	; 64
     66a:	d7 40       	sbci	r29, 0x07	; 7
           else
           diff_time = (time[0] - time[1]);
         */

        // Wait while data is not available
        while(!gyro_data_avail()){}
     66c:	0e 94 a3 01 	call	0x346	; 0x346 <gyro_data_avail>
     670:	88 23       	and	r24, r24
     672:	e1 f3       	breq	.-8      	; 0x66c <main+0xdc>

        // Read X axis of accelerometer
        read_LSM6DS3(OUTX_L_XL, rd_buf);            // Read low byte
     674:	cd 5b       	subi	r28, 0xBD	; 189
     676:	d8 4f       	sbci	r29, 0xF8	; 248
     678:	68 81       	ld	r22, Y
     67a:	79 81       	ldd	r23, Y+1	; 0x01
     67c:	c3 54       	subi	r28, 0x43	; 67
     67e:	d7 40       	sbci	r29, 0x07	; 7
     680:	88 e2       	ldi	r24, 0x28	; 40
     682:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     686:	8f e9       	ldi	r24, 0x9F	; 159
     688:	9f e0       	ldi	r25, 0x0F	; 15
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <main+0xfa>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <main+0x100>
     690:	00 00       	nop
        _delay_ms(2);
        sprintf(str,"%02X\r\n", rd_buf[0]);
     692:	d3 01       	movw	r26, r6
     694:	8c 91       	ld	r24, X
     696:	1f 92       	push	r1
     698:	8f 93       	push	r24
     69a:	a0 e0       	ldi	r26, 0x00	; 0
     69c:	b1 e0       	ldi	r27, 0x01	; 1
     69e:	bf 93       	push	r27
     6a0:	af 93       	push	r26
     6a2:	cc 5c       	subi	r28, 0xCC	; 204
     6a4:	d8 4f       	sbci	r29, 0xF8	; 248
     6a6:	f8 81       	ld	r31, Y
     6a8:	c4 53       	subi	r28, 0x34	; 52
     6aa:	d7 40       	sbci	r29, 0x07	; 7
     6ac:	ff 93       	push	r31
     6ae:	cd 5c       	subi	r28, 0xCD	; 205
     6b0:	d8 4f       	sbci	r29, 0xF8	; 248
     6b2:	28 81       	ld	r18, Y
     6b4:	c3 53       	subi	r28, 0x33	; 51
     6b6:	d7 40       	sbci	r29, 0x07	; 7
     6b8:	2f 93       	push	r18
     6ba:	0e 94 9e 0a 	call	0x153c	; 0x153c <sprintf>
        UART_Transmit_String(str);
     6be:	cd 5c       	subi	r28, 0xCD	; 205
     6c0:	d8 4f       	sbci	r29, 0xF8	; 248
     6c2:	88 81       	ld	r24, Y
     6c4:	99 81       	ldd	r25, Y+1	; 0x01
     6c6:	c3 53       	subi	r28, 0x33	; 51
     6c8:	d7 40       	sbci	r29, 0x07	; 7
     6ca:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <UART_Transmit_String>
        X_XL[cnt%WINDOW_SIZE] = rd_buf[0];          // Save low byte
     6ce:	92 01       	movw	r18, r4
     6d0:	36 95       	lsr	r19
     6d2:	27 95       	ror	r18
     6d4:	ab e7       	ldi	r26, 0x7B	; 123
     6d6:	b4 e1       	ldi	r27, 0x14	; 20
     6d8:	0e 94 de 07 	call	0xfbc	; 0xfbc <__umulhisi3>
     6dc:	8c 01       	movw	r16, r24
     6de:	16 95       	lsr	r17
     6e0:	07 95       	ror	r16
     6e2:	32 e3       	ldi	r19, 0x32	; 50
     6e4:	30 9f       	mul	r19, r16
     6e6:	c0 01       	movw	r24, r0
     6e8:	31 9f       	mul	r19, r17
     6ea:	90 0d       	add	r25, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	82 01       	movw	r16, r4
     6f0:	08 1b       	sub	r16, r24
     6f2:	19 0b       	sbc	r17, r25
     6f4:	d3 01       	movw	r26, r6
     6f6:	8c 91       	ld	r24, X
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	f8 01       	movw	r30, r16
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	c9 5b       	subi	r28, 0xB9	; 185
     702:	d8 4f       	sbci	r29, 0xF8	; 248
     704:	28 81       	ld	r18, Y
     706:	39 81       	ldd	r19, Y+1	; 0x01
     708:	c7 54       	subi	r28, 0x47	; 71
     70a:	d7 40       	sbci	r29, 0x07	; 7
     70c:	e2 0f       	add	r30, r18
     70e:	f3 1f       	adc	r31, r19
     710:	91 83       	std	Z+1, r25	; 0x01
     712:	80 83       	st	Z, r24
        
        read_LSM6DS3(OUTX_H_XL, rd_buf);            // Read high byte
     714:	b3 01       	movw	r22, r6
     716:	89 e2       	ldi	r24, 0x29	; 41
     718:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     71c:	8f e9       	ldi	r24, 0x9F	; 159
     71e:	9f e0       	ldi	r25, 0x0F	; 15
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <main+0x190>
     724:	00 c0       	rjmp	.+0      	; 0x726 <main+0x196>
     726:	00 00       	nop
        _delay_ms(2);
        sprintf(str,"%02X\r\n", rd_buf[0]);
     728:	d3 01       	movw	r26, r6
     72a:	8c 91       	ld	r24, X
     72c:	1f 92       	push	r1
     72e:	8f 93       	push	r24
     730:	a0 e0       	ldi	r26, 0x00	; 0
     732:	b1 e0       	ldi	r27, 0x01	; 1
     734:	bf 93       	push	r27
     736:	af 93       	push	r26
     738:	c1 5c       	subi	r28, 0xC1	; 193
     73a:	d8 4f       	sbci	r29, 0xF8	; 248
     73c:	f8 81       	ld	r31, Y
     73e:	cf 53       	subi	r28, 0x3F	; 63
     740:	d7 40       	sbci	r29, 0x07	; 7
     742:	cd 5c       	subi	r28, 0xCD	; 205
     744:	d8 4f       	sbci	r29, 0xF8	; 248
     746:	f8 83       	st	Y, r31
     748:	c3 53       	subi	r28, 0x33	; 51
     74a:	d7 40       	sbci	r29, 0x07	; 7
     74c:	c0 5c       	subi	r28, 0xC0	; 192
     74e:	d8 4f       	sbci	r29, 0xF8	; 248
     750:	28 81       	ld	r18, Y
     752:	c0 54       	subi	r28, 0x40	; 64
     754:	d7 40       	sbci	r29, 0x07	; 7
     756:	cc 5c       	subi	r28, 0xCC	; 204
     758:	d8 4f       	sbci	r29, 0xF8	; 248
     75a:	28 83       	st	Y, r18
     75c:	c4 53       	subi	r28, 0x34	; 52
     75e:	d7 40       	sbci	r29, 0x07	; 7
     760:	2f 93       	push	r18
     762:	ff 93       	push	r31
     764:	0e 94 9e 0a 	call	0x153c	; 0x153c <sprintf>
        UART_Transmit_String(str);
     768:	c1 5c       	subi	r28, 0xC1	; 193
     76a:	d8 4f       	sbci	r29, 0xF8	; 248
     76c:	88 81       	ld	r24, Y
     76e:	cf 53       	subi	r28, 0x3F	; 63
     770:	d7 40       	sbci	r29, 0x07	; 7
     772:	c0 5c       	subi	r28, 0xC0	; 192
     774:	d8 4f       	sbci	r29, 0xF8	; 248
     776:	98 81       	ld	r25, Y
     778:	c0 54       	subi	r28, 0x40	; 64
     77a:	d7 40       	sbci	r29, 0x07	; 7
     77c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <UART_Transmit_String>
        X_XL[cnt%WINDOW_SIZE] |= (rd_buf[0]<<8);    // Concatenate high and low bytes
     780:	f8 01       	movw	r30, r16
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	85 ea       	ldi	r24, 0xA5	; 165
     788:	96 e0       	ldi	r25, 0x06	; 6
     78a:	8c 0f       	add	r24, r28
     78c:	9d 1f       	adc	r25, r29
     78e:	e8 0f       	add	r30, r24
     790:	f9 1f       	adc	r31, r25
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	d3 01       	movw	r26, r6
     798:	2c 91       	ld	r18, X
     79a:	92 2b       	or	r25, r18
     79c:	91 83       	std	Z+1, r25	; 0x01
     79e:	80 83       	st	Z, r24

        // Read Y axis of accelerometer
        read_LSM6DS3(OUTY_L_XL, rd_buf);            // Read low byte
     7a0:	b3 01       	movw	r22, r6
     7a2:	8a e2       	ldi	r24, 0x2A	; 42
     7a4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     7a8:	ef e9       	ldi	r30, 0x9F	; 159
     7aa:	ff e0       	ldi	r31, 0x0F	; 15
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <main+0x21c>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <main+0x222>
     7b2:	00 00       	nop
        _delay_ms(2);
        Y_XL[cnt%WINDOW_SIZE] = rd_buf[0];          // Save low byte
     7b4:	d3 01       	movw	r26, r6
     7b6:	8c 91       	ld	r24, X
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	f8 01       	movw	r30, r16
     7bc:	ee 0f       	add	r30, r30
     7be:	ff 1f       	adc	r31, r31
     7c0:	cf 5b       	subi	r28, 0xBF	; 191
     7c2:	d8 4f       	sbci	r29, 0xF8	; 248
     7c4:	28 81       	ld	r18, Y
     7c6:	39 81       	ldd	r19, Y+1	; 0x01
     7c8:	c1 54       	subi	r28, 0x41	; 65
     7ca:	d7 40       	sbci	r29, 0x07	; 7
     7cc:	e2 0f       	add	r30, r18
     7ce:	f3 1f       	adc	r31, r19
     7d0:	91 83       	std	Z+1, r25	; 0x01
     7d2:	80 83       	st	Z, r24
        read_LSM6DS3(OUTY_H_XL, rd_buf);            // Read high byte
     7d4:	b3 01       	movw	r22, r6
     7d6:	8b e2       	ldi	r24, 0x2B	; 43
     7d8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     7dc:	8f e9       	ldi	r24, 0x9F	; 159
     7de:	9f e0       	ldi	r25, 0x0F	; 15
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <main+0x250>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <main+0x256>
     7e6:	00 00       	nop
        _delay_ms(2);
        Y_XL[cnt%WINDOW_SIZE] |= (rd_buf[0]<<8);    // Concatenate high and low bytes
     7e8:	f8 01       	movw	r30, r16
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	a1 e4       	ldi	r26, 0x41	; 65
     7f0:	b6 e0       	ldi	r27, 0x06	; 6
     7f2:	ac 0f       	add	r26, r28
     7f4:	bd 1f       	adc	r27, r29
     7f6:	ea 0f       	add	r30, r26
     7f8:	fb 1f       	adc	r31, r27
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	d3 01       	movw	r26, r6
     800:	2c 91       	ld	r18, X
     802:	92 2b       	or	r25, r18
     804:	91 83       	std	Z+1, r25	; 0x01
     806:	80 83       	st	Z, r24

        // Read Z axis of accelerometer
        read_LSM6DS3(OUTZ_L_XL, rd_buf);            // Read low byte
     808:	b3 01       	movw	r22, r6
     80a:	8c e2       	ldi	r24, 0x2C	; 44
     80c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     810:	ef e9       	ldi	r30, 0x9F	; 159
     812:	ff e0       	ldi	r31, 0x0F	; 15
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <main+0x284>
     818:	00 c0       	rjmp	.+0      	; 0x81a <main+0x28a>
     81a:	00 00       	nop
        _delay_ms(2);
        Z_XL[cnt%WINDOW_SIZE] = rd_buf[0];          // Save low byte
     81c:	d3 01       	movw	r26, r6
     81e:	8c 91       	ld	r24, X
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	f8 01       	movw	r30, r16
     824:	ee 0f       	add	r30, r30
     826:	ff 1f       	adc	r31, r31
     828:	cb 5b       	subi	r28, 0xBB	; 187
     82a:	d8 4f       	sbci	r29, 0xF8	; 248
     82c:	28 81       	ld	r18, Y
     82e:	39 81       	ldd	r19, Y+1	; 0x01
     830:	c5 54       	subi	r28, 0x45	; 69
     832:	d7 40       	sbci	r29, 0x07	; 7
     834:	e2 0f       	add	r30, r18
     836:	f3 1f       	adc	r31, r19
     838:	91 83       	std	Z+1, r25	; 0x01
     83a:	80 83       	st	Z, r24
        read_LSM6DS3(OUTZ_H_XL, rd_buf);            // Read high byte
     83c:	b3 01       	movw	r22, r6
     83e:	8d e2       	ldi	r24, 0x2D	; 45
     840:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     844:	8f e9       	ldi	r24, 0x9F	; 159
     846:	9f e0       	ldi	r25, 0x0F	; 15
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <main+0x2b8>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <main+0x2be>
     84e:	00 00       	nop
        _delay_ms(2);
        Z_XL[cnt%WINDOW_SIZE] |= (rd_buf[0]<<8);    // Concatenate high and low bytes
     850:	f8 01       	movw	r30, r16
     852:	ee 0f       	add	r30, r30
     854:	ff 1f       	adc	r31, r31
     856:	ad ed       	ldi	r26, 0xDD	; 221
     858:	b5 e0       	ldi	r27, 0x05	; 5
     85a:	ac 0f       	add	r26, r28
     85c:	bd 1f       	adc	r27, r29
     85e:	ea 0f       	add	r30, r26
     860:	fb 1f       	adc	r31, r27
     862:	80 81       	ld	r24, Z
     864:	91 81       	ldd	r25, Z+1	; 0x01
     866:	d3 01       	movw	r26, r6
     868:	2c 91       	ld	r18, X
     86a:	92 2b       	or	r25, r18
     86c:	91 83       	std	Z+1, r25	; 0x01
     86e:	80 83       	st	Z, r24

        // Read X axis of gyroscope
        read_LSM6DS3(OUTX_L_G, rd_buf);             // Read low byte
     870:	b3 01       	movw	r22, r6
     872:	82 e2       	ldi	r24, 0x22	; 34
     874:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     878:	ef e9       	ldi	r30, 0x9F	; 159
     87a:	ff e0       	ldi	r31, 0x0F	; 15
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <main+0x2ec>
     880:	00 c0       	rjmp	.+0      	; 0x882 <main+0x2f2>
     882:	00 00       	nop
        _delay_ms(2);
        X_G[cnt%WINDOW_SIZE] = rd_buf[0];           // Save low byte
     884:	d3 01       	movw	r26, r6
     886:	8c 91       	ld	r24, X
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	f8 01       	movw	r30, r16
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ee 0d       	add	r30, r14
     892:	ff 1d       	adc	r31, r15
     894:	91 83       	std	Z+1, r25	; 0x01
     896:	80 83       	st	Z, r24
        read_LSM6DS3(OUTX_H_G, rd_buf);             // Read high byte
     898:	b3 01       	movw	r22, r6
     89a:	83 e2       	ldi	r24, 0x23	; 35
     89c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     8a0:	ef e9       	ldi	r30, 0x9F	; 159
     8a2:	ff e0       	ldi	r31, 0x0F	; 15
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <main+0x314>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <main+0x31a>
     8aa:	00 00       	nop
        _delay_ms(2);
        X_G[cnt%WINDOW_SIZE] |= (rd_buf[0]<<8);     // Concatenate high and low bytes
     8ac:	f8 01       	movw	r30, r16
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	29 e7       	ldi	r18, 0x79	; 121
     8b4:	35 e0       	ldi	r19, 0x05	; 5
     8b6:	2c 0f       	add	r18, r28
     8b8:	3d 1f       	adc	r19, r29
     8ba:	e2 0f       	add	r30, r18
     8bc:	f3 1f       	adc	r31, r19
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	d3 01       	movw	r26, r6
     8c4:	2c 91       	ld	r18, X
     8c6:	92 2b       	or	r25, r18
     8c8:	91 83       	std	Z+1, r25	; 0x01
     8ca:	80 83       	st	Z, r24

        // Read Y axis of gyroscope
        read_LSM6DS3(OUTY_L_G, rd_buf);             // Read low byte
     8cc:	b3 01       	movw	r22, r6
     8ce:	84 e2       	ldi	r24, 0x24	; 36
     8d0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     8d4:	ef e9       	ldi	r30, 0x9F	; 159
     8d6:	ff e0       	ldi	r31, 0x0F	; 15
     8d8:	31 97       	sbiw	r30, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <main+0x348>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <main+0x34e>
     8de:	00 00       	nop
        _delay_ms(2);
        Y_G[cnt%WINDOW_SIZE] = rd_buf[0];           // Save low byte
     8e0:	d3 01       	movw	r26, r6
     8e2:	8c 91       	ld	r24, X
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	f8 01       	movw	r30, r16
     8e8:	ee 0f       	add	r30, r30
     8ea:	ff 1f       	adc	r31, r31
     8ec:	ec 0d       	add	r30, r12
     8ee:	fd 1d       	adc	r31, r13
     8f0:	91 83       	std	Z+1, r25	; 0x01
     8f2:	80 83       	st	Z, r24
        read_LSM6DS3(OUTY_H_G, rd_buf);             // Read high byte
     8f4:	b3 01       	movw	r22, r6
     8f6:	85 e2       	ldi	r24, 0x25	; 37
     8f8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     8fc:	ef e9       	ldi	r30, 0x9F	; 159
     8fe:	ff e0       	ldi	r31, 0x0F	; 15
     900:	31 97       	sbiw	r30, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <__stack+0x1>
     904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x7>
     906:	00 00       	nop
        _delay_ms(2);
        Y_G[cnt%WINDOW_SIZE] |= (rd_buf[0]<<8);     // Concatenate high and low bytes
     908:	f8 01       	movw	r30, r16
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	25 e1       	ldi	r18, 0x15	; 21
     910:	35 e0       	ldi	r19, 0x05	; 5
     912:	2c 0f       	add	r18, r28
     914:	3d 1f       	adc	r19, r29
     916:	e2 0f       	add	r30, r18
     918:	f3 1f       	adc	r31, r19
     91a:	80 81       	ld	r24, Z
     91c:	91 81       	ldd	r25, Z+1	; 0x01
     91e:	d3 01       	movw	r26, r6
     920:	2c 91       	ld	r18, X
     922:	92 2b       	or	r25, r18
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	80 83       	st	Z, r24

        // Read Z axis of gyroscope
        read_LSM6DS3(OUTZ_L_G, rd_buf);             // Read low byte
     928:	b3 01       	movw	r22, r6
     92a:	86 e2       	ldi	r24, 0x26	; 38
     92c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     930:	ef e9       	ldi	r30, 0x9F	; 159
     932:	ff e0       	ldi	r31, 0x0F	; 15
     934:	31 97       	sbiw	r30, 0x01	; 1
     936:	f1 f7       	brne	.-4      	; 0x934 <__stack+0x35>
     938:	00 c0       	rjmp	.+0      	; 0x93a <__stack+0x3b>
     93a:	00 00       	nop
        _delay_ms(2);
        Z_G[cnt%WINDOW_SIZE] = rd_buf[0];           // Save low byte
     93c:	d3 01       	movw	r26, r6
     93e:	8c 91       	ld	r24, X
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	f8 01       	movw	r30, r16
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	c7 5b       	subi	r28, 0xB7	; 183
     94a:	d8 4f       	sbci	r29, 0xF8	; 248
     94c:	28 81       	ld	r18, Y
     94e:	39 81       	ldd	r19, Y+1	; 0x01
     950:	c9 54       	subi	r28, 0x49	; 73
     952:	d7 40       	sbci	r29, 0x07	; 7
     954:	e2 0f       	add	r30, r18
     956:	f3 1f       	adc	r31, r19
     958:	91 83       	std	Z+1, r25	; 0x01
     95a:	80 83       	st	Z, r24
        read_LSM6DS3(OUTZ_H_G, rd_buf);             // Read high byte
     95c:	b3 01       	movw	r22, r6
     95e:	87 e2       	ldi	r24, 0x27	; 39
     960:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_LSM6DS3>
     964:	8f e9       	ldi	r24, 0x9F	; 159
     966:	9f e0       	ldi	r25, 0x0F	; 15
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <__stack+0x69>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <__stack+0x6f>
     96e:	00 00       	nop
        _delay_ms(2);
        Z_G[cnt%WINDOW_SIZE] |= (rd_buf[0]<<8);     // Concatenate high and low bytes
     970:	de 01       	movw	r26, r28
     972:	af 54       	subi	r26, 0x4F	; 79
     974:	bb 4f       	sbci	r27, 0xFB	; 251
     976:	c7 5b       	subi	r28, 0xB7	; 183
     978:	d8 4f       	sbci	r29, 0xF8	; 248
     97a:	b9 83       	std	Y+1, r27	; 0x01
     97c:	a8 83       	st	Y, r26
     97e:	c9 54       	subi	r28, 0x49	; 73
     980:	d7 40       	sbci	r29, 0x07	; 7
     982:	18 01       	movw	r2, r16
     984:	22 0c       	add	r2, r2
     986:	33 1c       	adc	r3, r3
     988:	fd 01       	movw	r30, r26
     98a:	e2 0d       	add	r30, r2
     98c:	f3 1d       	adc	r31, r3
     98e:	c7 5c       	subi	r28, 0xC7	; 199
     990:	d8 4f       	sbci	r29, 0xF8	; 248
     992:	f9 83       	std	Y+1, r31	; 0x01
     994:	e8 83       	st	Y, r30
     996:	c9 53       	subi	r28, 0x39	; 57
     998:	d7 40       	sbci	r29, 0x07	; 7
     99a:	80 81       	ld	r24, Z
     99c:	91 81       	ldd	r25, Z+1	; 0x01
     99e:	cd 5b       	subi	r28, 0xBD	; 189
     9a0:	d8 4f       	sbci	r29, 0xF8	; 248
     9a2:	79 82       	std	Y+1, r7	; 0x01
     9a4:	68 82       	st	Y, r6
     9a6:	c3 54       	subi	r28, 0x43	; 67
     9a8:	d7 40       	sbci	r29, 0x07	; 7
     9aa:	d3 01       	movw	r26, r6
     9ac:	2c 91       	ld	r18, X
     9ae:	92 2b       	or	r25, r18
     9b0:	91 83       	std	Z+1, r25	; 0x01
     9b2:	80 83       	st	Z, r24
     9b4:	72 01       	movw	r14, r4
     9b6:	b1 e0       	ldi	r27, 0x01	; 1
     9b8:	eb 1a       	sub	r14, r27
     9ba:	f1 08       	sbc	r15, r1


        // Get change in acceleration 
        diff_X_XL[cnt%WINDOW_SIZE] = (X_XL[(cnt-1)%WINDOW_SIZE] -  X_XL[cnt%WINDOW_SIZE]) * ACCEL_RANGE / pow(2,6);
     9bc:	97 01       	movw	r18, r14
     9be:	36 95       	lsr	r19
     9c0:	27 95       	ror	r18
     9c2:	ab e7       	ldi	r26, 0x7B	; 123
     9c4:	b4 e1       	ldi	r27, 0x14	; 20
     9c6:	0e 94 de 07 	call	0xfbc	; 0xfbc <__umulhisi3>
     9ca:	96 95       	lsr	r25
     9cc:	87 95       	ror	r24
     9ce:	e2 e3       	ldi	r30, 0x32	; 50
     9d0:	e8 9f       	mul	r30, r24
     9d2:	90 01       	movw	r18, r0
     9d4:	e9 9f       	mul	r30, r25
     9d6:	30 0d       	add	r19, r0
     9d8:	11 24       	eor	r1, r1
     9da:	e2 1a       	sub	r14, r18
     9dc:	f3 0a       	sbc	r15, r19
     9de:	9e 01       	movw	r18, r28
     9e0:	2b 55       	subi	r18, 0x5B	; 91
     9e2:	39 4f       	sbci	r19, 0xF9	; 249
     9e4:	c9 5b       	subi	r28, 0xB9	; 185
     9e6:	d8 4f       	sbci	r29, 0xF8	; 248
     9e8:	39 83       	std	Y+1, r19	; 0x01
     9ea:	28 83       	st	Y, r18
     9ec:	c7 54       	subi	r28, 0x47	; 71
     9ee:	d7 40       	sbci	r29, 0x07	; 7
     9f0:	ee 0c       	add	r14, r14
     9f2:	ff 1c       	adc	r15, r15
     9f4:	f9 01       	movw	r30, r18
     9f6:	ee 0d       	add	r30, r14
     9f8:	ff 1d       	adc	r31, r15
     9fa:	60 81       	ld	r22, Z
     9fc:	71 81       	ldd	r23, Z+1	; 0x01
     9fe:	69 01       	movw	r12, r18
     a00:	c2 0c       	add	r12, r2
     a02:	d3 1c       	adc	r13, r3
     a04:	d6 01       	movw	r26, r12
     a06:	8d 91       	ld	r24, X+
     a08:	9c 91       	ld	r25, X
     a0a:	68 1b       	sub	r22, r24
     a0c:	79 0b       	sbc	r23, r25
     a0e:	66 0f       	add	r22, r22
     a10:	77 1f       	adc	r23, r23
     a12:	66 0f       	add	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	66 0f       	add	r22, r22
     a18:	77 1f       	adc	r23, r23
     a1a:	88 27       	eor	r24, r24
     a1c:	77 fd       	sbrc	r23, 7
     a1e:	80 95       	com	r24
     a20:	98 2f       	mov	r25, r24
     a22:	0e 94 29 09 	call	0x1252	; 0x1252 <__floatsisf>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e8       	ldi	r20, 0x80	; 128
     a2c:	5c e3       	ldi	r21, 0x3C	; 60
     a2e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     a32:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fixsfsi>
     a36:	ed e4       	ldi	r30, 0x4D	; 77
     a38:	f4 e0       	ldi	r31, 0x04	; 4
     a3a:	ec 0f       	add	r30, r28
     a3c:	fd 1f       	adc	r31, r29
     a3e:	e2 0d       	add	r30, r2
     a40:	f3 1d       	adc	r31, r3
     a42:	71 83       	std	Z+1, r23	; 0x01
     a44:	60 83       	st	Z, r22
        diff_Y_XL[cnt%WINDOW_SIZE] = (Y_XL[(cnt-1)%WINDOW_SIZE] -  Y_XL[cnt%WINDOW_SIZE]) * ACCEL_RANGE / pow(2,6);
     a46:	fe 01       	movw	r30, r28
     a48:	ef 5b       	subi	r30, 0xBF	; 191
     a4a:	f9 4f       	sbci	r31, 0xF9	; 249
     a4c:	cf 5b       	subi	r28, 0xBF	; 191
     a4e:	d8 4f       	sbci	r29, 0xF8	; 248
     a50:	f9 83       	std	Y+1, r31	; 0x01
     a52:	e8 83       	st	Y, r30
     a54:	c1 54       	subi	r28, 0x41	; 65
     a56:	d7 40       	sbci	r29, 0x07	; 7
     a58:	e1 e4       	ldi	r30, 0x41	; 65
     a5a:	f6 e0       	ldi	r31, 0x06	; 6
     a5c:	ec 0f       	add	r30, r28
     a5e:	fd 1f       	adc	r31, r29
     a60:	ee 0d       	add	r30, r14
     a62:	ff 1d       	adc	r31, r15
     a64:	60 81       	ld	r22, Z
     a66:	71 81       	ldd	r23, Z+1	; 0x01
     a68:	f1 e4       	ldi	r31, 0x41	; 65
     a6a:	af 2e       	mov	r10, r31
     a6c:	f6 e0       	ldi	r31, 0x06	; 6
     a6e:	bf 2e       	mov	r11, r31
     a70:	ac 0e       	add	r10, r28
     a72:	bd 1e       	adc	r11, r29
     a74:	a2 0c       	add	r10, r2
     a76:	b3 1c       	adc	r11, r3
     a78:	d5 01       	movw	r26, r10
     a7a:	8d 91       	ld	r24, X+
     a7c:	9c 91       	ld	r25, X
     a7e:	68 1b       	sub	r22, r24
     a80:	79 0b       	sbc	r23, r25
     a82:	66 0f       	add	r22, r22
     a84:	77 1f       	adc	r23, r23
     a86:	66 0f       	add	r22, r22
     a88:	77 1f       	adc	r23, r23
     a8a:	66 0f       	add	r22, r22
     a8c:	77 1f       	adc	r23, r23
     a8e:	88 27       	eor	r24, r24
     a90:	77 fd       	sbrc	r23, 7
     a92:	80 95       	com	r24
     a94:	98 2f       	mov	r25, r24
     a96:	0e 94 29 09 	call	0x1252	; 0x1252 <__floatsisf>
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e8       	ldi	r20, 0x80	; 128
     aa0:	5c e3       	ldi	r21, 0x3C	; 60
     aa2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     aa6:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fixsfsi>
     aaa:	e9 ee       	ldi	r30, 0xE9	; 233
     aac:	f3 e0       	ldi	r31, 0x03	; 3
     aae:	ec 0f       	add	r30, r28
     ab0:	fd 1f       	adc	r31, r29
     ab2:	e2 0d       	add	r30, r2
     ab4:	f3 1d       	adc	r31, r3
     ab6:	71 83       	std	Z+1, r23	; 0x01
     ab8:	60 83       	st	Z, r22
        diff_Z_XL[cnt%WINDOW_SIZE] = (Z_XL[(cnt-1)%WINDOW_SIZE] -  Z_XL[cnt%WINDOW_SIZE]) * ACCEL_RANGE / pow(2,6);		
     aba:	fe 01       	movw	r30, r28
     abc:	e3 52       	subi	r30, 0x23	; 35
     abe:	fa 4f       	sbci	r31, 0xFA	; 250
     ac0:	cb 5b       	subi	r28, 0xBB	; 187
     ac2:	d8 4f       	sbci	r29, 0xF8	; 248
     ac4:	f9 83       	std	Y+1, r31	; 0x01
     ac6:	e8 83       	st	Y, r30
     ac8:	c5 54       	subi	r28, 0x45	; 69
     aca:	d7 40       	sbci	r29, 0x07	; 7
     acc:	ed ed       	ldi	r30, 0xDD	; 221
     ace:	f5 e0       	ldi	r31, 0x05	; 5
     ad0:	ec 0f       	add	r30, r28
     ad2:	fd 1f       	adc	r31, r29
     ad4:	ee 0d       	add	r30, r14
     ad6:	ff 1d       	adc	r31, r15
     ad8:	60 81       	ld	r22, Z
     ada:	71 81       	ldd	r23, Z+1	; 0x01
     adc:	bd ed       	ldi	r27, 0xDD	; 221
     ade:	8b 2e       	mov	r8, r27
     ae0:	b5 e0       	ldi	r27, 0x05	; 5
     ae2:	9b 2e       	mov	r9, r27
     ae4:	8c 0e       	add	r8, r28
     ae6:	9d 1e       	adc	r9, r29
     ae8:	82 0c       	add	r8, r2
     aea:	93 1c       	adc	r9, r3
     aec:	d4 01       	movw	r26, r8
     aee:	8d 91       	ld	r24, X+
     af0:	9c 91       	ld	r25, X
     af2:	68 1b       	sub	r22, r24
     af4:	79 0b       	sbc	r23, r25
     af6:	66 0f       	add	r22, r22
     af8:	77 1f       	adc	r23, r23
     afa:	66 0f       	add	r22, r22
     afc:	77 1f       	adc	r23, r23
     afe:	66 0f       	add	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	88 27       	eor	r24, r24
     b04:	77 fd       	sbrc	r23, 7
     b06:	80 95       	com	r24
     b08:	98 2f       	mov	r25, r24
     b0a:	0e 94 29 09 	call	0x1252	; 0x1252 <__floatsisf>
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	40 e8       	ldi	r20, 0x80	; 128
     b14:	5c e3       	ldi	r21, 0x3C	; 60
     b16:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     b1a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fixsfsi>
     b1e:	e5 e8       	ldi	r30, 0x85	; 133
     b20:	f3 e0       	ldi	r31, 0x03	; 3
     b22:	ec 0f       	add	r30, r28
     b24:	fd 1f       	adc	r31, r29
     b26:	e2 0d       	add	r30, r2
     b28:	f3 1d       	adc	r31, r3
     b2a:	71 83       	std	Z+1, r23	; 0x01
     b2c:	60 83       	st	Z, r22

        // Calculate current acceleration
        x_accel[cnt%WINDOW_SIZE] = X_XL[cnt%WINDOW_SIZE] * ACCEL_RANGE / pow(2,15);
     b2e:	f6 01       	movw	r30, r12
     b30:	60 81       	ld	r22, Z
     b32:	71 81       	ldd	r23, Z+1	; 0x01
     b34:	66 0f       	add	r22, r22
     b36:	77 1f       	adc	r23, r23
     b38:	66 0f       	add	r22, r22
     b3a:	77 1f       	adc	r23, r23
     b3c:	66 0f       	add	r22, r22
     b3e:	77 1f       	adc	r23, r23
     b40:	88 27       	eor	r24, r24
     b42:	77 fd       	sbrc	r23, 7
     b44:	80 95       	com	r24
     b46:	98 2f       	mov	r25, r24
     b48:	0e 94 29 09 	call	0x1252	; 0x1252 <__floatsisf>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	58 e3       	ldi	r21, 0x38	; 56
     b54:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     b58:	78 01       	movw	r14, r16
     b5a:	ee 0c       	add	r14, r14
     b5c:	ff 1c       	adc	r15, r15
     b5e:	ee 0c       	add	r14, r14
     b60:	ff 1c       	adc	r15, r15
     b62:	21 e9       	ldi	r18, 0x91	; 145
     b64:	31 e0       	ldi	r19, 0x01	; 1
     b66:	2c 0f       	add	r18, r28
     b68:	3d 1f       	adc	r19, r29
     b6a:	2e 0d       	add	r18, r14
     b6c:	3f 1d       	adc	r19, r15
     b6e:	cb 5c       	subi	r28, 0xCB	; 203
     b70:	d8 4f       	sbci	r29, 0xF8	; 248
     b72:	39 83       	std	Y+1, r19	; 0x01
     b74:	28 83       	st	Y, r18
     b76:	c5 53       	subi	r28, 0x35	; 53
     b78:	d7 40       	sbci	r29, 0x07	; 7
     b7a:	d9 01       	movw	r26, r18
     b7c:	6d 93       	st	X+, r22
     b7e:	7d 93       	st	X+, r23
     b80:	8d 93       	st	X+, r24
     b82:	9c 93       	st	X, r25
     b84:	13 97       	sbiw	r26, 0x03	; 3
        y_accel[cnt%WINDOW_SIZE] = Y_XL[cnt%WINDOW_SIZE] * ACCEL_RANGE / pow(2,15);
     b86:	f5 01       	movw	r30, r10
     b88:	60 81       	ld	r22, Z
     b8a:	71 81       	ldd	r23, Z+1	; 0x01
     b8c:	66 0f       	add	r22, r22
     b8e:	77 1f       	adc	r23, r23
     b90:	66 0f       	add	r22, r22
     b92:	77 1f       	adc	r23, r23
     b94:	66 0f       	add	r22, r22
     b96:	77 1f       	adc	r23, r23
     b98:	88 27       	eor	r24, r24
     b9a:	77 fd       	sbrc	r23, 7
     b9c:	80 95       	com	r24
     b9e:	98 2f       	mov	r25, r24
     ba0:	0e 94 29 09 	call	0x1252	; 0x1252 <__floatsisf>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	58 e3       	ldi	r21, 0x38	; 56
     bac:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     bb0:	29 ec       	ldi	r18, 0xC9	; 201
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	2c 0f       	add	r18, r28
     bb6:	3d 1f       	adc	r19, r29
     bb8:	2e 0d       	add	r18, r14
     bba:	3f 1d       	adc	r19, r15
     bbc:	c5 5c       	subi	r28, 0xC5	; 197
     bbe:	d8 4f       	sbci	r29, 0xF8	; 248
     bc0:	39 83       	std	Y+1, r19	; 0x01
     bc2:	28 83       	st	Y, r18
     bc4:	cb 53       	subi	r28, 0x3B	; 59
     bc6:	d7 40       	sbci	r29, 0x07	; 7
     bc8:	d9 01       	movw	r26, r18
     bca:	6d 93       	st	X+, r22
     bcc:	7d 93       	st	X+, r23
     bce:	8d 93       	st	X+, r24
     bd0:	9c 93       	st	X, r25
     bd2:	13 97       	sbiw	r26, 0x03	; 3
        z_accel[cnt%WINDOW_SIZE] = Z_XL[cnt%WINDOW_SIZE] * ACCEL_RANGE / pow(2,15);
     bd4:	f4 01       	movw	r30, r8
     bd6:	60 81       	ld	r22, Z
     bd8:	71 81       	ldd	r23, Z+1	; 0x01
     bda:	66 0f       	add	r22, r22
     bdc:	77 1f       	adc	r23, r23
     bde:	66 0f       	add	r22, r22
     be0:	77 1f       	adc	r23, r23
     be2:	66 0f       	add	r22, r22
     be4:	77 1f       	adc	r23, r23
     be6:	88 27       	eor	r24, r24
     be8:	77 fd       	sbrc	r23, 7
     bea:	80 95       	com	r24
     bec:	98 2f       	mov	r25, r24
     bee:	0e 94 29 09 	call	0x1252	; 0x1252 <__floatsisf>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	58 e3       	ldi	r21, 0x38	; 56
     bfa:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     bfe:	21 e0       	ldi	r18, 0x01	; 1
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	2c 0f       	add	r18, r28
     c04:	3d 1f       	adc	r19, r29
     c06:	2e 0d       	add	r18, r14
     c08:	3f 1d       	adc	r19, r15
     c0a:	c3 5c       	subi	r28, 0xC3	; 195
     c0c:	d8 4f       	sbci	r29, 0xF8	; 248
     c0e:	39 83       	std	Y+1, r19	; 0x01
     c10:	28 83       	st	Y, r18
     c12:	cd 53       	subi	r28, 0x3D	; 61
     c14:	d7 40       	sbci	r29, 0x07	; 7
     c16:	d9 01       	movw	r26, r18
     c18:	6d 93       	st	X+, r22
     c1a:	7d 93       	st	X+, r23
     c1c:	8d 93       	st	X+, r24
     c1e:	9c 93       	st	X, r25
     c20:	13 97       	sbiw	r26, 0x03	; 3

        pitch = (int16_t)(atan(x_accel[cnt%WINDOW_SIZE] / sqrt(pow(y_accel[cnt%WINDOW_SIZE],2) + pow(z_accel[cnt%WINDOW_SIZE],2))) * 180 / M_PI);
     c22:	cb 5c       	subi	r28, 0xCB	; 203
     c24:	d8 4f       	sbci	r29, 0xF8	; 248
     c26:	e8 81       	ld	r30, Y
     c28:	f9 81       	ldd	r31, Y+1	; 0x01
     c2a:	c5 53       	subi	r28, 0x35	; 53
     c2c:	d7 40       	sbci	r29, 0x07	; 7
     c2e:	80 80       	ld	r8, Z
     c30:	91 80       	ldd	r9, Z+1	; 0x01
     c32:	a2 80       	ldd	r10, Z+2	; 0x02
     c34:	b3 80       	ldd	r11, Z+3	; 0x03
     c36:	c5 5c       	subi	r28, 0xC5	; 197
     c38:	d8 4f       	sbci	r29, 0xF8	; 248
     c3a:	a8 81       	ld	r26, Y
     c3c:	b9 81       	ldd	r27, Y+1	; 0x01
     c3e:	cb 53       	subi	r28, 0x3B	; 59
     c40:	d7 40       	sbci	r29, 0x07	; 7
     c42:	cd 90       	ld	r12, X+
     c44:	dd 90       	ld	r13, X+
     c46:	ed 90       	ld	r14, X+
     c48:	fc 90       	ld	r15, X
     c4a:	f9 01       	movw	r30, r18
     c4c:	60 81       	ld	r22, Z
     c4e:	71 81       	ldd	r23, Z+1	; 0x01
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	9b 01       	movw	r18, r22
     c56:	ac 01       	movw	r20, r24
     c58:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     c5c:	c5 5b       	subi	r28, 0xB5	; 181
     c5e:	d8 4f       	sbci	r29, 0xF8	; 248
     c60:	68 83       	st	Y, r22
     c62:	79 83       	std	Y+1, r23	; 0x01
     c64:	8a 83       	std	Y+2, r24	; 0x02
     c66:	9b 83       	std	Y+3, r25	; 0x03
     c68:	cb 54       	subi	r28, 0x4B	; 75
     c6a:	d7 40       	sbci	r29, 0x07	; 7
     c6c:	a7 01       	movw	r20, r14
     c6e:	96 01       	movw	r18, r12
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	c5 5b       	subi	r28, 0xB5	; 181
     c7e:	d8 4f       	sbci	r29, 0xF8	; 248
     c80:	68 81       	ld	r22, Y
     c82:	79 81       	ldd	r23, Y+1	; 0x01
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	9b 81       	ldd	r25, Y+3	; 0x03
     c88:	cb 54       	subi	r28, 0x4B	; 75
     c8a:	d7 40       	sbci	r29, 0x07	; 7
     c8c:	0e 94 02 08 	call	0x1004	; 0x1004 <__addsf3>
     c90:	0e 94 48 0a 	call	0x1490	; 0x1490 <sqrt>
     c94:	9b 01       	movw	r18, r22
     c96:	ac 01       	movw	r20, r24
     c98:	c5 01       	movw	r24, r10
     c9a:	b4 01       	movw	r22, r8
     c9c:	0e 94 8e 08 	call	0x111c	; 0x111c <__divsf3>
     ca0:	0e 94 66 08 	call	0x10cc	; 0x10cc <atan>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	44 e3       	ldi	r20, 0x34	; 52
     caa:	53 e4       	ldi	r21, 0x43	; 67
     cac:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     cb0:	2b ed       	ldi	r18, 0xDB	; 219
     cb2:	3f e0       	ldi	r19, 0x0F	; 15
     cb4:	49 e4       	ldi	r20, 0x49	; 73
     cb6:	50 e4       	ldi	r21, 0x40	; 64
     cb8:	0e 94 8e 08 	call	0x111c	; 0x111c <__divsf3>
     cbc:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fixsfsi>
     cc0:	c7 5d       	subi	r28, 0xD7	; 215
     cc2:	d8 4f       	sbci	r29, 0xF8	; 248
     cc4:	79 83       	std	Y+1, r23	; 0x01
     cc6:	68 83       	st	Y, r22
     cc8:	c9 52       	subi	r28, 0x29	; 41
     cca:	d7 40       	sbci	r29, 0x07	; 7
        roll = (int16_t)(atan( y_accel[cnt%WINDOW_SIZE] / sqrt(pow(x_accel[cnt%WINDOW_SIZE],2) + pow(z_accel[cnt%WINDOW_SIZE],2))) * 180 / M_PI);
     ccc:	c5 5c       	subi	r28, 0xC5	; 197
     cce:	d8 4f       	sbci	r29, 0xF8	; 248
     cd0:	a8 81       	ld	r26, Y
     cd2:	b9 81       	ldd	r27, Y+1	; 0x01
     cd4:	cb 53       	subi	r28, 0x3B	; 59
     cd6:	d7 40       	sbci	r29, 0x07	; 7
     cd8:	8d 90       	ld	r8, X+
     cda:	9d 90       	ld	r9, X+
     cdc:	ad 90       	ld	r10, X+
     cde:	bc 90       	ld	r11, X
     ce0:	cb 5c       	subi	r28, 0xCB	; 203
     ce2:	d8 4f       	sbci	r29, 0xF8	; 248
     ce4:	e8 81       	ld	r30, Y
     ce6:	f9 81       	ldd	r31, Y+1	; 0x01
     ce8:	c5 53       	subi	r28, 0x35	; 53
     cea:	d7 40       	sbci	r29, 0x07	; 7
     cec:	60 81       	ld	r22, Z
     cee:	71 81       	ldd	r23, Z+1	; 0x01
     cf0:	82 81       	ldd	r24, Z+2	; 0x02
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	c3 5c       	subi	r28, 0xC3	; 195
     cf6:	d8 4f       	sbci	r29, 0xF8	; 248
     cf8:	a8 81       	ld	r26, Y
     cfa:	b9 81       	ldd	r27, Y+1	; 0x01
     cfc:	cd 53       	subi	r28, 0x3D	; 61
     cfe:	d7 40       	sbci	r29, 0x07	; 7
     d00:	cd 90       	ld	r12, X+
     d02:	dd 90       	ld	r13, X+
     d04:	ed 90       	ld	r14, X+
     d06:	fc 90       	ld	r15, X
     d08:	9b 01       	movw	r18, r22
     d0a:	ac 01       	movw	r20, r24
     d0c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     d10:	cb 5c       	subi	r28, 0xCB	; 203
     d12:	d8 4f       	sbci	r29, 0xF8	; 248
     d14:	68 83       	st	Y, r22
     d16:	79 83       	std	Y+1, r23	; 0x01
     d18:	8a 83       	std	Y+2, r24	; 0x02
     d1a:	9b 83       	std	Y+3, r25	; 0x03
     d1c:	c5 53       	subi	r28, 0x35	; 53
     d1e:	d7 40       	sbci	r29, 0x07	; 7
     d20:	a7 01       	movw	r20, r14
     d22:	96 01       	movw	r18, r12
     d24:	c7 01       	movw	r24, r14
     d26:	b6 01       	movw	r22, r12
     d28:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     d2c:	9b 01       	movw	r18, r22
     d2e:	ac 01       	movw	r20, r24
     d30:	cb 5c       	subi	r28, 0xCB	; 203
     d32:	d8 4f       	sbci	r29, 0xF8	; 248
     d34:	68 81       	ld	r22, Y
     d36:	79 81       	ldd	r23, Y+1	; 0x01
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	c5 53       	subi	r28, 0x35	; 53
     d3e:	d7 40       	sbci	r29, 0x07	; 7
     d40:	0e 94 02 08 	call	0x1004	; 0x1004 <__addsf3>
     d44:	0e 94 48 0a 	call	0x1490	; 0x1490 <sqrt>
     d48:	9b 01       	movw	r18, r22
     d4a:	ac 01       	movw	r20, r24
     d4c:	c5 01       	movw	r24, r10
     d4e:	b4 01       	movw	r22, r8
     d50:	0e 94 8e 08 	call	0x111c	; 0x111c <__divsf3>
     d54:	0e 94 66 08 	call	0x10cc	; 0x10cc <atan>
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	44 e3       	ldi	r20, 0x34	; 52
     d5e:	53 e4       	ldi	r21, 0x43	; 67
     d60:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     d64:	2b ed       	ldi	r18, 0xDB	; 219
     d66:	3f e0       	ldi	r19, 0x0F	; 15
     d68:	49 e4       	ldi	r20, 0x49	; 73
     d6a:	50 e4       	ldi	r21, 0x40	; 64
     d6c:	0e 94 8e 08 	call	0x111c	; 0x111c <__divsf3>
     d70:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fixsfsi>
     d74:	c5 5d       	subi	r28, 0xD5	; 213
     d76:	d8 4f       	sbci	r29, 0xF8	; 248
     d78:	79 83       	std	Y+1, r23	; 0x01
     d7a:	68 83       	st	Y, r22
     d7c:	cb 52       	subi	r28, 0x2B	; 43
     d7e:	d7 40       	sbci	r29, 0x07	; 7
        
        // Calculate current angular rate
        x_gyro[cnt%WINDOW_SIZE] = (X_G[cnt%WINDOW_SIZE] / pow(2,15)) * GYRO_RANGE;
     d80:	fe 01       	movw	r30, r28
     d82:	e7 58       	subi	r30, 0x87	; 135
     d84:	fa 4f       	sbci	r31, 0xFA	; 250
     d86:	7f 01       	movw	r14, r30
     d88:	e2 0d       	add	r30, r2
     d8a:	f3 1d       	adc	r31, r3
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	88 27       	eor	r24, r24
     d92:	77 fd       	sbrc	r23, 7
     d94:	80 95       	com	r24
     d96:	98 2f       	mov	r25, r24
     d98:	0e 94 29 09 	call	0x1252	; 0x1252 <__floatsisf>
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	58 e3       	ldi	r21, 0x38	; 56
     da4:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	4a e7       	ldi	r20, 0x7A	; 122
     dae:	54 e4       	ldi	r21, 0x44	; 68
     db0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     db4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fixsfsi>
     db8:	e1 e2       	ldi	r30, 0x21	; 33
     dba:	f3 e0       	ldi	r31, 0x03	; 3
     dbc:	ec 0f       	add	r30, r28
     dbe:	fd 1f       	adc	r31, r29
     dc0:	e2 0d       	add	r30, r2
     dc2:	f3 1d       	adc	r31, r3
     dc4:	71 83       	std	Z+1, r23	; 0x01
     dc6:	60 83       	st	Z, r22
        y_gyro[cnt%WINDOW_SIZE] = (Y_G[cnt%WINDOW_SIZE] / pow(2,15)) * GYRO_RANGE;
     dc8:	9e 01       	movw	r18, r28
     dca:	2b 5e       	subi	r18, 0xEB	; 235
     dcc:	3a 4f       	sbci	r19, 0xFA	; 250
     dce:	69 01       	movw	r12, r18
     dd0:	f9 01       	movw	r30, r18
     dd2:	e2 0d       	add	r30, r2
     dd4:	f3 1d       	adc	r31, r3
     dd6:	60 81       	ld	r22, Z
     dd8:	71 81       	ldd	r23, Z+1	; 0x01
     dda:	88 27       	eor	r24, r24
     ddc:	77 fd       	sbrc	r23, 7
     dde:	80 95       	com	r24
     de0:	98 2f       	mov	r25, r24
     de2:	0e 94 29 09 	call	0x1252	; 0x1252 <__floatsisf>
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	58 e3       	ldi	r21, 0x38	; 56
     dee:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	4a e7       	ldi	r20, 0x7A	; 122
     df8:	54 e4       	ldi	r21, 0x44	; 68
     dfa:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     dfe:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fixsfsi>
     e02:	ed eb       	ldi	r30, 0xBD	; 189
     e04:	f2 e0       	ldi	r31, 0x02	; 2
     e06:	ec 0f       	add	r30, r28
     e08:	fd 1f       	adc	r31, r29
     e0a:	e2 0d       	add	r30, r2
     e0c:	f3 1d       	adc	r31, r3
     e0e:	71 83       	std	Z+1, r23	; 0x01
     e10:	60 83       	st	Z, r22
        z_gyro[cnt%WINDOW_SIZE] = (Z_G[cnt%WINDOW_SIZE] / pow(2,15)) * GYRO_RANGE;		
     e12:	c7 5c       	subi	r28, 0xC7	; 199
     e14:	d8 4f       	sbci	r29, 0xF8	; 248
     e16:	a8 81       	ld	r26, Y
     e18:	b9 81       	ldd	r27, Y+1	; 0x01
     e1a:	c9 53       	subi	r28, 0x39	; 57
     e1c:	d7 40       	sbci	r29, 0x07	; 7
     e1e:	6d 91       	ld	r22, X+
     e20:	7c 91       	ld	r23, X
     e22:	88 27       	eor	r24, r24
     e24:	77 fd       	sbrc	r23, 7
     e26:	80 95       	com	r24
     e28:	98 2f       	mov	r25, r24
     e2a:	0e 94 29 09 	call	0x1252	; 0x1252 <__floatsisf>
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	58 e3       	ldi	r21, 0x38	; 56
     e36:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	4a e7       	ldi	r20, 0x7A	; 122
     e40:	54 e4       	ldi	r21, 0x44	; 68
     e42:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     e46:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fixsfsi>
     e4a:	e9 e5       	ldi	r30, 0x59	; 89
     e4c:	f2 e0       	ldi	r31, 0x02	; 2
     e4e:	ec 0f       	add	r30, r28
     e50:	fd 1f       	adc	r31, r29
     e52:	e2 0d       	add	r30, r2
     e54:	f3 1d       	adc	r31, r3
     e56:	71 83       	std	Z+1, r23	; 0x01
     e58:	60 83       	st	Z, r22

        // Clear last average
        avg_diff_X_XL = 0;
     e5a:	cf 5c       	subi	r28, 0xCF	; 207
     e5c:	d8 4f       	sbci	r29, 0xF8	; 248
     e5e:	19 82       	std	Y+1, r1	; 0x01
     e60:	18 82       	st	Y, r1
     e62:	c1 53       	subi	r28, 0x31	; 49
     e64:	d7 40       	sbci	r29, 0x07	; 7
        avg_diff_Y_XL = 0;
     e66:	c1 5d       	subi	r28, 0xD1	; 209
     e68:	d8 4f       	sbci	r29, 0xF8	; 248
     e6a:	19 82       	std	Y+1, r1	; 0x01
     e6c:	18 82       	st	Y, r1
     e6e:	cf 52       	subi	r28, 0x2F	; 47
     e70:	d7 40       	sbci	r29, 0x07	; 7
        avg_diff_Z_XL = 0;
     e72:	c3 5d       	subi	r28, 0xD3	; 211
     e74:	d8 4f       	sbci	r29, 0xF8	; 248
     e76:	19 82       	std	Y+1, r1	; 0x01
     e78:	18 82       	st	Y, r1
     e7a:	cd 52       	subi	r28, 0x2D	; 45
     e7c:	d7 40       	sbci	r29, 0x07	; 7
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	c8 01       	movw	r24, r16
     e8e:	82 1b       	sub	r24, r18
     e90:	93 0b       	sbc	r25, r19

        // Get sum of last NUM_AVGS accelerations
        for(i = 0; i < NUM_AVGS; i++){

            avg_diff_X_XL += diff_X_XL[(cnt%WINDOW_SIZE) - i];
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	ed e4       	ldi	r30, 0x4D	; 77
     e98:	f4 e0       	ldi	r31, 0x04	; 4
     e9a:	ec 0f       	add	r30, r28
     e9c:	fd 1f       	adc	r31, r29
     e9e:	e8 0f       	add	r30, r24
     ea0:	f9 1f       	adc	r31, r25
     ea2:	40 81       	ld	r20, Z
     ea4:	51 81       	ldd	r21, Z+1	; 0x01
     ea6:	cf 5c       	subi	r28, 0xCF	; 207
     ea8:	d8 4f       	sbci	r29, 0xF8	; 248
     eaa:	68 81       	ld	r22, Y
     eac:	79 81       	ldd	r23, Y+1	; 0x01
     eae:	c1 53       	subi	r28, 0x31	; 49
     eb0:	d7 40       	sbci	r29, 0x07	; 7
     eb2:	46 0f       	add	r20, r22
     eb4:	57 1f       	adc	r21, r23
     eb6:	cf 5c       	subi	r28, 0xCF	; 207
     eb8:	d8 4f       	sbci	r29, 0xF8	; 248
     eba:	59 83       	std	Y+1, r21	; 0x01
     ebc:	48 83       	st	Y, r20
     ebe:	c1 53       	subi	r28, 0x31	; 49
     ec0:	d7 40       	sbci	r29, 0x07	; 7
            avg_diff_Y_XL += diff_Y_XL[(cnt%WINDOW_SIZE) - i];
     ec2:	e9 ee       	ldi	r30, 0xE9	; 233
     ec4:	f3 e0       	ldi	r31, 0x03	; 3
     ec6:	ec 0f       	add	r30, r28
     ec8:	fd 1f       	adc	r31, r29
     eca:	e8 0f       	add	r30, r24
     ecc:	f9 1f       	adc	r31, r25
     ece:	40 81       	ld	r20, Z
     ed0:	51 81       	ldd	r21, Z+1	; 0x01
     ed2:	c1 5d       	subi	r28, 0xD1	; 209
     ed4:	d8 4f       	sbci	r29, 0xF8	; 248
     ed6:	68 81       	ld	r22, Y
     ed8:	79 81       	ldd	r23, Y+1	; 0x01
     eda:	cf 52       	subi	r28, 0x2F	; 47
     edc:	d7 40       	sbci	r29, 0x07	; 7
     ede:	46 0f       	add	r20, r22
     ee0:	57 1f       	adc	r21, r23
     ee2:	c1 5d       	subi	r28, 0xD1	; 209
     ee4:	d8 4f       	sbci	r29, 0xF8	; 248
     ee6:	59 83       	std	Y+1, r21	; 0x01
     ee8:	48 83       	st	Y, r20
     eea:	cf 52       	subi	r28, 0x2F	; 47
     eec:	d7 40       	sbci	r29, 0x07	; 7
            avg_diff_Z_XL += diff_Z_XL[(cnt%WINDOW_SIZE) - i];
     eee:	e5 e8       	ldi	r30, 0x85	; 133
     ef0:	f3 e0       	ldi	r31, 0x03	; 3
     ef2:	ec 0f       	add	r30, r28
     ef4:	fd 1f       	adc	r31, r29
     ef6:	e8 0f       	add	r30, r24
     ef8:	f9 1f       	adc	r31, r25
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01
     efe:	c3 5d       	subi	r28, 0xD3	; 211
     f00:	d8 4f       	sbci	r29, 0xF8	; 248
     f02:	48 81       	ld	r20, Y
     f04:	59 81       	ldd	r21, Y+1	; 0x01
     f06:	cd 52       	subi	r28, 0x2D	; 45
     f08:	d7 40       	sbci	r29, 0x07	; 7
     f0a:	84 0f       	add	r24, r20
     f0c:	95 1f       	adc	r25, r21
     f0e:	c3 5d       	subi	r28, 0xD3	; 211
     f10:	d8 4f       	sbci	r29, 0xF8	; 248
     f12:	99 83       	std	Y+1, r25	; 0x01
     f14:	88 83       	st	Y, r24
     f16:	cd 52       	subi	r28, 0x2D	; 45
     f18:	d7 40       	sbci	r29, 0x07	; 7
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
        avg_diff_X_XL = 0;
        avg_diff_Y_XL = 0;
        avg_diff_Z_XL = 0;

        // Get sum of last NUM_AVGS accelerations
        for(i = 0; i < NUM_AVGS; i++){
     f1e:	22 33       	cpi	r18, 0x32	; 50
     f20:	31 05       	cpc	r19, r1
     f22:	09 f0       	breq	.+2      	; 0xf26 <__stack+0x627>
     f24:	b3 cf       	rjmp	.-154    	; 0xe8c <__stack+0x58d>
            avg_diff_Z_XL += diff_Z_XL[(cnt%WINDOW_SIZE) - i];

        }

        // Take average of last NUM_AVGS accelerations and pitch and roll calculations
        avg_diff_X_XL /= NUM_AVGS;
     f26:	cf 5c       	subi	r28, 0xCF	; 207
     f28:	d8 4f       	sbci	r29, 0xF8	; 248
     f2a:	88 81       	ld	r24, Y
     f2c:	99 81       	ldd	r25, Y+1	; 0x01
     f2e:	c1 53       	subi	r28, 0x31	; 49
     f30:	d7 40       	sbci	r29, 0x07	; 7
     f32:	b9 01       	movw	r22, r18
     f34:	0e 94 c4 07 	call	0xf88	; 0xf88 <__divmodhi4>
     f38:	cf 5c       	subi	r28, 0xCF	; 207
     f3a:	d8 4f       	sbci	r29, 0xF8	; 248
     f3c:	79 83       	std	Y+1, r23	; 0x01
     f3e:	68 83       	st	Y, r22
     f40:	c1 53       	subi	r28, 0x31	; 49
     f42:	d7 40       	sbci	r29, 0x07	; 7
        avg_diff_Y_XL /= NUM_AVGS;
     f44:	c1 5d       	subi	r28, 0xD1	; 209
     f46:	d8 4f       	sbci	r29, 0xF8	; 248
     f48:	88 81       	ld	r24, Y
     f4a:	99 81       	ldd	r25, Y+1	; 0x01
     f4c:	cf 52       	subi	r28, 0x2F	; 47
     f4e:	d7 40       	sbci	r29, 0x07	; 7
     f50:	b9 01       	movw	r22, r18
     f52:	0e 94 c4 07 	call	0xf88	; 0xf88 <__divmodhi4>
     f56:	c1 5d       	subi	r28, 0xD1	; 209
     f58:	d8 4f       	sbci	r29, 0xF8	; 248
     f5a:	79 83       	std	Y+1, r23	; 0x01
     f5c:	68 83       	st	Y, r22
     f5e:	cf 52       	subi	r28, 0x2F	; 47
     f60:	d7 40       	sbci	r29, 0x07	; 7
        avg_diff_Z_XL /= NUM_AVGS; 				
     f62:	c3 5d       	subi	r28, 0xD3	; 211
     f64:	d8 4f       	sbci	r29, 0xF8	; 248
     f66:	88 81       	ld	r24, Y
     f68:	99 81       	ldd	r25, Y+1	; 0x01
     f6a:	cd 52       	subi	r28, 0x2D	; 45
     f6c:	d7 40       	sbci	r29, 0x07	; 7
     f6e:	b9 01       	movw	r22, r18
     f70:	0e 94 c4 07 	call	0xf88	; 0xf88 <__divmodhi4>
     f74:	c3 5d       	subi	r28, 0xD3	; 211
     f76:	d8 4f       	sbci	r29, 0xF8	; 248
     f78:	79 83       	std	Y+1, r23	; 0x01
     f7a:	68 83       	st	Y, r22
     f7c:	cd 52       	subi	r28, 0x2D	; 45
     f7e:	d7 40       	sbci	r29, 0x07	; 7
                avg_diff_X_XL, avg_diff_Y_XL, avg_diff_Z_XL,\
                x_gyro[cnt%WINDOW_SIZE], y_gyro[cnt%WINDOW_SIZE], z_gyro[cnt%WINDOW_SIZE]);
        //                               diff_time);
        UART_Transmit_String(str);
*/
        cnt++;
     f80:	ff ef       	ldi	r31, 0xFF	; 255
     f82:	4f 1a       	sub	r4, r31
     f84:	5f 0a       	sbc	r5, r31
        //				timer_ovf_cnt = 0;
    }
     f86:	72 cb       	rjmp	.-2332   	; 0x66c <main+0xdc>

00000f88 <__divmodhi4>:
     f88:	97 fb       	bst	r25, 7
     f8a:	07 2e       	mov	r0, r23
     f8c:	16 f4       	brtc	.+4      	; 0xf92 <__divmodhi4+0xa>
     f8e:	00 94       	com	r0
     f90:	07 d0       	rcall	.+14     	; 0xfa0 <__divmodhi4_neg1>
     f92:	77 fd       	sbrc	r23, 7
     f94:	09 d0       	rcall	.+18     	; 0xfa8 <__divmodhi4_neg2>
     f96:	0e 94 ed 07 	call	0xfda	; 0xfda <__udivmodhi4>
     f9a:	07 fc       	sbrc	r0, 7
     f9c:	05 d0       	rcall	.+10     	; 0xfa8 <__divmodhi4_neg2>
     f9e:	3e f4       	brtc	.+14     	; 0xfae <__divmodhi4_exit>

00000fa0 <__divmodhi4_neg1>:
     fa0:	90 95       	com	r25
     fa2:	81 95       	neg	r24
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	08 95       	ret

00000fa8 <__divmodhi4_neg2>:
     fa8:	70 95       	com	r23
     faa:	61 95       	neg	r22
     fac:	7f 4f       	sbci	r23, 0xFF	; 255

00000fae <__divmodhi4_exit>:
     fae:	08 95       	ret

00000fb0 <__tablejump2__>:
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31

00000fb4 <__tablejump__>:
     fb4:	05 90       	lpm	r0, Z+
     fb6:	f4 91       	lpm	r31, Z
     fb8:	e0 2d       	mov	r30, r0
     fba:	09 94       	ijmp

00000fbc <__umulhisi3>:
     fbc:	a2 9f       	mul	r26, r18
     fbe:	b0 01       	movw	r22, r0
     fc0:	b3 9f       	mul	r27, r19
     fc2:	c0 01       	movw	r24, r0
     fc4:	a3 9f       	mul	r26, r19
     fc6:	70 0d       	add	r23, r0
     fc8:	81 1d       	adc	r24, r1
     fca:	11 24       	eor	r1, r1
     fcc:	91 1d       	adc	r25, r1
     fce:	b2 9f       	mul	r27, r18
     fd0:	70 0d       	add	r23, r0
     fd2:	81 1d       	adc	r24, r1
     fd4:	11 24       	eor	r1, r1
     fd6:	91 1d       	adc	r25, r1
     fd8:	08 95       	ret

00000fda <__udivmodhi4>:
     fda:	aa 1b       	sub	r26, r26
     fdc:	bb 1b       	sub	r27, r27
     fde:	51 e1       	ldi	r21, 0x11	; 17
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <__udivmodhi4_ep>

00000fe2 <__udivmodhi4_loop>:
     fe2:	aa 1f       	adc	r26, r26
     fe4:	bb 1f       	adc	r27, r27
     fe6:	a6 17       	cp	r26, r22
     fe8:	b7 07       	cpc	r27, r23
     fea:	10 f0       	brcs	.+4      	; 0xff0 <__udivmodhi4_ep>
     fec:	a6 1b       	sub	r26, r22
     fee:	b7 0b       	sbc	r27, r23

00000ff0 <__udivmodhi4_ep>:
     ff0:	88 1f       	adc	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	5a 95       	dec	r21
     ff6:	a9 f7       	brne	.-22     	; 0xfe2 <__udivmodhi4_loop>
     ff8:	80 95       	com	r24
     ffa:	90 95       	com	r25
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	08 95       	ret

00001002 <__subsf3>:
    1002:	50 58       	subi	r21, 0x80	; 128

00001004 <__addsf3>:
    1004:	bb 27       	eor	r27, r27
    1006:	aa 27       	eor	r26, r26
    1008:	0e d0       	rcall	.+28     	; 0x1026 <__addsf3x>
    100a:	9a c1       	rjmp	.+820    	; 0x1340 <__fp_round>
    100c:	8b d1       	rcall	.+790    	; 0x1324 <__fp_pscA>
    100e:	30 f0       	brcs	.+12     	; 0x101c <__addsf3+0x18>
    1010:	90 d1       	rcall	.+800    	; 0x1332 <__fp_pscB>
    1012:	20 f0       	brcs	.+8      	; 0x101c <__addsf3+0x18>
    1014:	31 f4       	brne	.+12     	; 0x1022 <__addsf3+0x1e>
    1016:	9f 3f       	cpi	r25, 0xFF	; 255
    1018:	11 f4       	brne	.+4      	; 0x101e <__addsf3+0x1a>
    101a:	1e f4       	brtc	.+6      	; 0x1022 <__addsf3+0x1e>
    101c:	5b c1       	rjmp	.+694    	; 0x12d4 <__fp_nan>
    101e:	0e f4       	brtc	.+2      	; 0x1022 <__addsf3+0x1e>
    1020:	e0 95       	com	r30
    1022:	e7 fb       	bst	r30, 7
    1024:	51 c1       	rjmp	.+674    	; 0x12c8 <__fp_inf>

00001026 <__addsf3x>:
    1026:	e9 2f       	mov	r30, r25
    1028:	9c d1       	rcall	.+824    	; 0x1362 <__fp_split3>
    102a:	80 f3       	brcs	.-32     	; 0x100c <__addsf3+0x8>
    102c:	ba 17       	cp	r27, r26
    102e:	62 07       	cpc	r22, r18
    1030:	73 07       	cpc	r23, r19
    1032:	84 07       	cpc	r24, r20
    1034:	95 07       	cpc	r25, r21
    1036:	18 f0       	brcs	.+6      	; 0x103e <__addsf3x+0x18>
    1038:	71 f4       	brne	.+28     	; 0x1056 <__addsf3x+0x30>
    103a:	9e f5       	brtc	.+102    	; 0x10a2 <__addsf3x+0x7c>
    103c:	b4 c1       	rjmp	.+872    	; 0x13a6 <__fp_zero>
    103e:	0e f4       	brtc	.+2      	; 0x1042 <__addsf3x+0x1c>
    1040:	e0 95       	com	r30
    1042:	0b 2e       	mov	r0, r27
    1044:	ba 2f       	mov	r27, r26
    1046:	a0 2d       	mov	r26, r0
    1048:	0b 01       	movw	r0, r22
    104a:	b9 01       	movw	r22, r18
    104c:	90 01       	movw	r18, r0
    104e:	0c 01       	movw	r0, r24
    1050:	ca 01       	movw	r24, r20
    1052:	a0 01       	movw	r20, r0
    1054:	11 24       	eor	r1, r1
    1056:	ff 27       	eor	r31, r31
    1058:	59 1b       	sub	r21, r25
    105a:	99 f0       	breq	.+38     	; 0x1082 <__addsf3x+0x5c>
    105c:	59 3f       	cpi	r21, 0xF9	; 249
    105e:	50 f4       	brcc	.+20     	; 0x1074 <__addsf3x+0x4e>
    1060:	50 3e       	cpi	r21, 0xE0	; 224
    1062:	68 f1       	brcs	.+90     	; 0x10be <__addsf3x+0x98>
    1064:	1a 16       	cp	r1, r26
    1066:	f0 40       	sbci	r31, 0x00	; 0
    1068:	a2 2f       	mov	r26, r18
    106a:	23 2f       	mov	r18, r19
    106c:	34 2f       	mov	r19, r20
    106e:	44 27       	eor	r20, r20
    1070:	58 5f       	subi	r21, 0xF8	; 248
    1072:	f3 cf       	rjmp	.-26     	; 0x105a <__addsf3x+0x34>
    1074:	46 95       	lsr	r20
    1076:	37 95       	ror	r19
    1078:	27 95       	ror	r18
    107a:	a7 95       	ror	r26
    107c:	f0 40       	sbci	r31, 0x00	; 0
    107e:	53 95       	inc	r21
    1080:	c9 f7       	brne	.-14     	; 0x1074 <__addsf3x+0x4e>
    1082:	7e f4       	brtc	.+30     	; 0x10a2 <__addsf3x+0x7c>
    1084:	1f 16       	cp	r1, r31
    1086:	ba 0b       	sbc	r27, r26
    1088:	62 0b       	sbc	r22, r18
    108a:	73 0b       	sbc	r23, r19
    108c:	84 0b       	sbc	r24, r20
    108e:	ba f0       	brmi	.+46     	; 0x10be <__addsf3x+0x98>
    1090:	91 50       	subi	r25, 0x01	; 1
    1092:	a1 f0       	breq	.+40     	; 0x10bc <__addsf3x+0x96>
    1094:	ff 0f       	add	r31, r31
    1096:	bb 1f       	adc	r27, r27
    1098:	66 1f       	adc	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	88 1f       	adc	r24, r24
    109e:	c2 f7       	brpl	.-16     	; 0x1090 <__addsf3x+0x6a>
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <__addsf3x+0x98>
    10a2:	ba 0f       	add	r27, r26
    10a4:	62 1f       	adc	r22, r18
    10a6:	73 1f       	adc	r23, r19
    10a8:	84 1f       	adc	r24, r20
    10aa:	48 f4       	brcc	.+18     	; 0x10be <__addsf3x+0x98>
    10ac:	87 95       	ror	r24
    10ae:	77 95       	ror	r23
    10b0:	67 95       	ror	r22
    10b2:	b7 95       	ror	r27
    10b4:	f7 95       	ror	r31
    10b6:	9e 3f       	cpi	r25, 0xFE	; 254
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <__addsf3x+0x96>
    10ba:	b3 cf       	rjmp	.-154    	; 0x1022 <__addsf3+0x1e>
    10bc:	93 95       	inc	r25
    10be:	88 0f       	add	r24, r24
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <__addsf3x+0x9e>
    10c2:	99 27       	eor	r25, r25
    10c4:	ee 0f       	add	r30, r30
    10c6:	97 95       	ror	r25
    10c8:	87 95       	ror	r24
    10ca:	08 95       	ret

000010cc <atan>:
    10cc:	df 93       	push	r29
    10ce:	dd 27       	eor	r29, r29
    10d0:	b9 2f       	mov	r27, r25
    10d2:	bf 77       	andi	r27, 0x7F	; 127
    10d4:	40 e8       	ldi	r20, 0x80	; 128
    10d6:	5f e3       	ldi	r21, 0x3F	; 63
    10d8:	16 16       	cp	r1, r22
    10da:	17 06       	cpc	r1, r23
    10dc:	48 07       	cpc	r20, r24
    10de:	5b 07       	cpc	r21, r27
    10e0:	10 f4       	brcc	.+4      	; 0x10e6 <atan+0x1a>
    10e2:	d9 2f       	mov	r29, r25
    10e4:	67 d1       	rcall	.+718    	; 0x13b4 <inverse>
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	7f 93       	push	r23
    10ec:	6f 93       	push	r22
    10ee:	0e d2       	rcall	.+1052   	; 0x150c <square>
    10f0:	ea e0       	ldi	r30, 0x0A	; 10
    10f2:	f1 e0       	ldi	r31, 0x01	; 1
    10f4:	f2 d0       	rcall	.+484    	; 0x12da <__fp_powser>
    10f6:	24 d1       	rcall	.+584    	; 0x1340 <__fp_round>
    10f8:	2f 91       	pop	r18
    10fa:	3f 91       	pop	r19
    10fc:	4f 91       	pop	r20
    10fe:	5f 91       	pop	r21
    1100:	6c d1       	rcall	.+728    	; 0x13da <__mulsf3x>
    1102:	dd 23       	and	r29, r29
    1104:	49 f0       	breq	.+18     	; 0x1118 <atan+0x4c>
    1106:	90 58       	subi	r25, 0x80	; 128
    1108:	a2 ea       	ldi	r26, 0xA2	; 162
    110a:	2a ed       	ldi	r18, 0xDA	; 218
    110c:	3f e0       	ldi	r19, 0x0F	; 15
    110e:	49 ec       	ldi	r20, 0xC9	; 201
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	d0 78       	andi	r29, 0x80	; 128
    1114:	5d 27       	eor	r21, r29
    1116:	87 df       	rcall	.-242    	; 0x1026 <__addsf3x>
    1118:	df 91       	pop	r29
    111a:	12 c1       	rjmp	.+548    	; 0x1340 <__fp_round>

0000111c <__divsf3>:
    111c:	0c d0       	rcall	.+24     	; 0x1136 <__divsf3x>
    111e:	10 c1       	rjmp	.+544    	; 0x1340 <__fp_round>
    1120:	08 d1       	rcall	.+528    	; 0x1332 <__fp_pscB>
    1122:	40 f0       	brcs	.+16     	; 0x1134 <__divsf3+0x18>
    1124:	ff d0       	rcall	.+510    	; 0x1324 <__fp_pscA>
    1126:	30 f0       	brcs	.+12     	; 0x1134 <__divsf3+0x18>
    1128:	21 f4       	brne	.+8      	; 0x1132 <__divsf3+0x16>
    112a:	5f 3f       	cpi	r21, 0xFF	; 255
    112c:	19 f0       	breq	.+6      	; 0x1134 <__divsf3+0x18>
    112e:	cc c0       	rjmp	.+408    	; 0x12c8 <__fp_inf>
    1130:	51 11       	cpse	r21, r1
    1132:	3a c1       	rjmp	.+628    	; 0x13a8 <__fp_szero>
    1134:	cf c0       	rjmp	.+414    	; 0x12d4 <__fp_nan>

00001136 <__divsf3x>:
    1136:	15 d1       	rcall	.+554    	; 0x1362 <__fp_split3>
    1138:	98 f3       	brcs	.-26     	; 0x1120 <__divsf3+0x4>

0000113a <__divsf3_pse>:
    113a:	99 23       	and	r25, r25
    113c:	c9 f3       	breq	.-14     	; 0x1130 <__divsf3+0x14>
    113e:	55 23       	and	r21, r21
    1140:	b1 f3       	breq	.-20     	; 0x112e <__divsf3+0x12>
    1142:	95 1b       	sub	r25, r21
    1144:	55 0b       	sbc	r21, r21
    1146:	bb 27       	eor	r27, r27
    1148:	aa 27       	eor	r26, r26
    114a:	62 17       	cp	r22, r18
    114c:	73 07       	cpc	r23, r19
    114e:	84 07       	cpc	r24, r20
    1150:	38 f0       	brcs	.+14     	; 0x1160 <__divsf3_pse+0x26>
    1152:	9f 5f       	subi	r25, 0xFF	; 255
    1154:	5f 4f       	sbci	r21, 0xFF	; 255
    1156:	22 0f       	add	r18, r18
    1158:	33 1f       	adc	r19, r19
    115a:	44 1f       	adc	r20, r20
    115c:	aa 1f       	adc	r26, r26
    115e:	a9 f3       	breq	.-22     	; 0x114a <__divsf3_pse+0x10>
    1160:	33 d0       	rcall	.+102    	; 0x11c8 <__divsf3_pse+0x8e>
    1162:	0e 2e       	mov	r0, r30
    1164:	3a f0       	brmi	.+14     	; 0x1174 <__divsf3_pse+0x3a>
    1166:	e0 e8       	ldi	r30, 0x80	; 128
    1168:	30 d0       	rcall	.+96     	; 0x11ca <__divsf3_pse+0x90>
    116a:	91 50       	subi	r25, 0x01	; 1
    116c:	50 40       	sbci	r21, 0x00	; 0
    116e:	e6 95       	lsr	r30
    1170:	00 1c       	adc	r0, r0
    1172:	ca f7       	brpl	.-14     	; 0x1166 <__divsf3_pse+0x2c>
    1174:	29 d0       	rcall	.+82     	; 0x11c8 <__divsf3_pse+0x8e>
    1176:	fe 2f       	mov	r31, r30
    1178:	27 d0       	rcall	.+78     	; 0x11c8 <__divsf3_pse+0x8e>
    117a:	66 0f       	add	r22, r22
    117c:	77 1f       	adc	r23, r23
    117e:	88 1f       	adc	r24, r24
    1180:	bb 1f       	adc	r27, r27
    1182:	26 17       	cp	r18, r22
    1184:	37 07       	cpc	r19, r23
    1186:	48 07       	cpc	r20, r24
    1188:	ab 07       	cpc	r26, r27
    118a:	b0 e8       	ldi	r27, 0x80	; 128
    118c:	09 f0       	breq	.+2      	; 0x1190 <__divsf3_pse+0x56>
    118e:	bb 0b       	sbc	r27, r27
    1190:	80 2d       	mov	r24, r0
    1192:	bf 01       	movw	r22, r30
    1194:	ff 27       	eor	r31, r31
    1196:	93 58       	subi	r25, 0x83	; 131
    1198:	5f 4f       	sbci	r21, 0xFF	; 255
    119a:	2a f0       	brmi	.+10     	; 0x11a6 <__divsf3_pse+0x6c>
    119c:	9e 3f       	cpi	r25, 0xFE	; 254
    119e:	51 05       	cpc	r21, r1
    11a0:	68 f0       	brcs	.+26     	; 0x11bc <__divsf3_pse+0x82>
    11a2:	92 c0       	rjmp	.+292    	; 0x12c8 <__fp_inf>
    11a4:	01 c1       	rjmp	.+514    	; 0x13a8 <__fp_szero>
    11a6:	5f 3f       	cpi	r21, 0xFF	; 255
    11a8:	ec f3       	brlt	.-6      	; 0x11a4 <__divsf3_pse+0x6a>
    11aa:	98 3e       	cpi	r25, 0xE8	; 232
    11ac:	dc f3       	brlt	.-10     	; 0x11a4 <__divsf3_pse+0x6a>
    11ae:	86 95       	lsr	r24
    11b0:	77 95       	ror	r23
    11b2:	67 95       	ror	r22
    11b4:	b7 95       	ror	r27
    11b6:	f7 95       	ror	r31
    11b8:	9f 5f       	subi	r25, 0xFF	; 255
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <__divsf3_pse+0x74>
    11bc:	88 0f       	add	r24, r24
    11be:	91 1d       	adc	r25, r1
    11c0:	96 95       	lsr	r25
    11c2:	87 95       	ror	r24
    11c4:	97 f9       	bld	r25, 7
    11c6:	08 95       	ret
    11c8:	e1 e0       	ldi	r30, 0x01	; 1
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	88 1f       	adc	r24, r24
    11d0:	bb 1f       	adc	r27, r27
    11d2:	62 17       	cp	r22, r18
    11d4:	73 07       	cpc	r23, r19
    11d6:	84 07       	cpc	r24, r20
    11d8:	ba 07       	cpc	r27, r26
    11da:	20 f0       	brcs	.+8      	; 0x11e4 <__divsf3_pse+0xaa>
    11dc:	62 1b       	sub	r22, r18
    11de:	73 0b       	sbc	r23, r19
    11e0:	84 0b       	sbc	r24, r20
    11e2:	ba 0b       	sbc	r27, r26
    11e4:	ee 1f       	adc	r30, r30
    11e6:	88 f7       	brcc	.-30     	; 0x11ca <__divsf3_pse+0x90>
    11e8:	e0 95       	com	r30
    11ea:	08 95       	ret

000011ec <__fixsfsi>:
    11ec:	04 d0       	rcall	.+8      	; 0x11f6 <__fixunssfsi>
    11ee:	68 94       	set
    11f0:	b1 11       	cpse	r27, r1
    11f2:	da c0       	rjmp	.+436    	; 0x13a8 <__fp_szero>
    11f4:	08 95       	ret

000011f6 <__fixunssfsi>:
    11f6:	bd d0       	rcall	.+378    	; 0x1372 <__fp_splitA>
    11f8:	88 f0       	brcs	.+34     	; 0x121c <__fixunssfsi+0x26>
    11fa:	9f 57       	subi	r25, 0x7F	; 127
    11fc:	90 f0       	brcs	.+36     	; 0x1222 <__fixunssfsi+0x2c>
    11fe:	b9 2f       	mov	r27, r25
    1200:	99 27       	eor	r25, r25
    1202:	b7 51       	subi	r27, 0x17	; 23
    1204:	a0 f0       	brcs	.+40     	; 0x122e <__fixunssfsi+0x38>
    1206:	d1 f0       	breq	.+52     	; 0x123c <__fixunssfsi+0x46>
    1208:	66 0f       	add	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	88 1f       	adc	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	1a f0       	brmi	.+6      	; 0x1218 <__fixunssfsi+0x22>
    1212:	ba 95       	dec	r27
    1214:	c9 f7       	brne	.-14     	; 0x1208 <__fixunssfsi+0x12>
    1216:	12 c0       	rjmp	.+36     	; 0x123c <__fixunssfsi+0x46>
    1218:	b1 30       	cpi	r27, 0x01	; 1
    121a:	81 f0       	breq	.+32     	; 0x123c <__fixunssfsi+0x46>
    121c:	c4 d0       	rcall	.+392    	; 0x13a6 <__fp_zero>
    121e:	b1 e0       	ldi	r27, 0x01	; 1
    1220:	08 95       	ret
    1222:	c1 c0       	rjmp	.+386    	; 0x13a6 <__fp_zero>
    1224:	67 2f       	mov	r22, r23
    1226:	78 2f       	mov	r23, r24
    1228:	88 27       	eor	r24, r24
    122a:	b8 5f       	subi	r27, 0xF8	; 248
    122c:	39 f0       	breq	.+14     	; 0x123c <__fixunssfsi+0x46>
    122e:	b9 3f       	cpi	r27, 0xF9	; 249
    1230:	cc f3       	brlt	.-14     	; 0x1224 <__fixunssfsi+0x2e>
    1232:	86 95       	lsr	r24
    1234:	77 95       	ror	r23
    1236:	67 95       	ror	r22
    1238:	b3 95       	inc	r27
    123a:	d9 f7       	brne	.-10     	; 0x1232 <__fixunssfsi+0x3c>
    123c:	3e f4       	brtc	.+14     	; 0x124c <__fixunssfsi+0x56>
    123e:	90 95       	com	r25
    1240:	80 95       	com	r24
    1242:	70 95       	com	r23
    1244:	61 95       	neg	r22
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	8f 4f       	sbci	r24, 0xFF	; 255
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	08 95       	ret

0000124e <__floatunsisf>:
    124e:	e8 94       	clt
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <__floatsisf+0x12>

00001252 <__floatsisf>:
    1252:	97 fb       	bst	r25, 7
    1254:	3e f4       	brtc	.+14     	; 0x1264 <__floatsisf+0x12>
    1256:	90 95       	com	r25
    1258:	80 95       	com	r24
    125a:	70 95       	com	r23
    125c:	61 95       	neg	r22
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	8f 4f       	sbci	r24, 0xFF	; 255
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	99 23       	and	r25, r25
    1266:	a9 f0       	breq	.+42     	; 0x1292 <__floatsisf+0x40>
    1268:	f9 2f       	mov	r31, r25
    126a:	96 e9       	ldi	r25, 0x96	; 150
    126c:	bb 27       	eor	r27, r27
    126e:	93 95       	inc	r25
    1270:	f6 95       	lsr	r31
    1272:	87 95       	ror	r24
    1274:	77 95       	ror	r23
    1276:	67 95       	ror	r22
    1278:	b7 95       	ror	r27
    127a:	f1 11       	cpse	r31, r1
    127c:	f8 cf       	rjmp	.-16     	; 0x126e <__floatsisf+0x1c>
    127e:	fa f4       	brpl	.+62     	; 0x12be <__floatsisf+0x6c>
    1280:	bb 0f       	add	r27, r27
    1282:	11 f4       	brne	.+4      	; 0x1288 <__floatsisf+0x36>
    1284:	60 ff       	sbrs	r22, 0
    1286:	1b c0       	rjmp	.+54     	; 0x12be <__floatsisf+0x6c>
    1288:	6f 5f       	subi	r22, 0xFF	; 255
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	8f 4f       	sbci	r24, 0xFF	; 255
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	16 c0       	rjmp	.+44     	; 0x12be <__floatsisf+0x6c>
    1292:	88 23       	and	r24, r24
    1294:	11 f0       	breq	.+4      	; 0x129a <__floatsisf+0x48>
    1296:	96 e9       	ldi	r25, 0x96	; 150
    1298:	11 c0       	rjmp	.+34     	; 0x12bc <__floatsisf+0x6a>
    129a:	77 23       	and	r23, r23
    129c:	21 f0       	breq	.+8      	; 0x12a6 <__floatsisf+0x54>
    129e:	9e e8       	ldi	r25, 0x8E	; 142
    12a0:	87 2f       	mov	r24, r23
    12a2:	76 2f       	mov	r23, r22
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <__floatsisf+0x5e>
    12a6:	66 23       	and	r22, r22
    12a8:	71 f0       	breq	.+28     	; 0x12c6 <__floatsisf+0x74>
    12aa:	96 e8       	ldi	r25, 0x86	; 134
    12ac:	86 2f       	mov	r24, r22
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	2a f0       	brmi	.+10     	; 0x12be <__floatsisf+0x6c>
    12b4:	9a 95       	dec	r25
    12b6:	66 0f       	add	r22, r22
    12b8:	77 1f       	adc	r23, r23
    12ba:	88 1f       	adc	r24, r24
    12bc:	da f7       	brpl	.-10     	; 0x12b4 <__floatsisf+0x62>
    12be:	88 0f       	add	r24, r24
    12c0:	96 95       	lsr	r25
    12c2:	87 95       	ror	r24
    12c4:	97 f9       	bld	r25, 7
    12c6:	08 95       	ret

000012c8 <__fp_inf>:
    12c8:	97 f9       	bld	r25, 7
    12ca:	9f 67       	ori	r25, 0x7F	; 127
    12cc:	80 e8       	ldi	r24, 0x80	; 128
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	08 95       	ret

000012d4 <__fp_nan>:
    12d4:	9f ef       	ldi	r25, 0xFF	; 255
    12d6:	80 ec       	ldi	r24, 0xC0	; 192
    12d8:	08 95       	ret

000012da <__fp_powser>:
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	1f 93       	push	r17
    12e0:	0f 93       	push	r16
    12e2:	ff 92       	push	r15
    12e4:	ef 92       	push	r14
    12e6:	df 92       	push	r13
    12e8:	7b 01       	movw	r14, r22
    12ea:	8c 01       	movw	r16, r24
    12ec:	68 94       	set
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <__fp_powser+0x20>
    12f0:	da 2e       	mov	r13, r26
    12f2:	ef 01       	movw	r28, r30
    12f4:	72 d0       	rcall	.+228    	; 0x13da <__mulsf3x>
    12f6:	fe 01       	movw	r30, r28
    12f8:	e8 94       	clt
    12fa:	a5 91       	lpm	r26, Z+
    12fc:	25 91       	lpm	r18, Z+
    12fe:	35 91       	lpm	r19, Z+
    1300:	45 91       	lpm	r20, Z+
    1302:	55 91       	lpm	r21, Z+
    1304:	ae f3       	brts	.-22     	; 0x12f0 <__fp_powser+0x16>
    1306:	ef 01       	movw	r28, r30
    1308:	8e de       	rcall	.-740    	; 0x1026 <__addsf3x>
    130a:	fe 01       	movw	r30, r28
    130c:	97 01       	movw	r18, r14
    130e:	a8 01       	movw	r20, r16
    1310:	da 94       	dec	r13
    1312:	79 f7       	brne	.-34     	; 0x12f2 <__fp_powser+0x18>
    1314:	df 90       	pop	r13
    1316:	ef 90       	pop	r14
    1318:	ff 90       	pop	r15
    131a:	0f 91       	pop	r16
    131c:	1f 91       	pop	r17
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <__fp_pscA>:
    1324:	00 24       	eor	r0, r0
    1326:	0a 94       	dec	r0
    1328:	16 16       	cp	r1, r22
    132a:	17 06       	cpc	r1, r23
    132c:	18 06       	cpc	r1, r24
    132e:	09 06       	cpc	r0, r25
    1330:	08 95       	ret

00001332 <__fp_pscB>:
    1332:	00 24       	eor	r0, r0
    1334:	0a 94       	dec	r0
    1336:	12 16       	cp	r1, r18
    1338:	13 06       	cpc	r1, r19
    133a:	14 06       	cpc	r1, r20
    133c:	05 06       	cpc	r0, r21
    133e:	08 95       	ret

00001340 <__fp_round>:
    1340:	09 2e       	mov	r0, r25
    1342:	03 94       	inc	r0
    1344:	00 0c       	add	r0, r0
    1346:	11 f4       	brne	.+4      	; 0x134c <__fp_round+0xc>
    1348:	88 23       	and	r24, r24
    134a:	52 f0       	brmi	.+20     	; 0x1360 <__fp_round+0x20>
    134c:	bb 0f       	add	r27, r27
    134e:	40 f4       	brcc	.+16     	; 0x1360 <__fp_round+0x20>
    1350:	bf 2b       	or	r27, r31
    1352:	11 f4       	brne	.+4      	; 0x1358 <__fp_round+0x18>
    1354:	60 ff       	sbrs	r22, 0
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <__fp_round+0x20>
    1358:	6f 5f       	subi	r22, 0xFF	; 255
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	08 95       	ret

00001362 <__fp_split3>:
    1362:	57 fd       	sbrc	r21, 7
    1364:	90 58       	subi	r25, 0x80	; 128
    1366:	44 0f       	add	r20, r20
    1368:	55 1f       	adc	r21, r21
    136a:	59 f0       	breq	.+22     	; 0x1382 <__fp_splitA+0x10>
    136c:	5f 3f       	cpi	r21, 0xFF	; 255
    136e:	71 f0       	breq	.+28     	; 0x138c <__fp_splitA+0x1a>
    1370:	47 95       	ror	r20

00001372 <__fp_splitA>:
    1372:	88 0f       	add	r24, r24
    1374:	97 fb       	bst	r25, 7
    1376:	99 1f       	adc	r25, r25
    1378:	61 f0       	breq	.+24     	; 0x1392 <__fp_splitA+0x20>
    137a:	9f 3f       	cpi	r25, 0xFF	; 255
    137c:	79 f0       	breq	.+30     	; 0x139c <__fp_splitA+0x2a>
    137e:	87 95       	ror	r24
    1380:	08 95       	ret
    1382:	12 16       	cp	r1, r18
    1384:	13 06       	cpc	r1, r19
    1386:	14 06       	cpc	r1, r20
    1388:	55 1f       	adc	r21, r21
    138a:	f2 cf       	rjmp	.-28     	; 0x1370 <__fp_split3+0xe>
    138c:	46 95       	lsr	r20
    138e:	f1 df       	rcall	.-30     	; 0x1372 <__fp_splitA>
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <__fp_splitA+0x30>
    1392:	16 16       	cp	r1, r22
    1394:	17 06       	cpc	r1, r23
    1396:	18 06       	cpc	r1, r24
    1398:	99 1f       	adc	r25, r25
    139a:	f1 cf       	rjmp	.-30     	; 0x137e <__fp_splitA+0xc>
    139c:	86 95       	lsr	r24
    139e:	71 05       	cpc	r23, r1
    13a0:	61 05       	cpc	r22, r1
    13a2:	08 94       	sec
    13a4:	08 95       	ret

000013a6 <__fp_zero>:
    13a6:	e8 94       	clt

000013a8 <__fp_szero>:
    13a8:	bb 27       	eor	r27, r27
    13aa:	66 27       	eor	r22, r22
    13ac:	77 27       	eor	r23, r23
    13ae:	cb 01       	movw	r24, r22
    13b0:	97 f9       	bld	r25, 7
    13b2:	08 95       	ret

000013b4 <inverse>:
    13b4:	9b 01       	movw	r18, r22
    13b6:	ac 01       	movw	r20, r24
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	80 e8       	ldi	r24, 0x80	; 128
    13be:	9f e3       	ldi	r25, 0x3F	; 63
    13c0:	ad ce       	rjmp	.-678    	; 0x111c <__divsf3>

000013c2 <__mulsf3>:
    13c2:	0b d0       	rcall	.+22     	; 0x13da <__mulsf3x>
    13c4:	bd cf       	rjmp	.-134    	; 0x1340 <__fp_round>
    13c6:	ae df       	rcall	.-164    	; 0x1324 <__fp_pscA>
    13c8:	28 f0       	brcs	.+10     	; 0x13d4 <__mulsf3+0x12>
    13ca:	b3 df       	rcall	.-154    	; 0x1332 <__fp_pscB>
    13cc:	18 f0       	brcs	.+6      	; 0x13d4 <__mulsf3+0x12>
    13ce:	95 23       	and	r25, r21
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <__mulsf3+0x12>
    13d2:	7a cf       	rjmp	.-268    	; 0x12c8 <__fp_inf>
    13d4:	7f cf       	rjmp	.-258    	; 0x12d4 <__fp_nan>
    13d6:	11 24       	eor	r1, r1
    13d8:	e7 cf       	rjmp	.-50     	; 0x13a8 <__fp_szero>

000013da <__mulsf3x>:
    13da:	c3 df       	rcall	.-122    	; 0x1362 <__fp_split3>
    13dc:	a0 f3       	brcs	.-24     	; 0x13c6 <__mulsf3+0x4>

000013de <__mulsf3_pse>:
    13de:	95 9f       	mul	r25, r21
    13e0:	d1 f3       	breq	.-12     	; 0x13d6 <__mulsf3+0x14>
    13e2:	95 0f       	add	r25, r21
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	55 1f       	adc	r21, r21
    13e8:	62 9f       	mul	r22, r18
    13ea:	f0 01       	movw	r30, r0
    13ec:	72 9f       	mul	r23, r18
    13ee:	bb 27       	eor	r27, r27
    13f0:	f0 0d       	add	r31, r0
    13f2:	b1 1d       	adc	r27, r1
    13f4:	63 9f       	mul	r22, r19
    13f6:	aa 27       	eor	r26, r26
    13f8:	f0 0d       	add	r31, r0
    13fa:	b1 1d       	adc	r27, r1
    13fc:	aa 1f       	adc	r26, r26
    13fe:	64 9f       	mul	r22, r20
    1400:	66 27       	eor	r22, r22
    1402:	b0 0d       	add	r27, r0
    1404:	a1 1d       	adc	r26, r1
    1406:	66 1f       	adc	r22, r22
    1408:	82 9f       	mul	r24, r18
    140a:	22 27       	eor	r18, r18
    140c:	b0 0d       	add	r27, r0
    140e:	a1 1d       	adc	r26, r1
    1410:	62 1f       	adc	r22, r18
    1412:	73 9f       	mul	r23, r19
    1414:	b0 0d       	add	r27, r0
    1416:	a1 1d       	adc	r26, r1
    1418:	62 1f       	adc	r22, r18
    141a:	83 9f       	mul	r24, r19
    141c:	a0 0d       	add	r26, r0
    141e:	61 1d       	adc	r22, r1
    1420:	22 1f       	adc	r18, r18
    1422:	74 9f       	mul	r23, r20
    1424:	33 27       	eor	r19, r19
    1426:	a0 0d       	add	r26, r0
    1428:	61 1d       	adc	r22, r1
    142a:	23 1f       	adc	r18, r19
    142c:	84 9f       	mul	r24, r20
    142e:	60 0d       	add	r22, r0
    1430:	21 1d       	adc	r18, r1
    1432:	82 2f       	mov	r24, r18
    1434:	76 2f       	mov	r23, r22
    1436:	6a 2f       	mov	r22, r26
    1438:	11 24       	eor	r1, r1
    143a:	9f 57       	subi	r25, 0x7F	; 127
    143c:	50 40       	sbci	r21, 0x00	; 0
    143e:	8a f0       	brmi	.+34     	; 0x1462 <__mulsf3_pse+0x84>
    1440:	e1 f0       	breq	.+56     	; 0x147a <__mulsf3_pse+0x9c>
    1442:	88 23       	and	r24, r24
    1444:	4a f0       	brmi	.+18     	; 0x1458 <__mulsf3_pse+0x7a>
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	bb 1f       	adc	r27, r27
    144c:	66 1f       	adc	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	50 40       	sbci	r21, 0x00	; 0
    1456:	a9 f7       	brne	.-22     	; 0x1442 <__mulsf3_pse+0x64>
    1458:	9e 3f       	cpi	r25, 0xFE	; 254
    145a:	51 05       	cpc	r21, r1
    145c:	70 f0       	brcs	.+28     	; 0x147a <__mulsf3_pse+0x9c>
    145e:	34 cf       	rjmp	.-408    	; 0x12c8 <__fp_inf>
    1460:	a3 cf       	rjmp	.-186    	; 0x13a8 <__fp_szero>
    1462:	5f 3f       	cpi	r21, 0xFF	; 255
    1464:	ec f3       	brlt	.-6      	; 0x1460 <__mulsf3_pse+0x82>
    1466:	98 3e       	cpi	r25, 0xE8	; 232
    1468:	dc f3       	brlt	.-10     	; 0x1460 <__mulsf3_pse+0x82>
    146a:	86 95       	lsr	r24
    146c:	77 95       	ror	r23
    146e:	67 95       	ror	r22
    1470:	b7 95       	ror	r27
    1472:	f7 95       	ror	r31
    1474:	e7 95       	ror	r30
    1476:	9f 5f       	subi	r25, 0xFF	; 255
    1478:	c1 f7       	brne	.-16     	; 0x146a <__mulsf3_pse+0x8c>
    147a:	fe 2b       	or	r31, r30
    147c:	88 0f       	add	r24, r24
    147e:	91 1d       	adc	r25, r1
    1480:	96 95       	lsr	r25
    1482:	87 95       	ror	r24
    1484:	97 f9       	bld	r25, 7
    1486:	08 95       	ret
    1488:	11 f4       	brne	.+4      	; 0x148e <__mulsf3_pse+0xb0>
    148a:	0e f4       	brtc	.+2      	; 0x148e <__mulsf3_pse+0xb0>
    148c:	23 cf       	rjmp	.-442    	; 0x12d4 <__fp_nan>
    148e:	41 c0       	rjmp	.+130    	; 0x1512 <__fp_mpack>

00001490 <sqrt>:
    1490:	70 df       	rcall	.-288    	; 0x1372 <__fp_splitA>
    1492:	d0 f3       	brcs	.-12     	; 0x1488 <__mulsf3_pse+0xaa>
    1494:	99 23       	and	r25, r25
    1496:	d9 f3       	breq	.-10     	; 0x148e <__mulsf3_pse+0xb0>
    1498:	ce f3       	brts	.-14     	; 0x148c <__mulsf3_pse+0xae>
    149a:	9f 57       	subi	r25, 0x7F	; 127
    149c:	55 0b       	sbc	r21, r21
    149e:	87 ff       	sbrs	r24, 7
    14a0:	46 d0       	rcall	.+140    	; 0x152e <__fp_norm2>
    14a2:	00 24       	eor	r0, r0
    14a4:	a0 e6       	ldi	r26, 0x60	; 96
    14a6:	40 ea       	ldi	r20, 0xA0	; 160
    14a8:	90 01       	movw	r18, r0
    14aa:	80 58       	subi	r24, 0x80	; 128
    14ac:	56 95       	lsr	r21
    14ae:	97 95       	ror	r25
    14b0:	28 f4       	brcc	.+10     	; 0x14bc <sqrt+0x2c>
    14b2:	80 5c       	subi	r24, 0xC0	; 192
    14b4:	66 0f       	add	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	20 f0       	brcs	.+8      	; 0x14c4 <sqrt+0x34>
    14bc:	26 17       	cp	r18, r22
    14be:	37 07       	cpc	r19, r23
    14c0:	48 07       	cpc	r20, r24
    14c2:	30 f4       	brcc	.+12     	; 0x14d0 <sqrt+0x40>
    14c4:	62 1b       	sub	r22, r18
    14c6:	73 0b       	sbc	r23, r19
    14c8:	84 0b       	sbc	r24, r20
    14ca:	20 29       	or	r18, r0
    14cc:	31 29       	or	r19, r1
    14ce:	4a 2b       	or	r20, r26
    14d0:	a6 95       	lsr	r26
    14d2:	17 94       	ror	r1
    14d4:	07 94       	ror	r0
    14d6:	20 25       	eor	r18, r0
    14d8:	31 25       	eor	r19, r1
    14da:	4a 27       	eor	r20, r26
    14dc:	58 f7       	brcc	.-42     	; 0x14b4 <sqrt+0x24>
    14de:	66 0f       	add	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	88 1f       	adc	r24, r24
    14e4:	20 f0       	brcs	.+8      	; 0x14ee <sqrt+0x5e>
    14e6:	26 17       	cp	r18, r22
    14e8:	37 07       	cpc	r19, r23
    14ea:	48 07       	cpc	r20, r24
    14ec:	30 f4       	brcc	.+12     	; 0x14fa <sqrt+0x6a>
    14ee:	62 0b       	sbc	r22, r18
    14f0:	73 0b       	sbc	r23, r19
    14f2:	84 0b       	sbc	r24, r20
    14f4:	20 0d       	add	r18, r0
    14f6:	31 1d       	adc	r19, r1
    14f8:	41 1d       	adc	r20, r1
    14fa:	a0 95       	com	r26
    14fc:	81 f7       	brne	.-32     	; 0x14de <sqrt+0x4e>
    14fe:	b9 01       	movw	r22, r18
    1500:	84 2f       	mov	r24, r20
    1502:	91 58       	subi	r25, 0x81	; 129
    1504:	88 0f       	add	r24, r24
    1506:	96 95       	lsr	r25
    1508:	87 95       	ror	r24
    150a:	08 95       	ret

0000150c <square>:
    150c:	9b 01       	movw	r18, r22
    150e:	ac 01       	movw	r20, r24
    1510:	58 cf       	rjmp	.-336    	; 0x13c2 <__mulsf3>

00001512 <__fp_mpack>:
    1512:	9f 3f       	cpi	r25, 0xFF	; 255
    1514:	31 f0       	breq	.+12     	; 0x1522 <__fp_mpack_finite+0xc>

00001516 <__fp_mpack_finite>:
    1516:	91 50       	subi	r25, 0x01	; 1
    1518:	20 f4       	brcc	.+8      	; 0x1522 <__fp_mpack_finite+0xc>
    151a:	87 95       	ror	r24
    151c:	77 95       	ror	r23
    151e:	67 95       	ror	r22
    1520:	b7 95       	ror	r27
    1522:	88 0f       	add	r24, r24
    1524:	91 1d       	adc	r25, r1
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	97 f9       	bld	r25, 7
    152c:	08 95       	ret

0000152e <__fp_norm2>:
    152e:	91 50       	subi	r25, 0x01	; 1
    1530:	50 40       	sbci	r21, 0x00	; 0
    1532:	66 0f       	add	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	88 1f       	adc	r24, r24
    1538:	d2 f7       	brpl	.-12     	; 0x152e <__fp_norm2>
    153a:	08 95       	ret

0000153c <sprintf>:
    153c:	ae e0       	ldi	r26, 0x0E	; 14
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e4 ea       	ldi	r30, 0xA4	; 164
    1542:	fa e0       	ldi	r31, 0x0A	; 10
    1544:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__prologue_saves__+0x1c>
    1548:	0d 89       	ldd	r16, Y+21	; 0x15
    154a:	1e 89       	ldd	r17, Y+22	; 0x16
    154c:	86 e0       	ldi	r24, 0x06	; 6
    154e:	8c 83       	std	Y+4, r24	; 0x04
    1550:	1a 83       	std	Y+2, r17	; 0x02
    1552:	09 83       	std	Y+1, r16	; 0x01
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	9f e7       	ldi	r25, 0x7F	; 127
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	ae 01       	movw	r20, r28
    155e:	47 5e       	subi	r20, 0xE7	; 231
    1560:	5f 4f       	sbci	r21, 0xFF	; 255
    1562:	6f 89       	ldd	r22, Y+23	; 0x17
    1564:	78 8d       	ldd	r23, Y+24	; 0x18
    1566:	ce 01       	movw	r24, r28
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <vfprintf>
    156e:	ef 81       	ldd	r30, Y+7	; 0x07
    1570:	f8 85       	ldd	r31, Y+8	; 0x08
    1572:	e0 0f       	add	r30, r16
    1574:	f1 1f       	adc	r31, r17
    1576:	10 82       	st	Z, r1
    1578:	2e 96       	adiw	r28, 0x0e	; 14
    157a:	e4 e0       	ldi	r30, 0x04	; 4
    157c:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__epilogue_restores__+0x1c>

00001580 <vfprintf>:
    1580:	ac e0       	ldi	r26, 0x0C	; 12
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e6 ec       	ldi	r30, 0xC6	; 198
    1586:	fa e0       	ldi	r31, 0x0A	; 10
    1588:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__prologue_saves__>
    158c:	7c 01       	movw	r14, r24
    158e:	6b 01       	movw	r12, r22
    1590:	8a 01       	movw	r16, r20
    1592:	fc 01       	movw	r30, r24
    1594:	17 82       	std	Z+7, r1	; 0x07
    1596:	16 82       	std	Z+6, r1	; 0x06
    1598:	83 81       	ldd	r24, Z+3	; 0x03
    159a:	81 ff       	sbrs	r24, 1
    159c:	bd c1       	rjmp	.+890    	; 0x1918 <vfprintf+0x398>
    159e:	ce 01       	movw	r24, r28
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	4c 01       	movw	r8, r24
    15a4:	f7 01       	movw	r30, r14
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	f6 01       	movw	r30, r12
    15aa:	93 fd       	sbrc	r25, 3
    15ac:	85 91       	lpm	r24, Z+
    15ae:	93 ff       	sbrs	r25, 3
    15b0:	81 91       	ld	r24, Z+
    15b2:	6f 01       	movw	r12, r30
    15b4:	88 23       	and	r24, r24
    15b6:	09 f4       	brne	.+2      	; 0x15ba <vfprintf+0x3a>
    15b8:	ab c1       	rjmp	.+854    	; 0x1910 <vfprintf+0x390>
    15ba:	85 32       	cpi	r24, 0x25	; 37
    15bc:	39 f4       	brne	.+14     	; 0x15cc <vfprintf+0x4c>
    15be:	93 fd       	sbrc	r25, 3
    15c0:	85 91       	lpm	r24, Z+
    15c2:	93 ff       	sbrs	r25, 3
    15c4:	81 91       	ld	r24, Z+
    15c6:	6f 01       	movw	r12, r30
    15c8:	85 32       	cpi	r24, 0x25	; 37
    15ca:	29 f4       	brne	.+10     	; 0x15d6 <vfprintf+0x56>
    15cc:	b7 01       	movw	r22, r14
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    15d4:	e7 cf       	rjmp	.-50     	; 0x15a4 <vfprintf+0x24>
    15d6:	51 2c       	mov	r5, r1
    15d8:	31 2c       	mov	r3, r1
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	20 32       	cpi	r18, 0x20	; 32
    15de:	a0 f4       	brcc	.+40     	; 0x1608 <vfprintf+0x88>
    15e0:	8b 32       	cpi	r24, 0x2B	; 43
    15e2:	69 f0       	breq	.+26     	; 0x15fe <vfprintf+0x7e>
    15e4:	30 f4       	brcc	.+12     	; 0x15f2 <vfprintf+0x72>
    15e6:	80 32       	cpi	r24, 0x20	; 32
    15e8:	59 f0       	breq	.+22     	; 0x1600 <vfprintf+0x80>
    15ea:	83 32       	cpi	r24, 0x23	; 35
    15ec:	69 f4       	brne	.+26     	; 0x1608 <vfprintf+0x88>
    15ee:	20 61       	ori	r18, 0x10	; 16
    15f0:	2c c0       	rjmp	.+88     	; 0x164a <vfprintf+0xca>
    15f2:	8d 32       	cpi	r24, 0x2D	; 45
    15f4:	39 f0       	breq	.+14     	; 0x1604 <vfprintf+0x84>
    15f6:	80 33       	cpi	r24, 0x30	; 48
    15f8:	39 f4       	brne	.+14     	; 0x1608 <vfprintf+0x88>
    15fa:	21 60       	ori	r18, 0x01	; 1
    15fc:	26 c0       	rjmp	.+76     	; 0x164a <vfprintf+0xca>
    15fe:	22 60       	ori	r18, 0x02	; 2
    1600:	24 60       	ori	r18, 0x04	; 4
    1602:	23 c0       	rjmp	.+70     	; 0x164a <vfprintf+0xca>
    1604:	28 60       	ori	r18, 0x08	; 8
    1606:	21 c0       	rjmp	.+66     	; 0x164a <vfprintf+0xca>
    1608:	27 fd       	sbrc	r18, 7
    160a:	27 c0       	rjmp	.+78     	; 0x165a <vfprintf+0xda>
    160c:	30 ed       	ldi	r19, 0xD0	; 208
    160e:	38 0f       	add	r19, r24
    1610:	3a 30       	cpi	r19, 0x0A	; 10
    1612:	78 f4       	brcc	.+30     	; 0x1632 <vfprintf+0xb2>
    1614:	26 ff       	sbrs	r18, 6
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <vfprintf+0xa4>
    1618:	fa e0       	ldi	r31, 0x0A	; 10
    161a:	5f 9e       	mul	r5, r31
    161c:	30 0d       	add	r19, r0
    161e:	11 24       	eor	r1, r1
    1620:	53 2e       	mov	r5, r19
    1622:	13 c0       	rjmp	.+38     	; 0x164a <vfprintf+0xca>
    1624:	8a e0       	ldi	r24, 0x0A	; 10
    1626:	38 9e       	mul	r3, r24
    1628:	30 0d       	add	r19, r0
    162a:	11 24       	eor	r1, r1
    162c:	33 2e       	mov	r3, r19
    162e:	20 62       	ori	r18, 0x20	; 32
    1630:	0c c0       	rjmp	.+24     	; 0x164a <vfprintf+0xca>
    1632:	8e 32       	cpi	r24, 0x2E	; 46
    1634:	21 f4       	brne	.+8      	; 0x163e <vfprintf+0xbe>
    1636:	26 fd       	sbrc	r18, 6
    1638:	6b c1       	rjmp	.+726    	; 0x1910 <vfprintf+0x390>
    163a:	20 64       	ori	r18, 0x40	; 64
    163c:	06 c0       	rjmp	.+12     	; 0x164a <vfprintf+0xca>
    163e:	8c 36       	cpi	r24, 0x6C	; 108
    1640:	11 f4       	brne	.+4      	; 0x1646 <vfprintf+0xc6>
    1642:	20 68       	ori	r18, 0x80	; 128
    1644:	02 c0       	rjmp	.+4      	; 0x164a <vfprintf+0xca>
    1646:	88 36       	cpi	r24, 0x68	; 104
    1648:	41 f4       	brne	.+16     	; 0x165a <vfprintf+0xda>
    164a:	f6 01       	movw	r30, r12
    164c:	93 fd       	sbrc	r25, 3
    164e:	85 91       	lpm	r24, Z+
    1650:	93 ff       	sbrs	r25, 3
    1652:	81 91       	ld	r24, Z+
    1654:	6f 01       	movw	r12, r30
    1656:	81 11       	cpse	r24, r1
    1658:	c1 cf       	rjmp	.-126    	; 0x15dc <vfprintf+0x5c>
    165a:	98 2f       	mov	r25, r24
    165c:	9f 7d       	andi	r25, 0xDF	; 223
    165e:	95 54       	subi	r25, 0x45	; 69
    1660:	93 30       	cpi	r25, 0x03	; 3
    1662:	28 f4       	brcc	.+10     	; 0x166e <vfprintf+0xee>
    1664:	0c 5f       	subi	r16, 0xFC	; 252
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	ff e3       	ldi	r31, 0x3F	; 63
    166a:	f9 83       	std	Y+1, r31	; 0x01
    166c:	0d c0       	rjmp	.+26     	; 0x1688 <vfprintf+0x108>
    166e:	83 36       	cpi	r24, 0x63	; 99
    1670:	31 f0       	breq	.+12     	; 0x167e <vfprintf+0xfe>
    1672:	83 37       	cpi	r24, 0x73	; 115
    1674:	71 f0       	breq	.+28     	; 0x1692 <vfprintf+0x112>
    1676:	83 35       	cpi	r24, 0x53	; 83
    1678:	09 f0       	breq	.+2      	; 0x167c <vfprintf+0xfc>
    167a:	5b c0       	rjmp	.+182    	; 0x1732 <vfprintf+0x1b2>
    167c:	22 c0       	rjmp	.+68     	; 0x16c2 <vfprintf+0x142>
    167e:	f8 01       	movw	r30, r16
    1680:	80 81       	ld	r24, Z
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	0e 5f       	subi	r16, 0xFE	; 254
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	44 24       	eor	r4, r4
    168a:	43 94       	inc	r4
    168c:	51 2c       	mov	r5, r1
    168e:	54 01       	movw	r10, r8
    1690:	15 c0       	rjmp	.+42     	; 0x16bc <vfprintf+0x13c>
    1692:	38 01       	movw	r6, r16
    1694:	f2 e0       	ldi	r31, 0x02	; 2
    1696:	6f 0e       	add	r6, r31
    1698:	71 1c       	adc	r7, r1
    169a:	f8 01       	movw	r30, r16
    169c:	a0 80       	ld	r10, Z
    169e:	b1 80       	ldd	r11, Z+1	; 0x01
    16a0:	26 ff       	sbrs	r18, 6
    16a2:	03 c0       	rjmp	.+6      	; 0x16aa <vfprintf+0x12a>
    16a4:	65 2d       	mov	r22, r5
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <vfprintf+0x12e>
    16aa:	6f ef       	ldi	r22, 0xFF	; 255
    16ac:	7f ef       	ldi	r23, 0xFF	; 255
    16ae:	c5 01       	movw	r24, r10
    16b0:	2c 87       	std	Y+12, r18	; 0x0c
    16b2:	0e 94 9d 0c 	call	0x193a	; 0x193a <strnlen>
    16b6:	2c 01       	movw	r4, r24
    16b8:	83 01       	movw	r16, r6
    16ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    16bc:	2f 77       	andi	r18, 0x7F	; 127
    16be:	22 2e       	mov	r2, r18
    16c0:	17 c0       	rjmp	.+46     	; 0x16f0 <vfprintf+0x170>
    16c2:	38 01       	movw	r6, r16
    16c4:	f2 e0       	ldi	r31, 0x02	; 2
    16c6:	6f 0e       	add	r6, r31
    16c8:	71 1c       	adc	r7, r1
    16ca:	f8 01       	movw	r30, r16
    16cc:	a0 80       	ld	r10, Z
    16ce:	b1 80       	ldd	r11, Z+1	; 0x01
    16d0:	26 ff       	sbrs	r18, 6
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <vfprintf+0x15a>
    16d4:	65 2d       	mov	r22, r5
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <vfprintf+0x15e>
    16da:	6f ef       	ldi	r22, 0xFF	; 255
    16dc:	7f ef       	ldi	r23, 0xFF	; 255
    16de:	c5 01       	movw	r24, r10
    16e0:	2c 87       	std	Y+12, r18	; 0x0c
    16e2:	0e 94 92 0c 	call	0x1924	; 0x1924 <strnlen_P>
    16e6:	2c 01       	movw	r4, r24
    16e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ea:	20 68       	ori	r18, 0x80	; 128
    16ec:	22 2e       	mov	r2, r18
    16ee:	83 01       	movw	r16, r6
    16f0:	23 fc       	sbrc	r2, 3
    16f2:	1b c0       	rjmp	.+54     	; 0x172a <vfprintf+0x1aa>
    16f4:	83 2d       	mov	r24, r3
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	48 16       	cp	r4, r24
    16fa:	59 06       	cpc	r5, r25
    16fc:	b0 f4       	brcc	.+44     	; 0x172a <vfprintf+0x1aa>
    16fe:	b7 01       	movw	r22, r14
    1700:	80 e2       	ldi	r24, 0x20	; 32
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    1708:	3a 94       	dec	r3
    170a:	f4 cf       	rjmp	.-24     	; 0x16f4 <vfprintf+0x174>
    170c:	f5 01       	movw	r30, r10
    170e:	27 fc       	sbrc	r2, 7
    1710:	85 91       	lpm	r24, Z+
    1712:	27 fe       	sbrs	r2, 7
    1714:	81 91       	ld	r24, Z+
    1716:	5f 01       	movw	r10, r30
    1718:	b7 01       	movw	r22, r14
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    1720:	31 10       	cpse	r3, r1
    1722:	3a 94       	dec	r3
    1724:	f1 e0       	ldi	r31, 0x01	; 1
    1726:	4f 1a       	sub	r4, r31
    1728:	51 08       	sbc	r5, r1
    172a:	41 14       	cp	r4, r1
    172c:	51 04       	cpc	r5, r1
    172e:	71 f7       	brne	.-36     	; 0x170c <vfprintf+0x18c>
    1730:	e5 c0       	rjmp	.+458    	; 0x18fc <vfprintf+0x37c>
    1732:	84 36       	cpi	r24, 0x64	; 100
    1734:	11 f0       	breq	.+4      	; 0x173a <vfprintf+0x1ba>
    1736:	89 36       	cpi	r24, 0x69	; 105
    1738:	39 f5       	brne	.+78     	; 0x1788 <vfprintf+0x208>
    173a:	f8 01       	movw	r30, r16
    173c:	27 ff       	sbrs	r18, 7
    173e:	07 c0       	rjmp	.+14     	; 0x174e <vfprintf+0x1ce>
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	0c 5f       	subi	r16, 0xFC	; 252
    174a:	1f 4f       	sbci	r17, 0xFF	; 255
    174c:	08 c0       	rjmp	.+16     	; 0x175e <vfprintf+0x1de>
    174e:	60 81       	ld	r22, Z
    1750:	71 81       	ldd	r23, Z+1	; 0x01
    1752:	88 27       	eor	r24, r24
    1754:	77 fd       	sbrc	r23, 7
    1756:	80 95       	com	r24
    1758:	98 2f       	mov	r25, r24
    175a:	0e 5f       	subi	r16, 0xFE	; 254
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	2f 76       	andi	r18, 0x6F	; 111
    1760:	b2 2e       	mov	r11, r18
    1762:	97 ff       	sbrs	r25, 7
    1764:	09 c0       	rjmp	.+18     	; 0x1778 <vfprintf+0x1f8>
    1766:	90 95       	com	r25
    1768:	80 95       	com	r24
    176a:	70 95       	com	r23
    176c:	61 95       	neg	r22
    176e:	7f 4f       	sbci	r23, 0xFF	; 255
    1770:	8f 4f       	sbci	r24, 0xFF	; 255
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	20 68       	ori	r18, 0x80	; 128
    1776:	b2 2e       	mov	r11, r18
    1778:	2a e0       	ldi	r18, 0x0A	; 10
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	a4 01       	movw	r20, r8
    177e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__ultoa_invert>
    1782:	a8 2e       	mov	r10, r24
    1784:	a8 18       	sub	r10, r8
    1786:	44 c0       	rjmp	.+136    	; 0x1810 <vfprintf+0x290>
    1788:	85 37       	cpi	r24, 0x75	; 117
    178a:	29 f4       	brne	.+10     	; 0x1796 <vfprintf+0x216>
    178c:	2f 7e       	andi	r18, 0xEF	; 239
    178e:	b2 2e       	mov	r11, r18
    1790:	2a e0       	ldi	r18, 0x0A	; 10
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	25 c0       	rjmp	.+74     	; 0x17e0 <vfprintf+0x260>
    1796:	f2 2f       	mov	r31, r18
    1798:	f9 7f       	andi	r31, 0xF9	; 249
    179a:	bf 2e       	mov	r11, r31
    179c:	8f 36       	cpi	r24, 0x6F	; 111
    179e:	c1 f0       	breq	.+48     	; 0x17d0 <vfprintf+0x250>
    17a0:	18 f4       	brcc	.+6      	; 0x17a8 <vfprintf+0x228>
    17a2:	88 35       	cpi	r24, 0x58	; 88
    17a4:	79 f0       	breq	.+30     	; 0x17c4 <vfprintf+0x244>
    17a6:	b4 c0       	rjmp	.+360    	; 0x1910 <vfprintf+0x390>
    17a8:	80 37       	cpi	r24, 0x70	; 112
    17aa:	19 f0       	breq	.+6      	; 0x17b2 <vfprintf+0x232>
    17ac:	88 37       	cpi	r24, 0x78	; 120
    17ae:	21 f0       	breq	.+8      	; 0x17b8 <vfprintf+0x238>
    17b0:	af c0       	rjmp	.+350    	; 0x1910 <vfprintf+0x390>
    17b2:	2f 2f       	mov	r18, r31
    17b4:	20 61       	ori	r18, 0x10	; 16
    17b6:	b2 2e       	mov	r11, r18
    17b8:	b4 fe       	sbrs	r11, 4
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <vfprintf+0x256>
    17bc:	8b 2d       	mov	r24, r11
    17be:	84 60       	ori	r24, 0x04	; 4
    17c0:	b8 2e       	mov	r11, r24
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <vfprintf+0x256>
    17c4:	24 ff       	sbrs	r18, 4
    17c6:	0a c0       	rjmp	.+20     	; 0x17dc <vfprintf+0x25c>
    17c8:	9f 2f       	mov	r25, r31
    17ca:	96 60       	ori	r25, 0x06	; 6
    17cc:	b9 2e       	mov	r11, r25
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <vfprintf+0x25c>
    17d0:	28 e0       	ldi	r18, 0x08	; 8
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	05 c0       	rjmp	.+10     	; 0x17e0 <vfprintf+0x260>
    17d6:	20 e1       	ldi	r18, 0x10	; 16
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <vfprintf+0x260>
    17dc:	20 e1       	ldi	r18, 0x10	; 16
    17de:	32 e0       	ldi	r19, 0x02	; 2
    17e0:	f8 01       	movw	r30, r16
    17e2:	b7 fe       	sbrs	r11, 7
    17e4:	07 c0       	rjmp	.+14     	; 0x17f4 <vfprintf+0x274>
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	0c 5f       	subi	r16, 0xFC	; 252
    17f0:	1f 4f       	sbci	r17, 0xFF	; 255
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0x280>
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 5f       	subi	r16, 0xFE	; 254
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1800:	a4 01       	movw	r20, r8
    1802:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__ultoa_invert>
    1806:	a8 2e       	mov	r10, r24
    1808:	a8 18       	sub	r10, r8
    180a:	fb 2d       	mov	r31, r11
    180c:	ff 77       	andi	r31, 0x7F	; 127
    180e:	bf 2e       	mov	r11, r31
    1810:	b6 fe       	sbrs	r11, 6
    1812:	0b c0       	rjmp	.+22     	; 0x182a <vfprintf+0x2aa>
    1814:	2b 2d       	mov	r18, r11
    1816:	2e 7f       	andi	r18, 0xFE	; 254
    1818:	a5 14       	cp	r10, r5
    181a:	50 f4       	brcc	.+20     	; 0x1830 <vfprintf+0x2b0>
    181c:	b4 fe       	sbrs	r11, 4
    181e:	0a c0       	rjmp	.+20     	; 0x1834 <vfprintf+0x2b4>
    1820:	b2 fc       	sbrc	r11, 2
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <vfprintf+0x2b4>
    1824:	2b 2d       	mov	r18, r11
    1826:	2e 7e       	andi	r18, 0xEE	; 238
    1828:	05 c0       	rjmp	.+10     	; 0x1834 <vfprintf+0x2b4>
    182a:	7a 2c       	mov	r7, r10
    182c:	2b 2d       	mov	r18, r11
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <vfprintf+0x2b6>
    1830:	7a 2c       	mov	r7, r10
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <vfprintf+0x2b6>
    1834:	75 2c       	mov	r7, r5
    1836:	24 ff       	sbrs	r18, 4
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <vfprintf+0x2d4>
    183a:	fe 01       	movw	r30, r28
    183c:	ea 0d       	add	r30, r10
    183e:	f1 1d       	adc	r31, r1
    1840:	80 81       	ld	r24, Z
    1842:	80 33       	cpi	r24, 0x30	; 48
    1844:	11 f4       	brne	.+4      	; 0x184a <vfprintf+0x2ca>
    1846:	29 7e       	andi	r18, 0xE9	; 233
    1848:	09 c0       	rjmp	.+18     	; 0x185c <vfprintf+0x2dc>
    184a:	22 ff       	sbrs	r18, 2
    184c:	06 c0       	rjmp	.+12     	; 0x185a <vfprintf+0x2da>
    184e:	73 94       	inc	r7
    1850:	73 94       	inc	r7
    1852:	04 c0       	rjmp	.+8      	; 0x185c <vfprintf+0x2dc>
    1854:	82 2f       	mov	r24, r18
    1856:	86 78       	andi	r24, 0x86	; 134
    1858:	09 f0       	breq	.+2      	; 0x185c <vfprintf+0x2dc>
    185a:	73 94       	inc	r7
    185c:	23 fd       	sbrc	r18, 3
    185e:	13 c0       	rjmp	.+38     	; 0x1886 <vfprintf+0x306>
    1860:	20 ff       	sbrs	r18, 0
    1862:	06 c0       	rjmp	.+12     	; 0x1870 <vfprintf+0x2f0>
    1864:	5a 2c       	mov	r5, r10
    1866:	73 14       	cp	r7, r3
    1868:	18 f4       	brcc	.+6      	; 0x1870 <vfprintf+0x2f0>
    186a:	53 0c       	add	r5, r3
    186c:	57 18       	sub	r5, r7
    186e:	73 2c       	mov	r7, r3
    1870:	73 14       	cp	r7, r3
    1872:	68 f4       	brcc	.+26     	; 0x188e <vfprintf+0x30e>
    1874:	b7 01       	movw	r22, r14
    1876:	80 e2       	ldi	r24, 0x20	; 32
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	2c 87       	std	Y+12, r18	; 0x0c
    187c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    1880:	73 94       	inc	r7
    1882:	2c 85       	ldd	r18, Y+12	; 0x0c
    1884:	f5 cf       	rjmp	.-22     	; 0x1870 <vfprintf+0x2f0>
    1886:	73 14       	cp	r7, r3
    1888:	10 f4       	brcc	.+4      	; 0x188e <vfprintf+0x30e>
    188a:	37 18       	sub	r3, r7
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <vfprintf+0x310>
    188e:	31 2c       	mov	r3, r1
    1890:	24 ff       	sbrs	r18, 4
    1892:	12 c0       	rjmp	.+36     	; 0x18b8 <vfprintf+0x338>
    1894:	b7 01       	movw	r22, r14
    1896:	80 e3       	ldi	r24, 0x30	; 48
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	2c 87       	std	Y+12, r18	; 0x0c
    189c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    18a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    18a2:	22 ff       	sbrs	r18, 2
    18a4:	17 c0       	rjmp	.+46     	; 0x18d4 <vfprintf+0x354>
    18a6:	21 ff       	sbrs	r18, 1
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <vfprintf+0x330>
    18aa:	88 e5       	ldi	r24, 0x58	; 88
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <vfprintf+0x334>
    18b0:	88 e7       	ldi	r24, 0x78	; 120
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	b7 01       	movw	r22, r14
    18b6:	0c c0       	rjmp	.+24     	; 0x18d0 <vfprintf+0x350>
    18b8:	82 2f       	mov	r24, r18
    18ba:	86 78       	andi	r24, 0x86	; 134
    18bc:	59 f0       	breq	.+22     	; 0x18d4 <vfprintf+0x354>
    18be:	21 fd       	sbrc	r18, 1
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <vfprintf+0x346>
    18c2:	80 e2       	ldi	r24, 0x20	; 32
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <vfprintf+0x348>
    18c6:	8b e2       	ldi	r24, 0x2B	; 43
    18c8:	27 fd       	sbrc	r18, 7
    18ca:	8d e2       	ldi	r24, 0x2D	; 45
    18cc:	b7 01       	movw	r22, r14
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    18d4:	a5 14       	cp	r10, r5
    18d6:	38 f4       	brcc	.+14     	; 0x18e6 <vfprintf+0x366>
    18d8:	b7 01       	movw	r22, r14
    18da:	80 e3       	ldi	r24, 0x30	; 48
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    18e2:	5a 94       	dec	r5
    18e4:	f7 cf       	rjmp	.-18     	; 0x18d4 <vfprintf+0x354>
    18e6:	aa 94       	dec	r10
    18e8:	f4 01       	movw	r30, r8
    18ea:	ea 0d       	add	r30, r10
    18ec:	f1 1d       	adc	r31, r1
    18ee:	80 81       	ld	r24, Z
    18f0:	b7 01       	movw	r22, r14
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    18f8:	a1 10       	cpse	r10, r1
    18fa:	f5 cf       	rjmp	.-22     	; 0x18e6 <vfprintf+0x366>
    18fc:	33 20       	and	r3, r3
    18fe:	09 f4       	brne	.+2      	; 0x1902 <vfprintf+0x382>
    1900:	51 ce       	rjmp	.-862    	; 0x15a4 <vfprintf+0x24>
    1902:	b7 01       	movw	r22, r14
    1904:	80 e2       	ldi	r24, 0x20	; 32
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 a8 0c 	call	0x1950	; 0x1950 <fputc>
    190c:	3a 94       	dec	r3
    190e:	f6 cf       	rjmp	.-20     	; 0x18fc <vfprintf+0x37c>
    1910:	f7 01       	movw	r30, r14
    1912:	86 81       	ldd	r24, Z+6	; 0x06
    1914:	97 81       	ldd	r25, Z+7	; 0x07
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x39c>
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	9f ef       	ldi	r25, 0xFF	; 255
    191c:	2c 96       	adiw	r28, 0x0c	; 12
    191e:	e2 e1       	ldi	r30, 0x12	; 18
    1920:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__epilogue_restores__>

00001924 <strnlen_P>:
    1924:	fc 01       	movw	r30, r24
    1926:	05 90       	lpm	r0, Z+
    1928:	61 50       	subi	r22, 0x01	; 1
    192a:	70 40       	sbci	r23, 0x00	; 0
    192c:	01 10       	cpse	r0, r1
    192e:	d8 f7       	brcc	.-10     	; 0x1926 <strnlen_P+0x2>
    1930:	80 95       	com	r24
    1932:	90 95       	com	r25
    1934:	8e 0f       	add	r24, r30
    1936:	9f 1f       	adc	r25, r31
    1938:	08 95       	ret

0000193a <strnlen>:
    193a:	fc 01       	movw	r30, r24
    193c:	61 50       	subi	r22, 0x01	; 1
    193e:	70 40       	sbci	r23, 0x00	; 0
    1940:	01 90       	ld	r0, Z+
    1942:	01 10       	cpse	r0, r1
    1944:	d8 f7       	brcc	.-10     	; 0x193c <strnlen+0x2>
    1946:	80 95       	com	r24
    1948:	90 95       	com	r25
    194a:	8e 0f       	add	r24, r30
    194c:	9f 1f       	adc	r25, r31
    194e:	08 95       	ret

00001950 <fputc>:
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	18 2f       	mov	r17, r24
    195a:	09 2f       	mov	r16, r25
    195c:	eb 01       	movw	r28, r22
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	81 fd       	sbrc	r24, 1
    1962:	03 c0       	rjmp	.+6      	; 0x196a <fputc+0x1a>
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	9f ef       	ldi	r25, 0xFF	; 255
    1968:	20 c0       	rjmp	.+64     	; 0x19aa <fputc+0x5a>
    196a:	82 ff       	sbrs	r24, 2
    196c:	10 c0       	rjmp	.+32     	; 0x198e <fputc+0x3e>
    196e:	4e 81       	ldd	r20, Y+6	; 0x06
    1970:	5f 81       	ldd	r21, Y+7	; 0x07
    1972:	2c 81       	ldd	r18, Y+4	; 0x04
    1974:	3d 81       	ldd	r19, Y+5	; 0x05
    1976:	42 17       	cp	r20, r18
    1978:	53 07       	cpc	r21, r19
    197a:	7c f4       	brge	.+30     	; 0x199a <fputc+0x4a>
    197c:	e8 81       	ld	r30, Y
    197e:	f9 81       	ldd	r31, Y+1	; 0x01
    1980:	9f 01       	movw	r18, r30
    1982:	2f 5f       	subi	r18, 0xFF	; 255
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	39 83       	std	Y+1, r19	; 0x01
    1988:	28 83       	st	Y, r18
    198a:	10 83       	st	Z, r17
    198c:	06 c0       	rjmp	.+12     	; 0x199a <fputc+0x4a>
    198e:	e8 85       	ldd	r30, Y+8	; 0x08
    1990:	f9 85       	ldd	r31, Y+9	; 0x09
    1992:	81 2f       	mov	r24, r17
    1994:	09 95       	icall
    1996:	89 2b       	or	r24, r25
    1998:	29 f7       	brne	.-54     	; 0x1964 <fputc+0x14>
    199a:	2e 81       	ldd	r18, Y+6	; 0x06
    199c:	3f 81       	ldd	r19, Y+7	; 0x07
    199e:	2f 5f       	subi	r18, 0xFF	; 255
    19a0:	3f 4f       	sbci	r19, 0xFF	; 255
    19a2:	3f 83       	std	Y+7, r19	; 0x07
    19a4:	2e 83       	std	Y+6, r18	; 0x06
    19a6:	81 2f       	mov	r24, r17
    19a8:	90 2f       	mov	r25, r16
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	08 95       	ret

000019b4 <__ultoa_invert>:
    19b4:	fa 01       	movw	r30, r20
    19b6:	aa 27       	eor	r26, r26
    19b8:	28 30       	cpi	r18, 0x08	; 8
    19ba:	51 f1       	breq	.+84     	; 0x1a10 <__ultoa_invert+0x5c>
    19bc:	20 31       	cpi	r18, 0x10	; 16
    19be:	81 f1       	breq	.+96     	; 0x1a20 <__ultoa_invert+0x6c>
    19c0:	e8 94       	clt
    19c2:	6f 93       	push	r22
    19c4:	6e 7f       	andi	r22, 0xFE	; 254
    19c6:	6e 5f       	subi	r22, 0xFE	; 254
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8f 4f       	sbci	r24, 0xFF	; 255
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	af 4f       	sbci	r26, 0xFF	; 255
    19d0:	b1 e0       	ldi	r27, 0x01	; 1
    19d2:	3e d0       	rcall	.+124    	; 0x1a50 <__ultoa_invert+0x9c>
    19d4:	b4 e0       	ldi	r27, 0x04	; 4
    19d6:	3c d0       	rcall	.+120    	; 0x1a50 <__ultoa_invert+0x9c>
    19d8:	67 0f       	add	r22, r23
    19da:	78 1f       	adc	r23, r24
    19dc:	89 1f       	adc	r24, r25
    19de:	9a 1f       	adc	r25, r26
    19e0:	a1 1d       	adc	r26, r1
    19e2:	68 0f       	add	r22, r24
    19e4:	79 1f       	adc	r23, r25
    19e6:	8a 1f       	adc	r24, r26
    19e8:	91 1d       	adc	r25, r1
    19ea:	a1 1d       	adc	r26, r1
    19ec:	6a 0f       	add	r22, r26
    19ee:	71 1d       	adc	r23, r1
    19f0:	81 1d       	adc	r24, r1
    19f2:	91 1d       	adc	r25, r1
    19f4:	a1 1d       	adc	r26, r1
    19f6:	20 d0       	rcall	.+64     	; 0x1a38 <__ultoa_invert+0x84>
    19f8:	09 f4       	brne	.+2      	; 0x19fc <__ultoa_invert+0x48>
    19fa:	68 94       	set
    19fc:	3f 91       	pop	r19
    19fe:	2a e0       	ldi	r18, 0x0A	; 10
    1a00:	26 9f       	mul	r18, r22
    1a02:	11 24       	eor	r1, r1
    1a04:	30 19       	sub	r19, r0
    1a06:	30 5d       	subi	r19, 0xD0	; 208
    1a08:	31 93       	st	Z+, r19
    1a0a:	de f6       	brtc	.-74     	; 0x19c2 <__ultoa_invert+0xe>
    1a0c:	cf 01       	movw	r24, r30
    1a0e:	08 95       	ret
    1a10:	46 2f       	mov	r20, r22
    1a12:	47 70       	andi	r20, 0x07	; 7
    1a14:	40 5d       	subi	r20, 0xD0	; 208
    1a16:	41 93       	st	Z+, r20
    1a18:	b3 e0       	ldi	r27, 0x03	; 3
    1a1a:	0f d0       	rcall	.+30     	; 0x1a3a <__ultoa_invert+0x86>
    1a1c:	c9 f7       	brne	.-14     	; 0x1a10 <__ultoa_invert+0x5c>
    1a1e:	f6 cf       	rjmp	.-20     	; 0x1a0c <__ultoa_invert+0x58>
    1a20:	46 2f       	mov	r20, r22
    1a22:	4f 70       	andi	r20, 0x0F	; 15
    1a24:	40 5d       	subi	r20, 0xD0	; 208
    1a26:	4a 33       	cpi	r20, 0x3A	; 58
    1a28:	18 f0       	brcs	.+6      	; 0x1a30 <__ultoa_invert+0x7c>
    1a2a:	49 5d       	subi	r20, 0xD9	; 217
    1a2c:	31 fd       	sbrc	r19, 1
    1a2e:	40 52       	subi	r20, 0x20	; 32
    1a30:	41 93       	st	Z+, r20
    1a32:	02 d0       	rcall	.+4      	; 0x1a38 <__ultoa_invert+0x84>
    1a34:	a9 f7       	brne	.-22     	; 0x1a20 <__ultoa_invert+0x6c>
    1a36:	ea cf       	rjmp	.-44     	; 0x1a0c <__ultoa_invert+0x58>
    1a38:	b4 e0       	ldi	r27, 0x04	; 4
    1a3a:	a6 95       	lsr	r26
    1a3c:	97 95       	ror	r25
    1a3e:	87 95       	ror	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	ba 95       	dec	r27
    1a46:	c9 f7       	brne	.-14     	; 0x1a3a <__ultoa_invert+0x86>
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	61 05       	cpc	r22, r1
    1a4c:	71 05       	cpc	r23, r1
    1a4e:	08 95       	ret
    1a50:	9b 01       	movw	r18, r22
    1a52:	ac 01       	movw	r20, r24
    1a54:	0a 2e       	mov	r0, r26
    1a56:	06 94       	lsr	r0
    1a58:	57 95       	ror	r21
    1a5a:	47 95       	ror	r20
    1a5c:	37 95       	ror	r19
    1a5e:	27 95       	ror	r18
    1a60:	ba 95       	dec	r27
    1a62:	c9 f7       	brne	.-14     	; 0x1a56 <__ultoa_invert+0xa2>
    1a64:	62 0f       	add	r22, r18
    1a66:	73 1f       	adc	r23, r19
    1a68:	84 1f       	adc	r24, r20
    1a6a:	95 1f       	adc	r25, r21
    1a6c:	a0 1d       	adc	r26, r0
    1a6e:	08 95       	ret

00001a70 <__prologue_saves__>:
    1a70:	2f 92       	push	r2
    1a72:	3f 92       	push	r3
    1a74:	4f 92       	push	r4
    1a76:	5f 92       	push	r5
    1a78:	6f 92       	push	r6
    1a7a:	7f 92       	push	r7
    1a7c:	8f 92       	push	r8
    1a7e:	9f 92       	push	r9
    1a80:	af 92       	push	r10
    1a82:	bf 92       	push	r11
    1a84:	cf 92       	push	r12
    1a86:	df 92       	push	r13
    1a88:	ef 92       	push	r14
    1a8a:	ff 92       	push	r15
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	ca 1b       	sub	r28, r26
    1a9a:	db 0b       	sbc	r29, r27
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	09 94       	ijmp

00001aa8 <__epilogue_restores__>:
    1aa8:	2a 88       	ldd	r2, Y+18	; 0x12
    1aaa:	39 88       	ldd	r3, Y+17	; 0x11
    1aac:	48 88       	ldd	r4, Y+16	; 0x10
    1aae:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ab0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ab2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ab4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ab6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ab8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aba:	b9 84       	ldd	r11, Y+9	; 0x09
    1abc:	c8 84       	ldd	r12, Y+8	; 0x08
    1abe:	df 80       	ldd	r13, Y+7	; 0x07
    1ac0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ac2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ac4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ac6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ac8:	aa 81       	ldd	r26, Y+2	; 0x02
    1aca:	b9 81       	ldd	r27, Y+1	; 0x01
    1acc:	ce 0f       	add	r28, r30
    1ace:	d1 1d       	adc	r29, r1
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	ed 01       	movw	r28, r26
    1adc:	08 95       	ret

00001ade <_exit>:
    1ade:	f8 94       	cli

00001ae0 <__stop_program>:
    1ae0:	ff cf       	rjmp	.-2      	; 0x1ae0 <__stop_program>
