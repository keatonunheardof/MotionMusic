
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000ad0  00000b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800108  00800108  00000b6c  2**0
                  ALLOC
  3 .stab         00001ddc  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000125a  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003ba2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	d8 01       	movw	r26, r16
  6a:	b1 01       	movw	r22, r2
  6c:	b1 01       	movw	r22, r2
  6e:	b1 01       	movw	r22, r2
  70:	b1 01       	movw	r22, r2
  72:	b1 01       	movw	r22, r2
  74:	b1 01       	movw	r22, r2
  76:	b1 01       	movw	r22, r2
  78:	d8 01       	movw	r26, r16
  7a:	b1 01       	movw	r22, r2
  7c:	b1 01       	movw	r22, r2
  7e:	b1 01       	movw	r22, r2
  80:	b1 01       	movw	r22, r2
  82:	b1 01       	movw	r22, r2
  84:	b1 01       	movw	r22, r2
  86:	b1 01       	movw	r22, r2
  88:	e2 01       	movw	r28, r4
  8a:	b1 01       	movw	r22, r2
  8c:	b1 01       	movw	r22, r2
  8e:	b1 01       	movw	r22, r2
  90:	b1 01       	movw	r22, r2
  92:	b1 01       	movw	r22, r2
  94:	b1 01       	movw	r22, r2
  96:	b1 01       	movw	r22, r2
  98:	b1 01       	movw	r22, r2
  9a:	b1 01       	movw	r22, r2
  9c:	b1 01       	movw	r22, r2
  9e:	b1 01       	movw	r22, r2
  a0:	b1 01       	movw	r22, r2
  a2:	b1 01       	movw	r22, r2
  a4:	b1 01       	movw	r22, r2
  a6:	b1 01       	movw	r22, r2
  a8:	e2 01       	movw	r28, r4
  aa:	b1 01       	movw	r22, r2
  ac:	b1 01       	movw	r22, r2
  ae:	b1 01       	movw	r22, r2
  b0:	b1 01       	movw	r22, r2
  b2:	b1 01       	movw	r22, r2
  b4:	b1 01       	movw	r22, r2
  b6:	b1 01       	movw	r22, r2
  b8:	b1 01       	movw	r22, r2
  ba:	b1 01       	movw	r22, r2
  bc:	b1 01       	movw	r22, r2
  be:	b1 01       	movw	r22, r2
  c0:	b1 01       	movw	r22, r2
  c2:	b1 01       	movw	r22, r2
  c4:	b1 01       	movw	r22, r2
  c6:	b1 01       	movw	r22, r2
  c8:	f9 01       	movw	r30, r18
  ca:	b1 01       	movw	r22, r2
  cc:	b1 01       	movw	r22, r2
  ce:	b1 01       	movw	r22, r2
  d0:	b1 01       	movw	r22, r2
  d2:	b1 01       	movw	r22, r2
  d4:	b1 01       	movw	r22, r2
  d6:	b1 01       	movw	r22, r2
  d8:	fd 01       	movw	r30, r26
  da:	b1 01       	movw	r22, r2
  dc:	b1 01       	movw	r22, r2
  de:	b1 01       	movw	r22, r2
  e0:	b1 01       	movw	r22, r2
  e2:	b1 01       	movw	r22, r2
  e4:	b1 01       	movw	r22, r2
  e6:	b1 01       	movw	r22, r2
  e8:	b1 01       	movw	r22, r2
  ea:	b1 01       	movw	r22, r2
  ec:	b1 01       	movw	r22, r2
  ee:	b1 01       	movw	r22, r2
  f0:	b1 01       	movw	r22, r2
  f2:	b1 01       	movw	r22, r2
  f4:	b1 01       	movw	r22, r2
  f6:	b1 01       	movw	r22, r2
  f8:	0b 02       	muls	r16, r27
  fa:	b1 01       	movw	r22, r2
  fc:	b1 01       	movw	r22, r2
  fe:	b1 01       	movw	r22, r2
 100:	b1 01       	movw	r22, r2
 102:	b1 01       	movw	r22, r2
 104:	b1 01       	movw	r22, r2
 106:	b1 01       	movw	r22, r2
 108:	c9 01       	movw	r24, r18

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	e0 ed       	ldi	r30, 0xD0	; 208
 11e:	fa e0       	ldi	r31, 0x0A	; 10
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a8 30       	cpi	r26, 0x08	; 8
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a8 e0       	ldi	r26, 0x08	; 8
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a2 31       	cpi	r26, 0x12	; 18
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
 140:	0c 94 66 05 	jmp	0xacc	; 0xacc <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <UART_Init>:

// Initialize UART 
void UART_Init( uint16_t ubrr){

    // Set baud rate 
    UBRR0H = (char)(ubrr>>8);
 148:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (char)ubrr;
 14c:	80 93 c4 00 	sts	0x00C4, r24

    // Enable receiver and transmitter 
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 150:	88 e1       	ldi	r24, 0x18	; 24
 152:	80 93 c1 00 	sts	0x00C1, r24

    // Set frame format: 8 data bits, 2 stop bits 
    UCSR0C = (0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	80 93 c2 00 	sts	0x00C2, r24
 15c:	08 95       	ret

0000015e <UART_Transmit>:

// UART Transmit
void UART_Transmit( char data ){

    // Wait for empty transmit buffer 
    while (!( UCSR0A & (1<<UDRE0))){}
 15e:	90 91 c0 00 	lds	r25, 0x00C0
 162:	95 ff       	sbrs	r25, 5
 164:	fc cf       	rjmp	.-8      	; 0x15e <UART_Transmit>

    // Put data into buffer, sends the data
    UDR0 = data;
 166:	80 93 c6 00 	sts	0x00C6, r24
 16a:	08 95       	ret

0000016c <UART_Receive>:

// UART Receive
char UART_Receive( void ){

    // Wait for data to be received 
    while ( !(UCSR0A & (1<<RXC0)) ){}
 16c:	80 91 c0 00 	lds	r24, 0x00C0
 170:	87 ff       	sbrs	r24, 7
 172:	fc cf       	rjmp	.-8      	; 0x16c <UART_Receive>

    // Get and return received data from buffer 
    return UDR0;
 174:	80 91 c6 00 	lds	r24, 0x00C6
}
 178:	08 95       	ret

0000017a <UART_Transmit_String>:
void UART_Transmit_String( char str[] ){

    int i = 0;
    
    // Transmit until a null character is reached
    while(str[i] != 0x00){
 17a:	fc 01       	movw	r30, r24
 17c:	20 81       	ld	r18, Z
 17e:	22 23       	and	r18, r18
 180:	51 f0       	breq	.+20     	; 0x196 <UART_Transmit_String+0x1c>
 182:	31 96       	adiw	r30, 0x01	; 1

// UART Transmit
void UART_Transmit( char data ){

    // Wait for empty transmit buffer 
    while (!( UCSR0A & (1<<UDRE0))){}
 184:	80 91 c0 00 	lds	r24, 0x00C0
 188:	85 ff       	sbrs	r24, 5
 18a:	fc cf       	rjmp	.-8      	; 0x184 <UART_Transmit_String+0xa>

    // Put data into buffer, sends the data
    UDR0 = data;
 18c:	20 93 c6 00 	sts	0x00C6, r18
void UART_Transmit_String( char str[] ){

    int i = 0;
    
    // Transmit until a null character is reached
    while(str[i] != 0x00){
 190:	21 91       	ld	r18, Z+
 192:	21 11       	cpse	r18, r1
 194:	f7 cf       	rjmp	.-18     	; 0x184 <UART_Transmit_String+0xa>
 196:	08 95       	ret

00000198 <UART_Receive_Byte>:

// UART Receive
char UART_Receive( void ){

    // Wait for data to be received 
    while ( !(UCSR0A & (1<<RXC0)) ){}
 198:	80 91 c0 00 	lds	r24, 0x00C0
 19c:	87 ff       	sbrs	r24, 7
 19e:	fc cf       	rjmp	.-8      	; 0x198 <UART_Receive_Byte>

    // Get and return received data from buffer 
    return UDR0;
 1a0:	80 91 c6 00 	lds	r24, 0x00C6

// UART Transmit
void UART_Transmit( char data ){

    // Wait for empty transmit buffer 
    while (!( UCSR0A & (1<<UDRE0))){}
 1a4:	90 91 c0 00 	lds	r25, 0x00C0
 1a8:	95 ff       	sbrs	r25, 5
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <UART_Receive_Byte+0xc>

    // Put data into buffer, sends the data
    UDR0 = data;
 1ac:	80 93 c6 00 	sts	0x00C6, r24

// UART Receive
char UART_Receive( void ){

    // Wait for data to be received 
    while ( !(UCSR0A & (1<<RXC0)) ){}
 1b0:	90 91 c0 00 	lds	r25, 0x00C0
 1b4:	97 ff       	sbrs	r25, 7
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <UART_Receive_Byte+0x18>

    // Get and return received data from buffer 
    return UDR0;
 1b8:	20 91 c6 00 	lds	r18, 0x00C6

// UART Transmit
void UART_Transmit( char data ){

    // Wait for empty transmit buffer 
    while (!( UCSR0A & (1<<UDRE0))){}
 1bc:	90 91 c0 00 	lds	r25, 0x00C0
 1c0:	95 ff       	sbrs	r25, 5
 1c2:	fc cf       	rjmp	.-8      	; 0x1bc <UART_Receive_Byte+0x24>

    // Put data into buffer, sends the data
    UDR0 = data;
 1c4:	20 93 c6 00 	sts	0x00C6, r18

// UART Transmit
void UART_Transmit( char data ){

    // Wait for empty transmit buffer 
    while (!( UCSR0A & (1<<UDRE0))){}
 1c8:	90 91 c0 00 	lds	r25, 0x00C0
 1cc:	95 ff       	sbrs	r25, 5
 1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <UART_Receive_Byte+0x30>

    // Put data into buffer, sends the data
    UDR0 = data;
 1d0:	9a e0       	ldi	r25, 0x0A	; 10
 1d2:	90 93 c6 00 	sts	0x00C6, r25

// Convert ASCII character to hex number
uint8_t atoh( char ascii_char ){
    
    // If ASCII character is between A and F
    if(ascii_char >= 'A' && ascii_char <= 'F')
 1d6:	9f eb       	ldi	r25, 0xBF	; 191
 1d8:	98 0f       	add	r25, r24
 1da:	96 30       	cpi	r25, 0x06	; 6
 1dc:	a8 f0       	brcs	.+42     	; 0x208 <UART_Receive_Byte+0x70>
        return ascii_char - 'A' + 10;
    
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
 1de:	9f e9       	ldi	r25, 0x9F	; 159
 1e0:	98 0f       	add	r25, r24
 1e2:	96 30       	cpi	r25, 0x06	; 6
 1e4:	b8 f4       	brcc	.+46     	; 0x214 <UART_Receive_Byte+0x7c>
        return ascii_char - 'a' + 10;
 1e6:	87 55       	subi	r24, 0x57	; 87
 1e8:	82 95       	swap	r24
 1ea:	80 7f       	andi	r24, 0xF0	; 240

// Convert ASCII character to hex number
uint8_t atoh( char ascii_char ){
    
    // If ASCII character is between A and F
    if(ascii_char >= 'A' && ascii_char <= 'F')
 1ec:	9f eb       	ldi	r25, 0xBF	; 191
 1ee:	92 0f       	add	r25, r18
 1f0:	96 30       	cpi	r25, 0x06	; 6
 1f2:	70 f0       	brcs	.+28     	; 0x210 <UART_Receive_Byte+0x78>
        return ascii_char - 'A' + 10;
    
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
 1f4:	9f e9       	ldi	r25, 0x9F	; 159
 1f6:	92 0f       	add	r25, r18
 1f8:	96 30       	cpi	r25, 0x06	; 6
 1fa:	90 f0       	brcs	.+36     	; 0x220 <UART_Receive_Byte+0x88>
        return ascii_char - 'a' + 10;
    
    // If ASCII character is between 0 and 9
    else if(ascii_char >= '0' && ascii_char <= '9')
 1fc:	20 53       	subi	r18, 0x30	; 48
 1fe:	2a 30       	cpi	r18, 0x0A	; 10
 200:	08 f0       	brcs	.+2      	; 0x204 <UART_Receive_Byte+0x6c>
        return ascii_char - '0';

    else return 0;
 202:	20 e0       	ldi	r18, 0x00	; 0

    // Convert ascii characters to an integer from 0 to 255
    byte = (atoh(byte_str[1])<<4) + atoh(byte_str[0]);
        
    return byte;  
}
 204:	82 0f       	add	r24, r18
 206:	08 95       	ret
// Convert ASCII character to hex number
uint8_t atoh( char ascii_char ){
    
    // If ASCII character is between A and F
    if(ascii_char >= 'A' && ascii_char <= 'F')
        return ascii_char - 'A' + 10;
 208:	87 53       	subi	r24, 0x37	; 55
 20a:	82 95       	swap	r24
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	ee cf       	rjmp	.-36     	; 0x1ec <UART_Receive_Byte+0x54>
 210:	27 53       	subi	r18, 0x37	; 55
 212:	f8 cf       	rjmp	.-16     	; 0x204 <UART_Receive_Byte+0x6c>
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
        return ascii_char - 'a' + 10;
    
    // If ASCII character is between 0 and 9
    else if(ascii_char >= '0' && ascii_char <= '9')
 214:	80 53       	subi	r24, 0x30	; 48
 216:	8a 30       	cpi	r24, 0x0A	; 10
 218:	28 f4       	brcc	.+10     	; 0x224 <UART_Receive_Byte+0x8c>
 21a:	82 95       	swap	r24
 21c:	80 7f       	andi	r24, 0xF0	; 240
 21e:	e6 cf       	rjmp	.-52     	; 0x1ec <UART_Receive_Byte+0x54>
    if(ascii_char >= 'A' && ascii_char <= 'F')
        return ascii_char - 'A' + 10;
    
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
        return ascii_char - 'a' + 10;
 220:	27 55       	subi	r18, 0x57	; 87
 222:	f0 cf       	rjmp	.-32     	; 0x204 <UART_Receive_Byte+0x6c>
    
    // If ASCII character is between 0 and 9
    else if(ascii_char >= '0' && ascii_char <= '9')
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	e2 cf       	rjmp	.-60     	; 0x1ec <UART_Receive_Byte+0x54>

00000228 <atoh>:

// Convert ASCII character to hex number
uint8_t atoh( char ascii_char ){
    
    // If ASCII character is between A and F
    if(ascii_char >= 'A' && ascii_char <= 'F')
 228:	9f eb       	ldi	r25, 0xBF	; 191
 22a:	98 0f       	add	r25, r24
 22c:	96 30       	cpi	r25, 0x06	; 6
 22e:	50 f0       	brcs	.+20     	; 0x244 <atoh+0x1c>
        return ascii_char - 'A' + 10;
    
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
 230:	9f e9       	ldi	r25, 0x9F	; 159
 232:	98 0f       	add	r25, r24
 234:	96 30       	cpi	r25, 0x06	; 6
 236:	20 f0       	brcs	.+8      	; 0x240 <atoh+0x18>
        return ascii_char - 'a' + 10;
    
    // If ASCII character is between 0 and 9
    else if(ascii_char >= '0' && ascii_char <= '9')
 238:	80 53       	subi	r24, 0x30	; 48
 23a:	8a 30       	cpi	r24, 0x0A	; 10
 23c:	28 f4       	brcc	.+10     	; 0x248 <atoh+0x20>
        return ascii_char - '0';

    else return 0;
}
 23e:	08 95       	ret
    if(ascii_char >= 'A' && ascii_char <= 'F')
        return ascii_char - 'A' + 10;
    
    // If ASCII character is between a and f
    else if(ascii_char >= 'a' && ascii_char <= 'f')
        return ascii_char - 'a' + 10;
 240:	87 55       	subi	r24, 0x57	; 87
 242:	08 95       	ret
// Convert ASCII character to hex number
uint8_t atoh( char ascii_char ){
    
    // If ASCII character is between A and F
    if(ascii_char >= 'A' && ascii_char <= 'F')
        return ascii_char - 'A' + 10;
 244:	87 53       	subi	r24, 0x37	; 55
 246:	08 95       	ret
    
    // If ASCII character is between 0 and 9
    else if(ascii_char >= '0' && ascii_char <= '9')
        return ascii_char - '0';

    else return 0;
 248:	80 e0       	ldi	r24, 0x00	; 0
}
 24a:	08 95       	ret

0000024c <SPI_Init>:

// Initialize ATMega328p for SPI Transmition
void SPI_Init(void){

    // Set MOSI, SCK and SS to output, and MISO to input
    DDRB = 0x2C;
 24c:	8c e2       	ldi	r24, 0x2C	; 44
 24e:	84 b9       	out	0x04, r24	; 4

    // Set CS High
    PORTB |= (1<<PB2);
 250:	2a 9a       	sbi	0x05, 2	; 5

    // SPI enabled, master, low polarity, MSB 1st
    SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA); 
 252:	8c e5       	ldi	r24, 0x5C	; 92
 254:	8c bd       	out	0x2c, r24	; 44
   
    // Set SCK to run at I/O Clock/2
    SPSR = (1<<SPI2X); 
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	8d bd       	out	0x2d, r24	; 45
 25a:	08 95       	ret

0000025c <SPI_Transmit>:

// Send SPI Data
void SPI_Transmit(uint8_t address, uint8_t data_out){
   
    // Drive CS Low    
    PORTB &= ~(1<<PB2);
 25c:	2a 98       	cbi	0x05, 2	; 5

    // Load address of where to write data
    SPDR = address;
 25e:	8e bd       	out	0x2e, r24	; 46
    
    // Wait until 8 clock cycles are done
    while(!(SPSR & (1<<SPIF))){}
 260:	0d b4       	in	r0, 0x2d	; 45
 262:	07 fe       	sbrs	r0, 7
 264:	fd cf       	rjmp	.-6      	; 0x260 <SPI_Transmit+0x4>
    
    // Load data into SPDR for transmition
    SPDR = data_out;
 266:	6e bd       	out	0x2e, r22	; 46
    
    // Wait until 8 clock cycles are done
    while(!(SPSR & (1<<SPIF))){}
 268:	0d b4       	in	r0, 0x2d	; 45
 26a:	07 fe       	sbrs	r0, 7
 26c:	fd cf       	rjmp	.-6      	; 0x268 <SPI_Transmit+0xc>
    
    // Drive CS High    
    PORTB |= (1<<PB2);
 26e:	2a 9a       	sbi	0x05, 2	; 5
 270:	08 95       	ret

00000272 <SPI_Receive>:

// Read SPI Data
uint8_t SPI_Receive(uint8_t address){
    
    // Drive CS Low    
    PORTB &= ~(1<<PB2);
 272:	2a 98       	cbi	0x05, 2	; 5
    
    // Load address of where to read data
    SPDR = (0x80 | address);
 274:	80 68       	ori	r24, 0x80	; 128
 276:	8e bd       	out	0x2e, r24	; 46
    
    // Wait until 8 clock cycles are done
    while(!(SPSR & (1<<SPIF))){}
 278:	0d b4       	in	r0, 0x2d	; 45
 27a:	07 fe       	sbrs	r0, 7
 27c:	fd cf       	rjmp	.-6      	; 0x278 <SPI_Receive+0x6>
    
    // Load dummy to receive return transmition
    SPDR = 0x00;
 27e:	1e bc       	out	0x2e, r1	; 46
    
    // Wait until 8 clock cycles are done
    while(!(SPSR & (1<<SPIF))){}
 280:	0d b4       	in	r0, 0x2d	; 45
 282:	07 fe       	sbrs	r0, 7
 284:	fd cf       	rjmp	.-6      	; 0x280 <SPI_Receive+0xe>
    
    // Drive CS High    
    PORTB |= (1<<PB2);
 286:	2a 9a       	sbi	0x05, 2	; 5
    
    // Return incoming data from SPDR
    return(SPDR);  
 288:	8e b5       	in	r24, 0x2e	; 46
}
 28a:	08 95       	ret

0000028c <init_LSM6DS3>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	8f e5       	ldi	r24, 0x5F	; 95
 28e:	9a ee       	ldi	r25, 0xEA	; 234
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <init_LSM6DS3+0x4>
 294:	00 c0       	rjmp	.+0      	; 0x296 <init_LSM6DS3+0xa>
 296:	00 00       	nop
 298:	08 95       	ret

0000029a <write_LSM6DS3>:
//*****************************************************************************
// 
// This function is used to write to a register on the LSM6DS3. The byte that 
// is in value gets written to the register location specified by address. 

void write_LSM6DS3(uint8_t address, uint8_t value){
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <write_LSM6DS3+0x6>
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62

    uint8_t addr_buf[1];
    uint8_t wr_buf[1];

    // Save address to address buffer
    addr_buf[0] = address;
 2a4:	8a 83       	std	Y+2, r24	; 0x02

    // Save address to address buffer
    wr_buf[0] = value;
 2a6:	69 83       	std	Y+1, r22	; 0x01

    // Write register address of where to read data from
    twi_start_wr(LSM6DS3_WRITE, addr_buf, 1);
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	be 01       	movw	r22, r28
 2ac:	6e 5f       	subi	r22, 0xFE	; 254
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	84 ed       	ldi	r24, 0xD4	; 212
 2b2:	0e 94 2a 02 	call	0x454	; 0x454 <twi_start_wr>

    // Recieve data from register address and store in val_buf
    twi_start_wr(LSM6DS3_WRITE, wr_buf, 1);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	be 01       	movw	r22, r28
 2ba:	6f 5f       	subi	r22, 0xFF	; 255
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	84 ed       	ldi	r24, 0xD4	; 212
 2c0:	0e 94 2a 02 	call	0x454	; 0x454 <twi_start_wr>

}
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <read_LSM6DS3>:
//*****************************************************************************
// 
// This function is used to read from the register specified by address on the 
// LSM6DS3. The result is then saved into rd_buf. 

void read_LSM6DS3(uint8_t address, uint8_t *rd_buf){
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	1f 92       	push	r1
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	8b 01       	movw	r16, r22

    uint8_t addr_buf[1];

    // Save address to address buffer
    addr_buf[0] = address;
 2de:	89 83       	std	Y+1, r24	; 0x01

    // Write register address of where to read data from
    twi_start_wr(LSM6DS3_WRITE, addr_buf, 1);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	be 01       	movw	r22, r28
 2e4:	6f 5f       	subi	r22, 0xFF	; 255
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	84 ed       	ldi	r24, 0xD4	; 212
 2ea:	0e 94 2a 02 	call	0x454	; 0x454 <twi_start_wr>

    // Recieve data from register address and store in rd_buf
    twi_start_rd(LSM6DS3_READ, rd_buf, 1);
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	b8 01       	movw	r22, r16
 2f2:	85 ed       	ldi	r24, 0xD5	; 213
 2f4:	0e 94 3b 02 	call	0x476	; 0x476 <twi_start_rd>

    // Wait until data is recieved
    while(twi_busy());
 2f8:	0e 94 26 02 	call	0x44c	; 0x44c <twi_busy>
 2fc:	81 11       	cpse	r24, r1
 2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <read_LSM6DS3+0x2a>
}
 300:	0f 90       	pop	r0
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	08 95       	ret

0000030c <init_accel>:
// Initialize Accelerometer
//*****************************************************************************
//  
// This function initializes the accelerometer. Listed Below are the parameters
// that the accelerometer is initialized to.
void init_accel(){
 30c:	08 95       	ret

0000030e <init_gyro>:
//*****************************************************************************
// 
// This function initializes the accelerometer. Listed Below are the parameters
// that the accelerometer is initialized to.

void init_gyro(){
 30e:	08 95       	ret

00000310 <accel_data_avail>:
uint8_t accel_data_avail(){

    static uint8_t status_buf[1];

    // Read status register
    read_LSM6DS3(STATUS_REG, status_buf);
 310:	69 e0       	ldi	r22, 0x09	; 9
 312:	71 e0       	ldi	r23, 0x01	; 1
 314:	8e e1       	ldi	r24, 0x1E	; 30
 316:	0e 94 67 01 	call	0x2ce	; 0x2ce <read_LSM6DS3>

    // If Accelerometer data is ready
    if(status_buf[0] & (1<<XLDA))
 31a:	80 91 09 01 	lds	r24, 0x0109
        return 1;
    else
        return 0;
}
 31e:	81 70       	andi	r24, 0x01	; 1
 320:	08 95       	ret

00000322 <gyro_data_avail>:
uint8_t gyro_data_avail(){

    static uint8_t status_buf[1]; 

    // Read status register
    read_LSM6DS3(STATUS_REG, status_buf);
 322:	68 e0       	ldi	r22, 0x08	; 8
 324:	71 e0       	ldi	r23, 0x01	; 1
 326:	8e e1       	ldi	r24, 0x1E	; 30
 328:	0e 94 67 01 	call	0x2ce	; 0x2ce <read_LSM6DS3>

    // If Gyroscope data is ready
    if(status_buf[0] & (1<<GDA))
 32c:	80 91 08 01 	lds	r24, 0x0108
        return 1;
    else
        return 0;

}
 330:	86 95       	lsr	r24
 332:	81 70       	andi	r24, 0x01	; 1
 334:	08 95       	ret

00000336 <set_bits>:
// Set Register Bits 
//*****************************************************************************
// 
// This function sets specific register bits in the LSM6DS3 while leaving the 
// other bits unchanged.
void set_bits(uint8_t address, uint8_t bits_to_set, uint8_t *rd_buf){
 336:	08 95       	ret

00000338 <__vector_24>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 352:	80 91 b9 00 	lds	r24, 0x00B9
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	38 97       	sbiw	r30, 0x08	; 8
 35c:	e1 35       	cpi	r30, 0x51	; 81
 35e:	f1 05       	cpc	r31, r1
 360:	a0 f0       	brcs	.+40     	; 0x38a <__vector_24+0x52>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 362:	80 91 b9 00 	lds	r24, 0x00B9
 366:	80 93 0d 01 	sts	0x010D, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 36a:	84 e0       	ldi	r24, 0x04	; 4
 36c:	80 93 bc 00 	sts	0x00BC, r24
  }//switch
}//TWI_isr
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 38a:	ec 5c       	subi	r30, 0xCC	; 204
 38c:	ff 4f       	sbci	r31, 0xFF	; 255
 38e:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 392:	80 91 0a 01 	lds	r24, 0x010A
 396:	e0 91 0e 01 	lds	r30, 0x010E
 39a:	f0 91 0f 01 	lds	r31, 0x010F
 39e:	e8 0f       	add	r30, r24
 3a0:	f1 1d       	adc	r31, r1
 3a2:	80 91 bb 00 	lds	r24, 0x00BB
 3a6:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 3a8:	84 e9       	ldi	r24, 0x94	; 148
 3aa:	80 93 bc 00 	sts	0x00BC, r24
      break;      
 3ae:	e0 cf       	rjmp	.-64     	; 0x370 <__vector_24+0x38>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 3b0:	80 91 10 01 	lds	r24, 0x0110
 3b4:	80 93 bb 00 	sts	0x00BB, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 3b8:	10 92 0a 01 	sts	0x010A, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 3bc:	85 e8       	ldi	r24, 0x85	; 133
 3be:	80 93 bc 00 	sts	0x00BC, r24
      break;
 3c2:	d6 cf       	rjmp	.-84     	; 0x370 <__vector_24+0x38>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 3c4:	80 91 0a 01 	lds	r24, 0x010A
 3c8:	90 91 11 01 	lds	r25, 0x0111
 3cc:	89 17       	cp	r24, r25
 3ce:	60 f7       	brcc	.-40     	; 0x3a8 <__vector_24+0x70>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 3d0:	e0 91 0e 01 	lds	r30, 0x010E
 3d4:	f0 91 0f 01 	lds	r31, 0x010F
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	98 0f       	add	r25, r24
 3dc:	90 93 0a 01 	sts	0x010A, r25
 3e0:	e8 0f       	add	r30, r24
 3e2:	f1 1d       	adc	r31, r1
 3e4:	80 81       	ld	r24, Z
 3e6:	80 93 bb 00 	sts	0x00BB, r24
        TWCR = TWCR_SEND;               //send next byte 
 3ea:	85 e8       	ldi	r24, 0x85	; 133
 3ec:	80 93 bc 00 	sts	0x00BC, r24
 3f0:	bf cf       	rjmp	.-130    	; 0x370 <__vector_24+0x38>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 3f2:	85 ea       	ldi	r24, 0xA5	; 165
 3f4:	80 93 bc 00 	sts	0x00BC, r24
      break;
 3f8:	bb cf       	rjmp	.-138    	; 0x370 <__vector_24+0x38>
 3fa:	20 91 0a 01 	lds	r18, 0x010A
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 3fe:	80 91 11 01 	lds	r24, 0x0111
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	28 17       	cp	r18, r24
 40a:	39 07       	cpc	r19, r25
 40c:	dc f4       	brge	.+54     	; 0x444 <__vector_24+0x10c>
 40e:	85 ec       	ldi	r24, 0xC5	; 197
 410:	80 93 bc 00 	sts	0x00BC, r24
 414:	ad cf       	rjmp	.-166    	; 0x370 <__vector_24+0x38>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 416:	e0 91 0e 01 	lds	r30, 0x010E
 41a:	f0 91 0f 01 	lds	r31, 0x010F
 41e:	80 91 0a 01 	lds	r24, 0x010A
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	28 0f       	add	r18, r24
 426:	20 93 0a 01 	sts	0x010A, r18
 42a:	e8 0f       	add	r30, r24
 42c:	f1 1d       	adc	r31, r1
 42e:	80 91 bb 00 	lds	r24, 0x00BB
 432:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 434:	80 91 11 01 	lds	r24, 0x0111
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	28 17       	cp	r18, r24
 440:	39 07       	cpc	r19, r25
 442:	2c f3       	brlt	.-54     	; 0x40e <__vector_24+0xd6>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 444:	85 e8       	ldi	r24, 0x85	; 133
 446:	80 93 bc 00 	sts	0x00BC, r24
 44a:	92 cf       	rjmp	.-220    	; 0x370 <__vector_24+0x38>

0000044c <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 44c:	80 91 bc 00 	lds	r24, 0x00BC
}
 450:	81 70       	andi	r24, 0x01	; 1
 452:	08 95       	ret

00000454 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 454:	90 91 bc 00 	lds	r25, 0x00BC
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 458:	90 fd       	sbrc	r25, 0
 45a:	fc cf       	rjmp	.-8      	; 0x454 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 45c:	8e 7f       	andi	r24, 0xFE	; 254
 45e:	80 93 10 01 	sts	0x0110, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 462:	70 93 0f 01 	sts	0x010F, r23
 466:	60 93 0e 01 	sts	0x010E, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 46a:	40 93 11 01 	sts	0x0111, r20
  TWCR = TWCR_START;                    //initiate START
 46e:	85 ea       	ldi	r24, 0xA5	; 165
 470:	80 93 bc 00 	sts	0x00BC, r24
 474:	08 95       	ret

00000476 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 476:	90 91 bc 00 	lds	r25, 0x00BC
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 47a:	90 fd       	sbrc	r25, 0
 47c:	fc cf       	rjmp	.-8      	; 0x476 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	80 93 10 01 	sts	0x0110, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 484:	70 93 0f 01 	sts	0x010F, r23
 488:	60 93 0e 01 	sts	0x010E, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 48c:	40 93 11 01 	sts	0x0111, r20
  TWCR = TWCR_START;                   //initiate START
 490:	85 ea       	ldi	r24, 0xA5	; 165
 492:	80 93 bc 00 	sts	0x00BC, r24
 496:	08 95       	ret

00000498 <init_twi>:
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	80 93 bb 00 	sts	0x00BB, r24
 49e:	10 92 b9 00 	sts	0x00B9, r1
 4a2:	8c e0       	ldi	r24, 0x0C	; 12
 4a4:	80 93 b8 00 	sts	0x00B8, r24
 4a8:	08 95       	ret

000004aa <main>:

//*****************************************************************************
// Main Program
//*****************************************************************************

int main(){
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <main+0xa>
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <main+0xc>
 4b6:	00 d0       	rcall	.+0      	; 0x4b8 <main+0xe>
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62

    char str[6];

    // Initialize UART
    UART_Init(MY_UBRR);
 4bc:	89 e1       	ldi	r24, 0x19	; 25
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 a4 00 	call	0x148	; 0x148 <UART_Init>

    init_twi();	
 4c4:	0e 94 4c 02 	call	0x498	; 0x498 <init_twi>

    sei();
 4c8:	78 94       	sei
    
    read_LSM6DS3(WHO_AM_I, rd_buf);
 4ca:	6c e0       	ldi	r22, 0x0C	; 12
 4cc:	71 e0       	ldi	r23, 0x01	; 1
 4ce:	8f e0       	ldi	r24, 0x0F	; 15
 4d0:	0e 94 67 01 	call	0x2ce	; 0x2ce <read_LSM6DS3>
//    _delay_ms(2);
    sprintf(str,"%02X\r\n",rd_buf[0]);
 4d4:	80 91 0c 01 	lds	r24, 0x010C
 4d8:	1f 92       	push	r1
 4da:	8f 93       	push	r24
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	9f 93       	push	r25
 4e2:	8f 93       	push	r24
 4e4:	8e 01       	movw	r16, r28
 4e6:	0f 5f       	subi	r16, 0xFF	; 255
 4e8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ea:	1f 93       	push	r17
 4ec:	0f 93       	push	r16
 4ee:	0e 94 95 02 	call	0x52a	; 0x52a <sprintf>
    UART_Transmit_String(str);
 4f2:	c8 01       	movw	r24, r16
 4f4:	0e 94 bd 00 	call	0x17a	; 0x17a <UART_Transmit_String>

    return 0;
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
}
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	26 96       	adiw	r28, 0x06	; 6
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	f8 94       	cli
 50e:	de bf       	out	0x3e, r29	; 62
 510:	0f be       	out	0x3f, r0	; 63
 512:	cd bf       	out	0x3d, r28	; 61
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	08 95       	ret

0000051e <__tablejump2__>:
 51e:	ee 0f       	add	r30, r30
 520:	ff 1f       	adc	r31, r31

00000522 <__tablejump__>:
 522:	05 90       	lpm	r0, Z+
 524:	f4 91       	lpm	r31, Z
 526:	e0 2d       	mov	r30, r0
 528:	09 94       	ijmp

0000052a <sprintf>:
 52a:	ae e0       	ldi	r26, 0x0E	; 14
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	eb e9       	ldi	r30, 0x9B	; 155
 530:	f2 e0       	ldi	r31, 0x02	; 2
 532:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__prologue_saves__+0x1c>
 536:	0d 89       	ldd	r16, Y+21	; 0x15
 538:	1e 89       	ldd	r17, Y+22	; 0x16
 53a:	86 e0       	ldi	r24, 0x06	; 6
 53c:	8c 83       	std	Y+4, r24	; 0x04
 53e:	1a 83       	std	Y+2, r17	; 0x02
 540:	09 83       	std	Y+1, r16	; 0x01
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	9f e7       	ldi	r25, 0x7F	; 127
 546:	9e 83       	std	Y+6, r25	; 0x06
 548:	8d 83       	std	Y+5, r24	; 0x05
 54a:	ae 01       	movw	r20, r28
 54c:	47 5e       	subi	r20, 0xE7	; 231
 54e:	5f 4f       	sbci	r21, 0xFF	; 255
 550:	6f 89       	ldd	r22, Y+23	; 0x17
 552:	78 8d       	ldd	r23, Y+24	; 0x18
 554:	ce 01       	movw	r24, r28
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	0e 94 b7 02 	call	0x56e	; 0x56e <vfprintf>
 55c:	ef 81       	ldd	r30, Y+7	; 0x07
 55e:	f8 85       	ldd	r31, Y+8	; 0x08
 560:	e0 0f       	add	r30, r16
 562:	f1 1f       	adc	r31, r17
 564:	10 82       	st	Z, r1
 566:	2e 96       	adiw	r28, 0x0e	; 14
 568:	e4 e0       	ldi	r30, 0x04	; 4
 56a:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__epilogue_restores__+0x1c>

0000056e <vfprintf>:
 56e:	ac e0       	ldi	r26, 0x0C	; 12
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	ed eb       	ldi	r30, 0xBD	; 189
 574:	f2 e0       	ldi	r31, 0x02	; 2
 576:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__prologue_saves__>
 57a:	7c 01       	movw	r14, r24
 57c:	6b 01       	movw	r12, r22
 57e:	8a 01       	movw	r16, r20
 580:	fc 01       	movw	r30, r24
 582:	17 82       	std	Z+7, r1	; 0x07
 584:	16 82       	std	Z+6, r1	; 0x06
 586:	83 81       	ldd	r24, Z+3	; 0x03
 588:	81 ff       	sbrs	r24, 1
 58a:	bd c1       	rjmp	.+890    	; 0x906 <__stack+0x7>
 58c:	ce 01       	movw	r24, r28
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	4c 01       	movw	r8, r24
 592:	f7 01       	movw	r30, r14
 594:	93 81       	ldd	r25, Z+3	; 0x03
 596:	f6 01       	movw	r30, r12
 598:	93 fd       	sbrc	r25, 3
 59a:	85 91       	lpm	r24, Z+
 59c:	93 ff       	sbrs	r25, 3
 59e:	81 91       	ld	r24, Z+
 5a0:	6f 01       	movw	r12, r30
 5a2:	88 23       	and	r24, r24
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <vfprintf+0x3a>
 5a6:	ab c1       	rjmp	.+854    	; 0x8fe <vfprintf+0x390>
 5a8:	85 32       	cpi	r24, 0x25	; 37
 5aa:	39 f4       	brne	.+14     	; 0x5ba <vfprintf+0x4c>
 5ac:	93 fd       	sbrc	r25, 3
 5ae:	85 91       	lpm	r24, Z+
 5b0:	93 ff       	sbrs	r25, 3
 5b2:	81 91       	ld	r24, Z+
 5b4:	6f 01       	movw	r12, r30
 5b6:	85 32       	cpi	r24, 0x25	; 37
 5b8:	29 f4       	brne	.+10     	; 0x5c4 <vfprintf+0x56>
 5ba:	b7 01       	movw	r22, r14
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 5c2:	e7 cf       	rjmp	.-50     	; 0x592 <vfprintf+0x24>
 5c4:	51 2c       	mov	r5, r1
 5c6:	31 2c       	mov	r3, r1
 5c8:	20 e0       	ldi	r18, 0x00	; 0
 5ca:	20 32       	cpi	r18, 0x20	; 32
 5cc:	a0 f4       	brcc	.+40     	; 0x5f6 <vfprintf+0x88>
 5ce:	8b 32       	cpi	r24, 0x2B	; 43
 5d0:	69 f0       	breq	.+26     	; 0x5ec <vfprintf+0x7e>
 5d2:	30 f4       	brcc	.+12     	; 0x5e0 <vfprintf+0x72>
 5d4:	80 32       	cpi	r24, 0x20	; 32
 5d6:	59 f0       	breq	.+22     	; 0x5ee <vfprintf+0x80>
 5d8:	83 32       	cpi	r24, 0x23	; 35
 5da:	69 f4       	brne	.+26     	; 0x5f6 <vfprintf+0x88>
 5dc:	20 61       	ori	r18, 0x10	; 16
 5de:	2c c0       	rjmp	.+88     	; 0x638 <vfprintf+0xca>
 5e0:	8d 32       	cpi	r24, 0x2D	; 45
 5e2:	39 f0       	breq	.+14     	; 0x5f2 <vfprintf+0x84>
 5e4:	80 33       	cpi	r24, 0x30	; 48
 5e6:	39 f4       	brne	.+14     	; 0x5f6 <vfprintf+0x88>
 5e8:	21 60       	ori	r18, 0x01	; 1
 5ea:	26 c0       	rjmp	.+76     	; 0x638 <vfprintf+0xca>
 5ec:	22 60       	ori	r18, 0x02	; 2
 5ee:	24 60       	ori	r18, 0x04	; 4
 5f0:	23 c0       	rjmp	.+70     	; 0x638 <vfprintf+0xca>
 5f2:	28 60       	ori	r18, 0x08	; 8
 5f4:	21 c0       	rjmp	.+66     	; 0x638 <vfprintf+0xca>
 5f6:	27 fd       	sbrc	r18, 7
 5f8:	27 c0       	rjmp	.+78     	; 0x648 <vfprintf+0xda>
 5fa:	30 ed       	ldi	r19, 0xD0	; 208
 5fc:	38 0f       	add	r19, r24
 5fe:	3a 30       	cpi	r19, 0x0A	; 10
 600:	78 f4       	brcc	.+30     	; 0x620 <vfprintf+0xb2>
 602:	26 ff       	sbrs	r18, 6
 604:	06 c0       	rjmp	.+12     	; 0x612 <vfprintf+0xa4>
 606:	fa e0       	ldi	r31, 0x0A	; 10
 608:	5f 9e       	mul	r5, r31
 60a:	30 0d       	add	r19, r0
 60c:	11 24       	eor	r1, r1
 60e:	53 2e       	mov	r5, r19
 610:	13 c0       	rjmp	.+38     	; 0x638 <vfprintf+0xca>
 612:	8a e0       	ldi	r24, 0x0A	; 10
 614:	38 9e       	mul	r3, r24
 616:	30 0d       	add	r19, r0
 618:	11 24       	eor	r1, r1
 61a:	33 2e       	mov	r3, r19
 61c:	20 62       	ori	r18, 0x20	; 32
 61e:	0c c0       	rjmp	.+24     	; 0x638 <vfprintf+0xca>
 620:	8e 32       	cpi	r24, 0x2E	; 46
 622:	21 f4       	brne	.+8      	; 0x62c <vfprintf+0xbe>
 624:	26 fd       	sbrc	r18, 6
 626:	6b c1       	rjmp	.+726    	; 0x8fe <vfprintf+0x390>
 628:	20 64       	ori	r18, 0x40	; 64
 62a:	06 c0       	rjmp	.+12     	; 0x638 <vfprintf+0xca>
 62c:	8c 36       	cpi	r24, 0x6C	; 108
 62e:	11 f4       	brne	.+4      	; 0x634 <vfprintf+0xc6>
 630:	20 68       	ori	r18, 0x80	; 128
 632:	02 c0       	rjmp	.+4      	; 0x638 <vfprintf+0xca>
 634:	88 36       	cpi	r24, 0x68	; 104
 636:	41 f4       	brne	.+16     	; 0x648 <vfprintf+0xda>
 638:	f6 01       	movw	r30, r12
 63a:	93 fd       	sbrc	r25, 3
 63c:	85 91       	lpm	r24, Z+
 63e:	93 ff       	sbrs	r25, 3
 640:	81 91       	ld	r24, Z+
 642:	6f 01       	movw	r12, r30
 644:	81 11       	cpse	r24, r1
 646:	c1 cf       	rjmp	.-126    	; 0x5ca <vfprintf+0x5c>
 648:	98 2f       	mov	r25, r24
 64a:	9f 7d       	andi	r25, 0xDF	; 223
 64c:	95 54       	subi	r25, 0x45	; 69
 64e:	93 30       	cpi	r25, 0x03	; 3
 650:	28 f4       	brcc	.+10     	; 0x65c <vfprintf+0xee>
 652:	0c 5f       	subi	r16, 0xFC	; 252
 654:	1f 4f       	sbci	r17, 0xFF	; 255
 656:	ff e3       	ldi	r31, 0x3F	; 63
 658:	f9 83       	std	Y+1, r31	; 0x01
 65a:	0d c0       	rjmp	.+26     	; 0x676 <vfprintf+0x108>
 65c:	83 36       	cpi	r24, 0x63	; 99
 65e:	31 f0       	breq	.+12     	; 0x66c <vfprintf+0xfe>
 660:	83 37       	cpi	r24, 0x73	; 115
 662:	71 f0       	breq	.+28     	; 0x680 <vfprintf+0x112>
 664:	83 35       	cpi	r24, 0x53	; 83
 666:	09 f0       	breq	.+2      	; 0x66a <vfprintf+0xfc>
 668:	5b c0       	rjmp	.+182    	; 0x720 <vfprintf+0x1b2>
 66a:	22 c0       	rjmp	.+68     	; 0x6b0 <vfprintf+0x142>
 66c:	f8 01       	movw	r30, r16
 66e:	80 81       	ld	r24, Z
 670:	89 83       	std	Y+1, r24	; 0x01
 672:	0e 5f       	subi	r16, 0xFE	; 254
 674:	1f 4f       	sbci	r17, 0xFF	; 255
 676:	44 24       	eor	r4, r4
 678:	43 94       	inc	r4
 67a:	51 2c       	mov	r5, r1
 67c:	54 01       	movw	r10, r8
 67e:	15 c0       	rjmp	.+42     	; 0x6aa <vfprintf+0x13c>
 680:	38 01       	movw	r6, r16
 682:	f2 e0       	ldi	r31, 0x02	; 2
 684:	6f 0e       	add	r6, r31
 686:	71 1c       	adc	r7, r1
 688:	f8 01       	movw	r30, r16
 68a:	a0 80       	ld	r10, Z
 68c:	b1 80       	ldd	r11, Z+1	; 0x01
 68e:	26 ff       	sbrs	r18, 6
 690:	03 c0       	rjmp	.+6      	; 0x698 <vfprintf+0x12a>
 692:	65 2d       	mov	r22, r5
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	02 c0       	rjmp	.+4      	; 0x69c <vfprintf+0x12e>
 698:	6f ef       	ldi	r22, 0xFF	; 255
 69a:	7f ef       	ldi	r23, 0xFF	; 255
 69c:	c5 01       	movw	r24, r10
 69e:	2c 87       	std	Y+12, r18	; 0x0c
 6a0:	0e 94 94 04 	call	0x928	; 0x928 <strnlen>
 6a4:	2c 01       	movw	r4, r24
 6a6:	83 01       	movw	r16, r6
 6a8:	2c 85       	ldd	r18, Y+12	; 0x0c
 6aa:	2f 77       	andi	r18, 0x7F	; 127
 6ac:	22 2e       	mov	r2, r18
 6ae:	17 c0       	rjmp	.+46     	; 0x6de <vfprintf+0x170>
 6b0:	38 01       	movw	r6, r16
 6b2:	f2 e0       	ldi	r31, 0x02	; 2
 6b4:	6f 0e       	add	r6, r31
 6b6:	71 1c       	adc	r7, r1
 6b8:	f8 01       	movw	r30, r16
 6ba:	a0 80       	ld	r10, Z
 6bc:	b1 80       	ldd	r11, Z+1	; 0x01
 6be:	26 ff       	sbrs	r18, 6
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <vfprintf+0x15a>
 6c2:	65 2d       	mov	r22, r5
 6c4:	70 e0       	ldi	r23, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <vfprintf+0x15e>
 6c8:	6f ef       	ldi	r22, 0xFF	; 255
 6ca:	7f ef       	ldi	r23, 0xFF	; 255
 6cc:	c5 01       	movw	r24, r10
 6ce:	2c 87       	std	Y+12, r18	; 0x0c
 6d0:	0e 94 89 04 	call	0x912	; 0x912 <strnlen_P>
 6d4:	2c 01       	movw	r4, r24
 6d6:	2c 85       	ldd	r18, Y+12	; 0x0c
 6d8:	20 68       	ori	r18, 0x80	; 128
 6da:	22 2e       	mov	r2, r18
 6dc:	83 01       	movw	r16, r6
 6de:	23 fc       	sbrc	r2, 3
 6e0:	1b c0       	rjmp	.+54     	; 0x718 <vfprintf+0x1aa>
 6e2:	83 2d       	mov	r24, r3
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	48 16       	cp	r4, r24
 6e8:	59 06       	cpc	r5, r25
 6ea:	b0 f4       	brcc	.+44     	; 0x718 <vfprintf+0x1aa>
 6ec:	b7 01       	movw	r22, r14
 6ee:	80 e2       	ldi	r24, 0x20	; 32
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 6f6:	3a 94       	dec	r3
 6f8:	f4 cf       	rjmp	.-24     	; 0x6e2 <vfprintf+0x174>
 6fa:	f5 01       	movw	r30, r10
 6fc:	27 fc       	sbrc	r2, 7
 6fe:	85 91       	lpm	r24, Z+
 700:	27 fe       	sbrs	r2, 7
 702:	81 91       	ld	r24, Z+
 704:	5f 01       	movw	r10, r30
 706:	b7 01       	movw	r22, r14
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 70e:	31 10       	cpse	r3, r1
 710:	3a 94       	dec	r3
 712:	f1 e0       	ldi	r31, 0x01	; 1
 714:	4f 1a       	sub	r4, r31
 716:	51 08       	sbc	r5, r1
 718:	41 14       	cp	r4, r1
 71a:	51 04       	cpc	r5, r1
 71c:	71 f7       	brne	.-36     	; 0x6fa <vfprintf+0x18c>
 71e:	e5 c0       	rjmp	.+458    	; 0x8ea <vfprintf+0x37c>
 720:	84 36       	cpi	r24, 0x64	; 100
 722:	11 f0       	breq	.+4      	; 0x728 <vfprintf+0x1ba>
 724:	89 36       	cpi	r24, 0x69	; 105
 726:	39 f5       	brne	.+78     	; 0x776 <vfprintf+0x208>
 728:	f8 01       	movw	r30, r16
 72a:	27 ff       	sbrs	r18, 7
 72c:	07 c0       	rjmp	.+14     	; 0x73c <vfprintf+0x1ce>
 72e:	60 81       	ld	r22, Z
 730:	71 81       	ldd	r23, Z+1	; 0x01
 732:	82 81       	ldd	r24, Z+2	; 0x02
 734:	93 81       	ldd	r25, Z+3	; 0x03
 736:	0c 5f       	subi	r16, 0xFC	; 252
 738:	1f 4f       	sbci	r17, 0xFF	; 255
 73a:	08 c0       	rjmp	.+16     	; 0x74c <vfprintf+0x1de>
 73c:	60 81       	ld	r22, Z
 73e:	71 81       	ldd	r23, Z+1	; 0x01
 740:	88 27       	eor	r24, r24
 742:	77 fd       	sbrc	r23, 7
 744:	80 95       	com	r24
 746:	98 2f       	mov	r25, r24
 748:	0e 5f       	subi	r16, 0xFE	; 254
 74a:	1f 4f       	sbci	r17, 0xFF	; 255
 74c:	2f 76       	andi	r18, 0x6F	; 111
 74e:	b2 2e       	mov	r11, r18
 750:	97 ff       	sbrs	r25, 7
 752:	09 c0       	rjmp	.+18     	; 0x766 <vfprintf+0x1f8>
 754:	90 95       	com	r25
 756:	80 95       	com	r24
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	20 68       	ori	r18, 0x80	; 128
 764:	b2 2e       	mov	r11, r18
 766:	2a e0       	ldi	r18, 0x0A	; 10
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	a4 01       	movw	r20, r8
 76c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__ultoa_invert>
 770:	a8 2e       	mov	r10, r24
 772:	a8 18       	sub	r10, r8
 774:	44 c0       	rjmp	.+136    	; 0x7fe <vfprintf+0x290>
 776:	85 37       	cpi	r24, 0x75	; 117
 778:	29 f4       	brne	.+10     	; 0x784 <vfprintf+0x216>
 77a:	2f 7e       	andi	r18, 0xEF	; 239
 77c:	b2 2e       	mov	r11, r18
 77e:	2a e0       	ldi	r18, 0x0A	; 10
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	25 c0       	rjmp	.+74     	; 0x7ce <vfprintf+0x260>
 784:	f2 2f       	mov	r31, r18
 786:	f9 7f       	andi	r31, 0xF9	; 249
 788:	bf 2e       	mov	r11, r31
 78a:	8f 36       	cpi	r24, 0x6F	; 111
 78c:	c1 f0       	breq	.+48     	; 0x7be <vfprintf+0x250>
 78e:	18 f4       	brcc	.+6      	; 0x796 <vfprintf+0x228>
 790:	88 35       	cpi	r24, 0x58	; 88
 792:	79 f0       	breq	.+30     	; 0x7b2 <vfprintf+0x244>
 794:	b4 c0       	rjmp	.+360    	; 0x8fe <vfprintf+0x390>
 796:	80 37       	cpi	r24, 0x70	; 112
 798:	19 f0       	breq	.+6      	; 0x7a0 <vfprintf+0x232>
 79a:	88 37       	cpi	r24, 0x78	; 120
 79c:	21 f0       	breq	.+8      	; 0x7a6 <vfprintf+0x238>
 79e:	af c0       	rjmp	.+350    	; 0x8fe <vfprintf+0x390>
 7a0:	2f 2f       	mov	r18, r31
 7a2:	20 61       	ori	r18, 0x10	; 16
 7a4:	b2 2e       	mov	r11, r18
 7a6:	b4 fe       	sbrs	r11, 4
 7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <vfprintf+0x256>
 7aa:	8b 2d       	mov	r24, r11
 7ac:	84 60       	ori	r24, 0x04	; 4
 7ae:	b8 2e       	mov	r11, r24
 7b0:	09 c0       	rjmp	.+18     	; 0x7c4 <vfprintf+0x256>
 7b2:	24 ff       	sbrs	r18, 4
 7b4:	0a c0       	rjmp	.+20     	; 0x7ca <vfprintf+0x25c>
 7b6:	9f 2f       	mov	r25, r31
 7b8:	96 60       	ori	r25, 0x06	; 6
 7ba:	b9 2e       	mov	r11, r25
 7bc:	06 c0       	rjmp	.+12     	; 0x7ca <vfprintf+0x25c>
 7be:	28 e0       	ldi	r18, 0x08	; 8
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	05 c0       	rjmp	.+10     	; 0x7ce <vfprintf+0x260>
 7c4:	20 e1       	ldi	r18, 0x10	; 16
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <vfprintf+0x260>
 7ca:	20 e1       	ldi	r18, 0x10	; 16
 7cc:	32 e0       	ldi	r19, 0x02	; 2
 7ce:	f8 01       	movw	r30, r16
 7d0:	b7 fe       	sbrs	r11, 7
 7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <vfprintf+0x274>
 7d4:	60 81       	ld	r22, Z
 7d6:	71 81       	ldd	r23, Z+1	; 0x01
 7d8:	82 81       	ldd	r24, Z+2	; 0x02
 7da:	93 81       	ldd	r25, Z+3	; 0x03
 7dc:	0c 5f       	subi	r16, 0xFC	; 252
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
 7e0:	06 c0       	rjmp	.+12     	; 0x7ee <vfprintf+0x280>
 7e2:	60 81       	ld	r22, Z
 7e4:	71 81       	ldd	r23, Z+1	; 0x01
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 5f       	subi	r16, 0xFE	; 254
 7ec:	1f 4f       	sbci	r17, 0xFF	; 255
 7ee:	a4 01       	movw	r20, r8
 7f0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__ultoa_invert>
 7f4:	a8 2e       	mov	r10, r24
 7f6:	a8 18       	sub	r10, r8
 7f8:	fb 2d       	mov	r31, r11
 7fa:	ff 77       	andi	r31, 0x7F	; 127
 7fc:	bf 2e       	mov	r11, r31
 7fe:	b6 fe       	sbrs	r11, 6
 800:	0b c0       	rjmp	.+22     	; 0x818 <vfprintf+0x2aa>
 802:	2b 2d       	mov	r18, r11
 804:	2e 7f       	andi	r18, 0xFE	; 254
 806:	a5 14       	cp	r10, r5
 808:	50 f4       	brcc	.+20     	; 0x81e <vfprintf+0x2b0>
 80a:	b4 fe       	sbrs	r11, 4
 80c:	0a c0       	rjmp	.+20     	; 0x822 <vfprintf+0x2b4>
 80e:	b2 fc       	sbrc	r11, 2
 810:	08 c0       	rjmp	.+16     	; 0x822 <vfprintf+0x2b4>
 812:	2b 2d       	mov	r18, r11
 814:	2e 7e       	andi	r18, 0xEE	; 238
 816:	05 c0       	rjmp	.+10     	; 0x822 <vfprintf+0x2b4>
 818:	7a 2c       	mov	r7, r10
 81a:	2b 2d       	mov	r18, r11
 81c:	03 c0       	rjmp	.+6      	; 0x824 <vfprintf+0x2b6>
 81e:	7a 2c       	mov	r7, r10
 820:	01 c0       	rjmp	.+2      	; 0x824 <vfprintf+0x2b6>
 822:	75 2c       	mov	r7, r5
 824:	24 ff       	sbrs	r18, 4
 826:	0d c0       	rjmp	.+26     	; 0x842 <vfprintf+0x2d4>
 828:	fe 01       	movw	r30, r28
 82a:	ea 0d       	add	r30, r10
 82c:	f1 1d       	adc	r31, r1
 82e:	80 81       	ld	r24, Z
 830:	80 33       	cpi	r24, 0x30	; 48
 832:	11 f4       	brne	.+4      	; 0x838 <vfprintf+0x2ca>
 834:	29 7e       	andi	r18, 0xE9	; 233
 836:	09 c0       	rjmp	.+18     	; 0x84a <vfprintf+0x2dc>
 838:	22 ff       	sbrs	r18, 2
 83a:	06 c0       	rjmp	.+12     	; 0x848 <vfprintf+0x2da>
 83c:	73 94       	inc	r7
 83e:	73 94       	inc	r7
 840:	04 c0       	rjmp	.+8      	; 0x84a <vfprintf+0x2dc>
 842:	82 2f       	mov	r24, r18
 844:	86 78       	andi	r24, 0x86	; 134
 846:	09 f0       	breq	.+2      	; 0x84a <vfprintf+0x2dc>
 848:	73 94       	inc	r7
 84a:	23 fd       	sbrc	r18, 3
 84c:	13 c0       	rjmp	.+38     	; 0x874 <vfprintf+0x306>
 84e:	20 ff       	sbrs	r18, 0
 850:	06 c0       	rjmp	.+12     	; 0x85e <vfprintf+0x2f0>
 852:	5a 2c       	mov	r5, r10
 854:	73 14       	cp	r7, r3
 856:	18 f4       	brcc	.+6      	; 0x85e <vfprintf+0x2f0>
 858:	53 0c       	add	r5, r3
 85a:	57 18       	sub	r5, r7
 85c:	73 2c       	mov	r7, r3
 85e:	73 14       	cp	r7, r3
 860:	68 f4       	brcc	.+26     	; 0x87c <vfprintf+0x30e>
 862:	b7 01       	movw	r22, r14
 864:	80 e2       	ldi	r24, 0x20	; 32
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	2c 87       	std	Y+12, r18	; 0x0c
 86a:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 86e:	73 94       	inc	r7
 870:	2c 85       	ldd	r18, Y+12	; 0x0c
 872:	f5 cf       	rjmp	.-22     	; 0x85e <vfprintf+0x2f0>
 874:	73 14       	cp	r7, r3
 876:	10 f4       	brcc	.+4      	; 0x87c <vfprintf+0x30e>
 878:	37 18       	sub	r3, r7
 87a:	01 c0       	rjmp	.+2      	; 0x87e <vfprintf+0x310>
 87c:	31 2c       	mov	r3, r1
 87e:	24 ff       	sbrs	r18, 4
 880:	12 c0       	rjmp	.+36     	; 0x8a6 <vfprintf+0x338>
 882:	b7 01       	movw	r22, r14
 884:	80 e3       	ldi	r24, 0x30	; 48
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	2c 87       	std	Y+12, r18	; 0x0c
 88a:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 88e:	2c 85       	ldd	r18, Y+12	; 0x0c
 890:	22 ff       	sbrs	r18, 2
 892:	17 c0       	rjmp	.+46     	; 0x8c2 <vfprintf+0x354>
 894:	21 ff       	sbrs	r18, 1
 896:	03 c0       	rjmp	.+6      	; 0x89e <vfprintf+0x330>
 898:	88 e5       	ldi	r24, 0x58	; 88
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <vfprintf+0x334>
 89e:	88 e7       	ldi	r24, 0x78	; 120
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	b7 01       	movw	r22, r14
 8a4:	0c c0       	rjmp	.+24     	; 0x8be <vfprintf+0x350>
 8a6:	82 2f       	mov	r24, r18
 8a8:	86 78       	andi	r24, 0x86	; 134
 8aa:	59 f0       	breq	.+22     	; 0x8c2 <vfprintf+0x354>
 8ac:	21 fd       	sbrc	r18, 1
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <vfprintf+0x346>
 8b0:	80 e2       	ldi	r24, 0x20	; 32
 8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <vfprintf+0x348>
 8b4:	8b e2       	ldi	r24, 0x2B	; 43
 8b6:	27 fd       	sbrc	r18, 7
 8b8:	8d e2       	ldi	r24, 0x2D	; 45
 8ba:	b7 01       	movw	r22, r14
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 8c2:	a5 14       	cp	r10, r5
 8c4:	38 f4       	brcc	.+14     	; 0x8d4 <vfprintf+0x366>
 8c6:	b7 01       	movw	r22, r14
 8c8:	80 e3       	ldi	r24, 0x30	; 48
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 8d0:	5a 94       	dec	r5
 8d2:	f7 cf       	rjmp	.-18     	; 0x8c2 <vfprintf+0x354>
 8d4:	aa 94       	dec	r10
 8d6:	f4 01       	movw	r30, r8
 8d8:	ea 0d       	add	r30, r10
 8da:	f1 1d       	adc	r31, r1
 8dc:	80 81       	ld	r24, Z
 8de:	b7 01       	movw	r22, r14
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 8e6:	a1 10       	cpse	r10, r1
 8e8:	f5 cf       	rjmp	.-22     	; 0x8d4 <vfprintf+0x366>
 8ea:	33 20       	and	r3, r3
 8ec:	09 f4       	brne	.+2      	; 0x8f0 <vfprintf+0x382>
 8ee:	51 ce       	rjmp	.-862    	; 0x592 <vfprintf+0x24>
 8f0:	b7 01       	movw	r22, r14
 8f2:	80 e2       	ldi	r24, 0x20	; 32
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 8fa:	3a 94       	dec	r3
 8fc:	f6 cf       	rjmp	.-20     	; 0x8ea <vfprintf+0x37c>
 8fe:	f7 01       	movw	r30, r14
 900:	86 81       	ldd	r24, Z+6	; 0x06
 902:	97 81       	ldd	r25, Z+7	; 0x07
 904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xb>
 906:	8f ef       	ldi	r24, 0xFF	; 255
 908:	9f ef       	ldi	r25, 0xFF	; 255
 90a:	2c 96       	adiw	r28, 0x0c	; 12
 90c:	e2 e1       	ldi	r30, 0x12	; 18
 90e:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__epilogue_restores__>

00000912 <strnlen_P>:
 912:	fc 01       	movw	r30, r24
 914:	05 90       	lpm	r0, Z+
 916:	61 50       	subi	r22, 0x01	; 1
 918:	70 40       	sbci	r23, 0x00	; 0
 91a:	01 10       	cpse	r0, r1
 91c:	d8 f7       	brcc	.-10     	; 0x914 <strnlen_P+0x2>
 91e:	80 95       	com	r24
 920:	90 95       	com	r25
 922:	8e 0f       	add	r24, r30
 924:	9f 1f       	adc	r25, r31
 926:	08 95       	ret

00000928 <strnlen>:
 928:	fc 01       	movw	r30, r24
 92a:	61 50       	subi	r22, 0x01	; 1
 92c:	70 40       	sbci	r23, 0x00	; 0
 92e:	01 90       	ld	r0, Z+
 930:	01 10       	cpse	r0, r1
 932:	d8 f7       	brcc	.-10     	; 0x92a <strnlen+0x2>
 934:	80 95       	com	r24
 936:	90 95       	com	r25
 938:	8e 0f       	add	r24, r30
 93a:	9f 1f       	adc	r25, r31
 93c:	08 95       	ret

0000093e <fputc>:
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	18 2f       	mov	r17, r24
 948:	09 2f       	mov	r16, r25
 94a:	eb 01       	movw	r28, r22
 94c:	8b 81       	ldd	r24, Y+3	; 0x03
 94e:	81 fd       	sbrc	r24, 1
 950:	03 c0       	rjmp	.+6      	; 0x958 <fputc+0x1a>
 952:	8f ef       	ldi	r24, 0xFF	; 255
 954:	9f ef       	ldi	r25, 0xFF	; 255
 956:	20 c0       	rjmp	.+64     	; 0x998 <fputc+0x5a>
 958:	82 ff       	sbrs	r24, 2
 95a:	10 c0       	rjmp	.+32     	; 0x97c <fputc+0x3e>
 95c:	4e 81       	ldd	r20, Y+6	; 0x06
 95e:	5f 81       	ldd	r21, Y+7	; 0x07
 960:	2c 81       	ldd	r18, Y+4	; 0x04
 962:	3d 81       	ldd	r19, Y+5	; 0x05
 964:	42 17       	cp	r20, r18
 966:	53 07       	cpc	r21, r19
 968:	7c f4       	brge	.+30     	; 0x988 <fputc+0x4a>
 96a:	e8 81       	ld	r30, Y
 96c:	f9 81       	ldd	r31, Y+1	; 0x01
 96e:	9f 01       	movw	r18, r30
 970:	2f 5f       	subi	r18, 0xFF	; 255
 972:	3f 4f       	sbci	r19, 0xFF	; 255
 974:	39 83       	std	Y+1, r19	; 0x01
 976:	28 83       	st	Y, r18
 978:	10 83       	st	Z, r17
 97a:	06 c0       	rjmp	.+12     	; 0x988 <fputc+0x4a>
 97c:	e8 85       	ldd	r30, Y+8	; 0x08
 97e:	f9 85       	ldd	r31, Y+9	; 0x09
 980:	81 2f       	mov	r24, r17
 982:	09 95       	icall
 984:	89 2b       	or	r24, r25
 986:	29 f7       	brne	.-54     	; 0x952 <fputc+0x14>
 988:	2e 81       	ldd	r18, Y+6	; 0x06
 98a:	3f 81       	ldd	r19, Y+7	; 0x07
 98c:	2f 5f       	subi	r18, 0xFF	; 255
 98e:	3f 4f       	sbci	r19, 0xFF	; 255
 990:	3f 83       	std	Y+7, r19	; 0x07
 992:	2e 83       	std	Y+6, r18	; 0x06
 994:	81 2f       	mov	r24, r17
 996:	90 2f       	mov	r25, r16
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	08 95       	ret

000009a2 <__ultoa_invert>:
 9a2:	fa 01       	movw	r30, r20
 9a4:	aa 27       	eor	r26, r26
 9a6:	28 30       	cpi	r18, 0x08	; 8
 9a8:	51 f1       	breq	.+84     	; 0x9fe <__ultoa_invert+0x5c>
 9aa:	20 31       	cpi	r18, 0x10	; 16
 9ac:	81 f1       	breq	.+96     	; 0xa0e <__ultoa_invert+0x6c>
 9ae:	e8 94       	clt
 9b0:	6f 93       	push	r22
 9b2:	6e 7f       	andi	r22, 0xFE	; 254
 9b4:	6e 5f       	subi	r22, 0xFE	; 254
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	af 4f       	sbci	r26, 0xFF	; 255
 9be:	b1 e0       	ldi	r27, 0x01	; 1
 9c0:	3e d0       	rcall	.+124    	; 0xa3e <__ultoa_invert+0x9c>
 9c2:	b4 e0       	ldi	r27, 0x04	; 4
 9c4:	3c d0       	rcall	.+120    	; 0xa3e <__ultoa_invert+0x9c>
 9c6:	67 0f       	add	r22, r23
 9c8:	78 1f       	adc	r23, r24
 9ca:	89 1f       	adc	r24, r25
 9cc:	9a 1f       	adc	r25, r26
 9ce:	a1 1d       	adc	r26, r1
 9d0:	68 0f       	add	r22, r24
 9d2:	79 1f       	adc	r23, r25
 9d4:	8a 1f       	adc	r24, r26
 9d6:	91 1d       	adc	r25, r1
 9d8:	a1 1d       	adc	r26, r1
 9da:	6a 0f       	add	r22, r26
 9dc:	71 1d       	adc	r23, r1
 9de:	81 1d       	adc	r24, r1
 9e0:	91 1d       	adc	r25, r1
 9e2:	a1 1d       	adc	r26, r1
 9e4:	20 d0       	rcall	.+64     	; 0xa26 <__ultoa_invert+0x84>
 9e6:	09 f4       	brne	.+2      	; 0x9ea <__ultoa_invert+0x48>
 9e8:	68 94       	set
 9ea:	3f 91       	pop	r19
 9ec:	2a e0       	ldi	r18, 0x0A	; 10
 9ee:	26 9f       	mul	r18, r22
 9f0:	11 24       	eor	r1, r1
 9f2:	30 19       	sub	r19, r0
 9f4:	30 5d       	subi	r19, 0xD0	; 208
 9f6:	31 93       	st	Z+, r19
 9f8:	de f6       	brtc	.-74     	; 0x9b0 <__ultoa_invert+0xe>
 9fa:	cf 01       	movw	r24, r30
 9fc:	08 95       	ret
 9fe:	46 2f       	mov	r20, r22
 a00:	47 70       	andi	r20, 0x07	; 7
 a02:	40 5d       	subi	r20, 0xD0	; 208
 a04:	41 93       	st	Z+, r20
 a06:	b3 e0       	ldi	r27, 0x03	; 3
 a08:	0f d0       	rcall	.+30     	; 0xa28 <__ultoa_invert+0x86>
 a0a:	c9 f7       	brne	.-14     	; 0x9fe <__ultoa_invert+0x5c>
 a0c:	f6 cf       	rjmp	.-20     	; 0x9fa <__ultoa_invert+0x58>
 a0e:	46 2f       	mov	r20, r22
 a10:	4f 70       	andi	r20, 0x0F	; 15
 a12:	40 5d       	subi	r20, 0xD0	; 208
 a14:	4a 33       	cpi	r20, 0x3A	; 58
 a16:	18 f0       	brcs	.+6      	; 0xa1e <__ultoa_invert+0x7c>
 a18:	49 5d       	subi	r20, 0xD9	; 217
 a1a:	31 fd       	sbrc	r19, 1
 a1c:	40 52       	subi	r20, 0x20	; 32
 a1e:	41 93       	st	Z+, r20
 a20:	02 d0       	rcall	.+4      	; 0xa26 <__ultoa_invert+0x84>
 a22:	a9 f7       	brne	.-22     	; 0xa0e <__ultoa_invert+0x6c>
 a24:	ea cf       	rjmp	.-44     	; 0x9fa <__ultoa_invert+0x58>
 a26:	b4 e0       	ldi	r27, 0x04	; 4
 a28:	a6 95       	lsr	r26
 a2a:	97 95       	ror	r25
 a2c:	87 95       	ror	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	ba 95       	dec	r27
 a34:	c9 f7       	brne	.-14     	; 0xa28 <__ultoa_invert+0x86>
 a36:	00 97       	sbiw	r24, 0x00	; 0
 a38:	61 05       	cpc	r22, r1
 a3a:	71 05       	cpc	r23, r1
 a3c:	08 95       	ret
 a3e:	9b 01       	movw	r18, r22
 a40:	ac 01       	movw	r20, r24
 a42:	0a 2e       	mov	r0, r26
 a44:	06 94       	lsr	r0
 a46:	57 95       	ror	r21
 a48:	47 95       	ror	r20
 a4a:	37 95       	ror	r19
 a4c:	27 95       	ror	r18
 a4e:	ba 95       	dec	r27
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__ultoa_invert+0xa2>
 a52:	62 0f       	add	r22, r18
 a54:	73 1f       	adc	r23, r19
 a56:	84 1f       	adc	r24, r20
 a58:	95 1f       	adc	r25, r21
 a5a:	a0 1d       	adc	r26, r0
 a5c:	08 95       	ret

00000a5e <__prologue_saves__>:
 a5e:	2f 92       	push	r2
 a60:	3f 92       	push	r3
 a62:	4f 92       	push	r4
 a64:	5f 92       	push	r5
 a66:	6f 92       	push	r6
 a68:	7f 92       	push	r7
 a6a:	8f 92       	push	r8
 a6c:	9f 92       	push	r9
 a6e:	af 92       	push	r10
 a70:	bf 92       	push	r11
 a72:	cf 92       	push	r12
 a74:	df 92       	push	r13
 a76:	ef 92       	push	r14
 a78:	ff 92       	push	r15
 a7a:	0f 93       	push	r16
 a7c:	1f 93       	push	r17
 a7e:	cf 93       	push	r28
 a80:	df 93       	push	r29
 a82:	cd b7       	in	r28, 0x3d	; 61
 a84:	de b7       	in	r29, 0x3e	; 62
 a86:	ca 1b       	sub	r28, r26
 a88:	db 0b       	sbc	r29, r27
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	f8 94       	cli
 a8e:	de bf       	out	0x3e, r29	; 62
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	cd bf       	out	0x3d, r28	; 61
 a94:	09 94       	ijmp

00000a96 <__epilogue_restores__>:
 a96:	2a 88       	ldd	r2, Y+18	; 0x12
 a98:	39 88       	ldd	r3, Y+17	; 0x11
 a9a:	48 88       	ldd	r4, Y+16	; 0x10
 a9c:	5f 84       	ldd	r5, Y+15	; 0x0f
 a9e:	6e 84       	ldd	r6, Y+14	; 0x0e
 aa0:	7d 84       	ldd	r7, Y+13	; 0x0d
 aa2:	8c 84       	ldd	r8, Y+12	; 0x0c
 aa4:	9b 84       	ldd	r9, Y+11	; 0x0b
 aa6:	aa 84       	ldd	r10, Y+10	; 0x0a
 aa8:	b9 84       	ldd	r11, Y+9	; 0x09
 aaa:	c8 84       	ldd	r12, Y+8	; 0x08
 aac:	df 80       	ldd	r13, Y+7	; 0x07
 aae:	ee 80       	ldd	r14, Y+6	; 0x06
 ab0:	fd 80       	ldd	r15, Y+5	; 0x05
 ab2:	0c 81       	ldd	r16, Y+4	; 0x04
 ab4:	1b 81       	ldd	r17, Y+3	; 0x03
 ab6:	aa 81       	ldd	r26, Y+2	; 0x02
 ab8:	b9 81       	ldd	r27, Y+1	; 0x01
 aba:	ce 0f       	add	r28, r30
 abc:	d1 1d       	adc	r29, r1
 abe:	0f b6       	in	r0, 0x3f	; 63
 ac0:	f8 94       	cli
 ac2:	de bf       	out	0x3e, r29	; 62
 ac4:	0f be       	out	0x3f, r0	; 63
 ac6:	cd bf       	out	0x3d, r28	; 61
 ac8:	ed 01       	movw	r28, r26
 aca:	08 95       	ret

00000acc <_exit>:
 acc:	f8 94       	cli

00000ace <__stop_program>:
 ace:	ff cf       	rjmp	.-2      	; 0xace <__stop_program>
